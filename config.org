# -*- mode: org; -*-
#+DESCRIPTION: My nice =~/.config/emacs configuration. XDG WHAT!
#+KEYWORDS:  emacs org
#+LANGUAGE:  en
#+STARTUP: entitiespretty fold
#+TODO: TODO(t) BROKEN(t) SKIP(s)

* Introduction
  I know, I'm supposed to only care about writing code and not
  configuring editors. THEN WHY USE EMACS??

  Anyway, that doesn't mean clean structure is not cool! So I'm
  stealing the hell out of using org to do "literate programming" (eh,
  it's not really) of my emacs config from various starter kits
  inspired by each other and also sachac, who is a total Emacs and
  productivity badass.

** Philosophy
   1. Emacs defaults except recent terrible changes. Looking at you
      (transient-mark-mode t)
   2. The Emacs way is fine
      * custom hasn't been really hate-worthy for ages—oh, you hate
        custom? Now who cares more about writing code than configuring
        editors?
      * the new package system is just fine thanks.
   3. I went to the trouble to acquire [[http://www.fsd.it/fonts/pragmatapro.htm][Pragmata Pro]]—because it's awesome,
      but more than that—because I like Unicode enough to buy a
      programming font with decent Unicode support. I'm hardly going to
      do that and then *not* use Unicode in my editor config.
* Startup
** TODO Daemon
** Initial buffers (=*scratch*=)
   #+BEGIN_SRC emacs-lisp
     (setq initial-scratch-message nil)
     (setq inhibit-startup-screen t)
   #+END_SRC
* Basics
** =use-package=
   John Wiegley is an Emacs badass. I am not even kidding.
   #+BEGIN_SRC emacs-lisp
     (require 'use-package)
     (setq use-package-always-ensure t)
     (setq use-package-verbose t)
   #+END_SRC
** Religion
*** Canon
    Rollback sacrilege committed in recent years (decades...)

    I use C-SPC C-SPC frequently to get transient mark and I'm fine
    with that.

    #+BEGIN_SRC emacs-lisp
      (setq
       indent-tabs-mode nil
       transient-mark-mode nil)
    #+END_SRC
*** Buckeys
    #+BEGIN_SRC emacs-lisp
      (case window-system
	('ns
         (setq mac-command-modifier 'meta) ; That's right.
         (setq mac-option-modifier 'super)
         (setq ns-function-modifier 'hyper)))
    #+END_SRC
*** Noise. Make less. 
    The advent of the tool bar—or was it fringe? ugh...—was great for me,
    because it was offensive enough to bother learning how to turn it off.
    Once I was in a turning off mode, I realized that the only thing I
    actually used the scroll bar for is telling how far into a buffer I
    was, and even that was really more distraction than useful.

    There's no point to turning off the menu bar in OSX. Yay for Lion
    Full Screen though!

    #+BEGIN_SRC emacs-lisp
      (fringe-mode 0)
      (tool-bar-mode -1)
      (scroll-bar-mode -1)
      (unless (memq window-system '(mac ns))
        (menu-bar-mode -1))
      (setq inhibit-startup-screen t)
    #+END_SRC

** Dedicated directory for backup files
   XDG WHAT
   #+BEGIN_SRC emacs-lisp
     (defconst *backup-dir* (expand-file-name "emacs/backups" (xdg-data-home)))
     (setq backup-directory-alist (cons (cons "." *backup-dir*) nil))
   #+END_SRC
** Import Environment
   #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell
       :config
       (setq shell-file-name "/bin/zsh")
       (exec-path-from-shell-initialize)
       (exec-path-from-shell-copy-envs 
        '("LANG" "XDG_DATA_HOME" "XDG_DATA_DIRS" "XDG_CONFIG_HOME"
          "XDG_CONFIG_DIRS" "XDG_CACHE_HOME" "XDG_RUNTIME_DIR")))
   #+END_SRC
** TODO Secrets
* Preferences
** PragmataPro
   #+BEGIN_SRC emacs-lisp
     (set-default-font "PragmataPro-14")
   #+END_SRC
** Theme
   #+BEGIN_SRC emacs-lisp
     (use-package smyx-theme
       :config
       (load-theme 'smyx t)
       (set-face-attribute 'org-todo nil :box nil)
       (set-face-attribute 'org-done nil :box nil))
   #+END_SRC
** Code
   #+BEGIN_SRC emacs-lisp
   (show-paren-mode t)
   #+END_SRC
** Mode Line
*** Deploy fanciness
**** Spaceline
     #+BEGIN_SRC emacs-lisp
       (use-package spaceline-config
	 :ensure spaceline
	 :config (spaceline-spacemacs-theme))
     #+END_SRC
**** All The Icons!
     I'm not bothering to automate this now: On a new system, you gotta +M-x all-the-icons-install-fonts
     #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons)
     #+END_SRC
**** [[https://github.com/domtronn/spaceline-all-the-icons.el][domtronn/spaceline-all-the-icons.el: A Spaceline Mode Line theme using All The Icons for Emacs]]
     #+BEGIN_SRC emacs-lisp
       (use-package spaceline-all-the-icons
	 :after spaceline
	 :config
	 (setq spaceline-all-the-icons-separator-type 'arrow)
	 (spaceline-all-the-icons-theme)
	 (spaceline-all-the-icons--setup-paradox))
     #+END_SRC
* Helpers
** TRYING WS Butler
   This cleans up trailing whitespace only on line I edited. Briliant!
   #+BEGIN_SRC emacs-lisp
     (use-package ws-butler
       :config
       (add-hook 'ruby-mode-hook 'ws-butler-mode))
   #+END_SRC
** Better Zoom
   The =zoom-frm= package improves on =text-scale-adjust= by providing
   functions for changing size across all buffers.

   #+BEGIN_SRC emacs-lisp
     (use-package zoom-frm
       :ensure t
       :bind (("C-c C-+" . zoom-in/out)
              ("C-c C--" . zoom-in/out)
              ("C-c C-0" . zoom-in/out)
              ("C-c C-=" . zoom-in/out)))
   #+END_SRC
** Better packages ux
   #+BEGIN_SRC emacs-lisp
	  (use-package paradox
	    :bind
	    ("C-c p l" . paradox-list-packages)
	    :config
	    (add-hook 'paradox-menu-mode-hook 'hl-line-mode))
   #+END_SRC
** which-key: Cool cheat-sheet for bound keys
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :config (which-key-mode))
   #+END_SRC
* Magit
  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :bind ("\C-x g" . magit-status))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (use-package jordon-magit
      :ensure nil
      :after magit
      :load-path (lambda () (expand-file-name "lisp" user-emacs-directory))
      :commands 'jordon-magit-cleanup-this-hunk
      :bind (:map magit-status-mode-map ("C-c s d" . jordon-magit-cleanup-this-hunk))
      :defer t)
  #+END_SRC
* Org [0/2]
** TODO Figure out how to make org-end-of-line skip to after ... on second tap
** Bullets
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :config
       (setq org-bullets-bullet-list '("‣")))
   #+END_SRC
** Config
   The Org packaged with Emacs 25 (8.2.10) is broken...REALLY?
   #+BEGIN_SRC emacs-lisp
     (if (string-prefix-p "8" (org-version))
       (package-install 'org-plus-contrib))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package org
       :ensure org-plus-contrib
       :commands (org-agenda org-capture org-store-link)
       :bind (("C-c a" . org-agenda)
              ("C-c c" . org-capture)
              ("C-c l" . org-store-link)
              ("C-c g" . org-mac-grab-link))
       :config
       (setq org-cycle-global-at-bob t)
       (setq org-modules '(org-crypt org-id org-mac-link org-protocol))
       (setq org-use-speed-commands
             (lambda () (or (eq (point) 1)
                            (looking-at org-outline-regexp-bol))))
       (add-hook 'org-agenda-mode-hook 'hl-line-mode)
       (add-hook 'org-mode-hook 'org-bullets-mode))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package org-id)
     (use-package org-protocol)
     (use-package ob-sh)
   #+END_SRC
  
   Remind me what I should be doing.
  
   #+BEGIN_SRC emacs-lisp
       (defun jump-to-org-agenda ()
         (interactive)
         (let ((buf (get-buffer "*Org Agenda*"))
               wind)
           (if buf
               (if (setq wind (get-buffer-window buf))
                   (select-window wind)
                 (if (called-interactively-p)
                     (progn
                       (select-window (display-buffer buf t t))
                       (org-fit-window-to-buffer)
                       ;; (org-agenda-redo)
                       )
                   (with-selected-window (display-buffer buf)
                     (org-fit-window-to-buffer)
                     ;; (org-agenda-redo)
                     )))
             (call-interactively 'org-agenda-list))))
       (run-with-idle-timer 900 t 'jump-to-org-agenda)
   #+END_SRC


** TODO org-jira
   [[https://github.com/ahungry/org-jira]]
   #+BEGIN_SRC emacs-lisp

   #+END_SRC

* TODO Polymode
  #+BEGIN_SRC emacs-lisp
    (use-package poly-org
      :ensure polymode)
  #+END_SRC
* TODO Language Modes [0/4]
** TODO Ruby
   #+BEGIN_SRC emacs-lisp
     (use-package ruby-mode)
   #+END_SRC
** TODO Python
** TODO Groovy
** TODO Puppet
* Swiper
  #+BEGIN_SRC emacs-lisp
    (use-package flx)
    (use-package swiper
      :diminish t
      :bind
      ("C-s" . swiper)
      ("C-c C-r" . ivy-resume)
      ("C-7" . swiper-mc)
      :config
      (bind-key "<return>" 'ivy-alt-done ivy-minibuffer-map)
      (bind-key "<tab>" 'ivy-partial ivy-minibuffer-map)
      (setq ivy-height 20)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "(%d/%d) ")
      (setq ivy-display-style 'fancy)
      (setq magit-completing-read-function 'ivy-completing-read)
      (ivy-mode 1))

    (use-package ivy-hydra)
  #+END_SRC
* Context-specific
  #+BEGIN_SRC emacs-lisp
    (let* ((local-config-name (pcase system-name
                               ("steven.lan" "personal.org")
                               (_ "work.org")))
          (local-config (expand-file-name local-config-name user-emacs-directory)))
      (if (file-exists-p local-config)
          (org-babel-load-file local-config)))
  #+END_SRC
