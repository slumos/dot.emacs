# -*- mode: org; -*-
# Time-stamp: <2024-02-24 Sat 22:29 slumos@argenta>
#+DESCRIPTION: My nice =~/.config/emacs configuration.
#+KEYWORDS:  emacs org
#+LANGUAGE:  en
#+STARTUP: entitiespretty overview noindent
#+TODO: TODO(t) TRYING(r) BROKEN(t) SKIP(s) | DONE(d)
#+FILETAGS: :emacs:config:
#+CATEGORY: EMACS
#+PROPERTY: header-args :results silent

[[http://oremacs.com/lispy/][lispy.el function reference]]

* Introduction
I know, I'm supposed to only care about writing code and not
configuring editors.
** Philosophy
1. Emacs defaults except recent terrible changes. Looking at you
   (transient-mark-mode t)
2. The Emacs way is fine
   * custom hasn't been really hate-worthy for ages—oh, you hate
     custom? Now who cares more about writing code than configuring
     editors?
   * the new package system is just fine thanks.
3. I went to the trouble to acquire [[http://www.fsd.it/fonts/pragmatapro.htm][Pragmata Pro]]—because it's awesome,
   but more than that—because I like Unicode enough to buy a
   programming font with decent Unicode support. I'm hardly going to
   do that and then *not* use Unicode in my editor config.
* Basics
** Emacs Packages
For debugging
#+begin_src emacs-lisp
  (custom-set-variables
   '(package-archives
     '(("gnu"    .  "https://elpa.gnu.org/packages/")
       ("melpa"  .  "https://melpa.org/packages/")
       ("nongnu" . "https://elpa.nongnu.org/nongnu/")))
   '(package-archive-priorities
     '(("melpa"  .  50)
       ("gnu"    .  10)
       ("nongnu" . 10))))
  (package-initialize t)
#+end_src
*** =use-package=
John Wiegley is an Emacs badass. I am not even kidding.

#+begin_src emacs-lisp
  (if init-file-debug
      (setq use-package-verbose t
            use-package-expand-minimally nil
            use-package-compute-statistics t
            debug-on-error t)
    (setq use-package-verbose nil
          use-package-expand-minimally t))
#+end_src

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+end_src

#+begin_src emacs-lisp
  (require 'use-package)
  (setq use-package-always-defer nil)
  (setq use-package-always-ensure t)
  (setq use-package-compute-statistics t)
  (setq use-package-ignore-unknown-keywords t)
  (setq use-package-minimum-reported-time 0)
  (setq use-package-verbose t)
#+end_src

#+begin_src emacs-lisp
                                          ;  (unless (package-installed-p 'vc-use-package)
                                          ;    (package-install "https://github.com/slotThe/vc-use-package"))
                                          ;  (require 'vc-use-package)
#+end_src

Adds the =:quelpa= keyword for extra laziness when installing sutff outside
of package archives.
#+begin_src emacs-lisp
  (use-package quelpa :demand t)
  (use-package quelpa-use-package :demand t)
#+end_src
*** COMMENT straight - native comp temporarily disabled until
#+begin_src emacs-lisp
  (custom-set-variables '(straight-disable-native-compilation t))
#+end_src

#+begin_src emacs-lisp
  (setq comp-deferred-compilation-black-list '())

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

** TRYING [[https://github.com/conao3/leaf.el][conao3/leaf.el: Support your setting init.el like use-package]]
#+begin_src emacs-lisp
  (prog1 "prepare leaf"
    (prog1 "leaf"
      (unless (package-installed-p 'leaf)
        (unless (assoc 'leaf package-archive-contents)
          (package-refresh-contents))
        (condition-case err
            (package-install 'leaf)
          (error
           (package-refresh-contents)  ; renew local melpa cache if fail
           (package-install 'leaf))))

      ;; (leaf feather
      ;;    :el-get conao3
      ;;    :config (feather-mode))

      (leaf leaf-keywords
        :ensure t
        :config (leaf-keywords-init))

      (leaf leaf
        :custom ((leaf-defaults . '(:ensure t)))))

    (prog1 "optional packages for leaf-keywords"
      ;; optional packages if you want to use :hydra, :el-get,,,
      (leaf hydra :ensure t)
      (leaf el-get :ensure t
        :custom ((el-get-git-shallow-clone  . t)))))
#+end_src
*** Religion
**** Canon
Rollback sacrilege committed in recent years (decades...)

I use C-SPC C-SPC frequently to get transient mark and I'm fine
with that.

#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(indent-tabs-mode nil)
   '(transient-mark-mode nil))
#+END_SRC
**** Buckeys
#+BEGIN_SRC emacs-lisp
  (pcase window-system
    ('ns
     (setq mac-command-modifier 'meta) ; That's right.
     (setq mac-option-modifier 'super)
     (setq ns-function-modifier 'hyper)))
#+END_SRC
**** Noise. Make less.
The advent of the tool bar — or was it fringe? ugh... — was great
for me, because it was offensive enough to bother learning how to
turn it off.  Once I was in a turning off mode, I realized that
the only thing I actually used the scroll bar for is telling how
far into a buffer I was, and why should I even care about that?

There's no point to turning off the menu bar in OSX. Yay for Lion
Full Screen though!

#+BEGIN_SRC emacs-lisp
  (fringe-mode 0)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (unless (memq window-system '(mac ns))
    (menu-bar-mode -1))
  (setq inhibit-startup-screen t)
#+END_SRC
*** Import Environment
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :demand t
    :config
                                          ;(setq shell-file-name "/usr/local/bin/zsh")
    (setq exec-path-from-shell-arguments '("-l" "-i"))
    (setq exec-path-from-shell-check-startup-files nil)
    (exec-path-from-shell-initialize)
    (exec-path-from-shell-copy-envs
     '("AWS_CONFIG_FILE"
       "EMAIL"
       "LANG"
       "TMPDIR"
       "XDG_CACHE_HOME"
       "XDG_CONFIG_DIRS"
       "XDG_CONFIG_HOME"
       "XDG_DATA_DIRS"
       "XDG_DATA_HOME"
       "XDG_RUNTIME_DIR")))
#+END_SRC

XDG WHAT
#+BEGIN_SRC emacs-lisp
  (require 'xdg)
#+END_SRC
*** Dedicated directory for backup files
#+BEGIN_SRC emacs-lisp
  (defconst *backup-dir* (expand-file-name "emacs/backups" (xdg-data-home)))
  (setq backup-directory-alist (cons (cons "." *backup-dir*) nil))
#+END_SRC
*** Tuning
Who remembers Eight Megs And Constantly Swapping?
#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 100 1024 1024))
#+end_src

From [[https://emacs-lsp.github.io/lsp-mode/page/performance/][Performance - LSP Mode - LSP support for Emacs]]:
#+begin_src emacs-lisp
  (setq read-process-output-max (* 1024 1024))
#+end_src

*** Keys
#+begin_src emacs-lisp
  (global-set-key (kbd "<C-backspace>") #'delete-indentation)
#+end_src
**** TODO [[https://github.com/Kungsgeten/ryo-modal][Kungsgeten/ryo-modal: Roll your own modal mode]]
Compare to [[https://github.com/DogLooksGood/meow][DogLooksGood/meow: Modal Editing On Wheel]]
* Startup
** Daemon
#+begin_src emacs-lisp
  (custom-set-default 'server-socket-dir (expand-file-name "emacs" (xdg-runtime-dir)))
                                          ;(server-start)
#+end_src

** Handling of BROKEN/SKIP states (should not be tangled)
I just learned about COMMENT status (=C-c ;=) and decided to punt
on this for now while trying that instead.
** Initial buffers (=*scratch*=)
#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message nil)
  (setq inhibit-startup-screen t)
#+END_SRC
* Preferences
Deploy the fanciness.
** Utf-8
#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
#+END_SRC
** Fonts
*** PragmataPro
#+BEGIN_SRC emacs-lisp
  (set-frame-font "PragmataPro Mono Liga-17")
#+END_SRC

#+begin_src emacs-lisp
  (if (fboundp 'mac-auto-operator-composition-mode)
      (mac-auto-operator-composition-mode 1))
#+end_src

Copied from [[https://github.com/fabrizioschiavi/pragmatapro/blob/master/emacs_snippets/pragmatapro-char-menu-config-sample.el][pragmatapro/pragmatapro-char-menu-config-sample.el at master · fabrizioschiavi/pragmatapro]]
#+begin_src emacs-lisp
  ;;; Char menu allows you to enter unicode characters easily. It automatically
  ;;; chooses jump keys to select the glyph you would like to use. This can be a
  ;;; nice alternative to using and memorizing prettified symbols.

  (use-package char-menu
    :ensure t
    :bind ("M-p" . char-menu)
    :custom
    (char-menu '("—" "‘’" "“”" "…" "«»" "–"
                 ("Typography" "•" "©" "†" "‡" "°" "·" "§" "№" "★")
                 ("Mathematical Operators"
                  "∀" "∁" "∂" "∃" "∄" "∅" "∆" "∇" "∈" "∉" "∊" "∋" "∌" "∍" "∎" "∏"
                  "∐" "∑" "−" "∓" "∔" "∕" "∖" "∗" "∘" "∙" "√" "∛" "∜" "∝" "∞" "∟"
                  "∠" "∡" "∢" "∣" "∤" "∥" "∦" "∧" "∨" "∩" "∪" "∫" "∬" "∭" "∮" "∯"
                  "∰" "∱" "∲" "∳" "∴" "∵" "∶" "∷" "∸" "∹" "∺" "∻" "∼" "∽" "∾" "∿"
                  "≀" "≁" "≂" "≃" "≄" "≅" "≆" "≇" "≈" "≉" "≊" "≋" "≌" "≍" "≎" "≏"
                  "≐" "≑" "≒" "≓" "≔" "≕" "≖" "≗" "≘" "≙" "≚" "≛" "≜" "≝" "≞" "≟"
                  "≠" "≡" "≢" "≣" "≤" "≥" "≦" "≧" "≨" "≩" "≪" "≫" "≬" "≭" "≮" "≯"
                  "≰" "≱" "≲" "≳" "≴" "≵" "≶" "≷" "≸" "≹" "≺" "≻" "≼" "≽" "≾" "≿"
                  "⊀" "⊁" "⊂" "⊃" "⊄" "⊅" "⊆" "⊇" "⊈" "⊉" "⊊" "⊋" "⊌" "⊍" "⊎" "⊏"
                  "⊐" "⊑" "⊒" "⊓" "⊔" "⊕" "⊖" "⊗" "⊘" "⊙" "⊚" "⊛" "⊜" "⊝" "⊞" "⊟"
                  "⊠" "⊡" "⊢" "⊣" "⊤" "⊥" "⊦" "⊧" "⊨" "⊩" "⊪" "⊫" "⊬" "⊭" "⊮" "⊯"
                  "⊰" "⊱" "⊲" "⊳" "⊴" "⊵" "⊶" "⊷" "⊸" "⊹" "⊺" "⊻" "⊼" "⊽" "⊾" "⊿"
                  "⋀" "⋁" "⋂" "⋃" "⋄" "⋅" "⋆" "⋇" "⋈" "⋉" "⋊" "⋋" "⋌" "⋍" "⋎" "⋏"
                  "⋐" "⋑" "⋒" "⋓" "⋔" "⋕" "⋖" "⋗" "⋘" "⋙" "⋚" "⋛" "⋜" "⋝" "⋞" "⋟"
                  "⋠" "⋡" "⋢" "⋣" "⋤" "⋥" "⋦" "⋧" "⋨" "⋩" "⋪" "⋫" "⋬" "⋭" "⋮" "⋯"
                  "⋰" "⋱" "⋲" "⋳" "⋴" "⋵" "⋶" "⋷" "⋸" "⋹" "⋺" "⋻" "⋼" "⋽" "⋾" "⋿")
                 ("Superscripts & Subscripts"
                  "⁰" "ⁱ"   "⁴" "⁵" "⁶" "⁷" "⁸" "⁹" "⁺" "⁻" "⁼" "⁽" "⁾" "ⁿ"
                  "₀" "₁" "₂" "₃" "₄" "₅" "₆" "₇" "₈" "₉" "₊" "₋" "₌" "₍₎"
                  "ₐ" "ₑ" "ₒ" "ₓ" "ₔ" "ₕ" "ₖ" "ₗ" "ₘ" "ₙ" "ₚ" "ₛ" "ₜ")
                 ("Arrows"     "←" "→" "↑" "↓" "⇐" "⇒" "⇑" "⇓")
                 ("Greek"      "α" "β" "Y" "δ" "ε" "ζ" "η" "θ" "ι" "κ" "λ" "μ"
                  "ν" "ξ" "ο" "π" "ρ" "σ" "τ" "υ" "φ" "χ" "ψ" "ω")
                 ("Enclosed Alphanumerics"
                  "①" "②" "③" "④" "⑤" "⑥" "⑦" "⑧" "⑨" "Ⓐ" "Ⓑ" "Ⓒ" "Ⓓ" "Ⓔ" "Ⓕ" "Ⓖ"
                  "Ⓗ" "Ⓘ" "Ⓙ" "Ⓚ" "Ⓛ" "Ⓜ" "Ⓝ" "Ⓞ" "Ⓟ" "Ⓠ" "Ⓡ" "Ⓢ" "Ⓣ" "Ⓤ" "Ⓥ" "Ⓦ"
                  "Ⓧ" "Ⓨ" "Ⓩ" "ⓐ" "ⓑ" "ⓒ" "ⓓ" "ⓔ" "ⓕ" "ⓖ" "ⓗ" "ⓘ" "ⓙ" "ⓚ" "ⓛ" "ⓜ"
                  "ⓝ" "ⓞ" "ⓟ" "ⓠ" "ⓡ" "ⓢ" "ⓣ" "ⓤ" "ⓥ" "ⓦ" "ⓧ" "ⓨ" "ⓩ" "⓪")
                 ("Annotations"
                  "      " "      " "     " "     " "        " "    " "      " "      "
                  "      " "     " "    " "     " "     " "     "))))
#+end_src

*** Ligatures
**** ligature-mode
[[https://github.com/mickeynp/ligature.el/issues/8][Adding support for additional fonts · Issue #8 · mickeynp/ligature.el]]

#+begin_src emacs-lisp
  (use-package ligature
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in text-modes
    (ligature-set-ligatures '(org-mode text-mode) '("ff" "fi" "ffi"))
    ;; Enable all Cascadia Code ligatures in programming modes
    (ligature-set-ligatures 'prog-mode
                            '("[ERROR]" "[DEBUG]" "[INFO]" "[WARN]" "[WARNING]"
                              "[ERR]" "[FATAL]" "[TRACE]" "[FIXME]" "[TODO]"
                              "[BUG]" "[NOTE]" "[HACK]" "[MARK]"
                              "# ERROR" "# DEBUG" "# INFO" "# WARN" "# WARNING"
                              "# ERR" "# FATAL" "# TRACE" "# FIXME" "# TODO"
                              "# BUG" "# NOTE" "# HACK" "# MARK"
                              "// ERROR" "// DEBUG" "// INFO" "// WARN" "// WARNING"
                              "// ERR" "// FATAL" "// TRACE" "// FIXME" "// TODO"
                              "// BUG" "// NOTE" "// HACK" "// MARK"
                              "!!" "!=" "!==" "!!!" "!≡" "!≡≡" "!>" "!=<" "#("
                              "#_" "#{" "#?" "#>" "##" "#_(" "%=" "%>" "%>%" "%<%"
                              "&%" "&&" "&*" "&+" "&-" "&/" "&=" "&&&" "&>" "$>"
                              "***" "*=" "*/" "*>" "++" "+++" "+=" "+>" "++=" "--"
                              "-<" "-<<" "-=" "->" "->>" "---" "-->" "-+-" "-\\/"
                              "-|>" "-<|" ".." "..." "..<" ".>" ".~" ".=" "/*" "//"
                              "/>" "/=" "/==" "///" "/**" ":::" "::" ":=" ":≡" ":>"
                              ":=>" ":(" ":-(" ":)" ":-)" ":/" ":\\" ":3" ":D" ":P"
                              ":>:" ":<:" "<$>" "<*" "<*>" "<+>" "<-" "<<" "<<<" "<<="
                              "<=" "<=>" "<>" "<|>" "<<-" "<|" "<=<" "<~" "<~~" "<<~"
                              "<$" "<+" "<!>" "<@>" "<#>" "<%>" "<^>" "<&>" "<?>" "<.>"
                              "</>" "<\\>" "<\">" "<:>" "<~>" "<**>" "<<^" "<!" "<@"
                              "<#" "<%" "<^" "<&" "<?" "<." "</" "<\\" "<\"" "<:" "<->"
                              "<!--" "<--" "<~<" "<==>" "<|-" "<<|" "<-<" "<-->" "<<=="
                              "<==" "=<<" "==" "===" "==>" "=>" "=~" "=>>" "=/=" "=~="
                              "==>>" "≡≡" "≡≡≡" "≡:≡" ">-" ">=" ">>" ">>-" ">>=" ">>>"
                              ">=>" ">>^" ">>|" ">!=" ">->" "??" "?~" "?=" "?>" "???"
                              "?." "^=" "^." "^?" "^.." "^<<" "^>>" "^>" "\\\\" "\\>"
                              "\\/-" "@>" "|=" "||" "|>" "|||" "|+|" "|->" "|-->" "|=>"
                              "|==>" "|>-" "|<<" "||>" "|>>" "|-" "||-" "~=" "~>" "~~>"
                              "~>>" "[[" "]]" "\">" "_|_"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))
#+end_src

**** ligature test
#+begin_src text
  ffi
  ff
  [ERROR]
  [INFO ]
#+end_src

#+begin_src ruby
  # TODO
  lambda {}
  x => 0
#+end_src

#+begin_src c
  // TODO
  // ERROR
#+end_src

*** COMMENT prettify-symbols setup
Copied from https://github.com/fabrizioschiavi/pragmatapro/blob/master/emacs_snippets/pragmatapro-prettify-symbols-v0.829.el
#+begin_src emacs-lisp
  (setq prettify-symbols-unprettify-at-point 'right-edge)

  (defconst pragmatapro-prettify-symbols-alist
    (mapcar (lambda (s)
              `(,(car s)
                .
                ,(vconcat
                  (apply 'vconcat
                         (make-list
                          (- (length (car s)) 1)
                          (vector (decode-char 'ucs #X0020) '(Br . Bl))))
                  (vector (decode-char 'ucs (cadr s))))))
            '(("[INFO ]"    #XE280)
              ("[WARN ]"    #XE281)
              ("[PASS ]"    #XE282)
              ("[VERBOSE]"  #XE283)
              ("[KO]"       #XE284)
              ("[OK]"       #XE285)
              ("[PASS]"     #XE286)
              ("[ERROR]"    #XE2C0)
              ("[DEBUG]"    #XE2C1)
              ("[INFO]"     #XE2C2)
              ("[WARN]"     #XE2C3)
              ("[WARNING]"  #XE2C4)
              ("[ERR]"      #XE2C5)
              ("[FATAL]"    #XE2C6)
              ("[TRACE]"    #XE2C7)
              ("[FIXME]"    #XE2C8)
              ("[TODO]"     #XE2C9)
              ("[BUG]"      #XE2CA)
              ("[NOTE]"     #XE2CB)
              ("[HACK]"     #XE2CC)
              ("[MARK]"     #XE2CD)
              ("[FAIL]"     #XE2CE)
              ("# ERROR"    #XE2F0)
              ("# DEBUG"    #XE2F1)
              ("# INFO"     #XE2F2)
              ("# WARN"     #XE2F3)
              ("# WARNING"  #XE2F4)
              ("# ERR"      #XE2F5)
              ("# FATAL"    #XE2F6)
              ("# TRACE"    #XE2F7)
              ("# FIXME"    #XE2F8)
              ("# TODO"     #XE2F9)
              ("# BUG"      #XE2FA)
              ("# NOTE"     #XE2FB)
              ("# HACK"     #XE2FC)
              ("# MARK"     #XE2FD)
              ("# FAIL"     #XE2FE)
              ("// ERROR"   #XE2E0)
              ("// DEBUG"   #XE2E1)
              ("// INFO"    #XE2E2)
              ("// WARN"    #XE2E3)
              ("// WARNING" #XE2E4)
              ("// ERR"     #XE2E5)
              ("// FATAL"   #XE2E6)
              ("// TRACE"   #XE2E7)
              ("// FIXME"   #XE2E8)
              ("// TODO"    #XE2E9)
              ("// BUG"     #XE2EA)
              ("// NOTE"    #XE2EB)
              ("// HACK"    #XE2EC)
              ("// MARK"    #XE2ED)
              ("// FAIL"    #XE2EE)
              ("!="         #XE900)
              ("!=="        #XE901)
              ("!=="        #XE902)
              ("!≡"         #XE903)
              ("!≡≡"        #XE904)
              ("#("         #XE90C)
              ("#_"         #XE90D)
              ("#{"         #XE90E)
              ("#?"         #XE90F)
              ("##"         #XE910)
              ("#_("        #XE911)
              ("#["         #XE912)
              ("%="         #XE920)
              ("&%"         #XE92C)
              ("&&"         #XE92D)
              ("&+"         #XE92E)
              ("&-"         #XE92F)
              ("&/"         #XE930)
              ("&="         #XE931)
              ("&&&"        #XE932)
              ("$>"         #XE93A)
              ("(|"         #XE940)
              ("*>"         #XE946)
              ("++"         #XE94C)
              ("+++"        #XE94D)
              ("+="         #XE94E)
              ("+>"         #XE94F)
              ("++="        #XE950)
              ("--"         #XE960)
              ("-<"         #XE961)
              ("-<<"        #XE962)
              ("-="         #XE963)
              ("->"         #XE964)
              ("->>"        #XE965)
              ("---"        #XE966)
              ("-->"        #XE967)
              ("-+-"        #XE968)
              ("-\\/"        #XE969)
              ("-|>"        #XE96A)
              ("-<|"        #XE96B)
              ("->-"        #XE96C)
              ("-<-"        #XE96D)
              ("-|"         #XE96E)
              ("-||"        #XE96F)
              ("-|:"        #XE970)
              (".="         #XE979)
              ("//="        #XE994)
              ("/="         #XE995)
              ("/=="        #XE996)
              ("/-\\"       #XE997)
              ("/-:"        #XE998)
              ("/->"        #XE999)
              ("/=>"        #XE99A)
              ("/-<"        #XE99B)
              ("/=<"        #XE99C)
              ("/=:"        #XE99D)
              (":="         #XE9AC)
              (":≡"         #XE9AD)
              (":=>"        #XE9AE)
              (":-\\"       #XE9AF)
              (":=\\"       #XE980)
              (":-/"        #XE981)
              (":=/"        #XE982)
              (":-|"        #XE983)
              (":=|"        #XE984)
              (":|-"        #XE985)
              (":|="        #XE986)
              ("<$>"        #XE9C0)
              ("<*"         #XE9C1)
              ("<*>"        #XE9C2)
              ("<+>"        #XE9C3)
              ("<-"         #XE9C4)
              ("<<="        #XE9C5)
              ("<=>"        #XE9C7)
              ("<>"         #XE9C8)
              ("<|>"        #XE9C9)
              ("<<-"        #XE9CA)
              ("<|"         #XE9CB)
              ("<=<"        #XE9CC)
              ("<~"         #XE9CD)
              ("<~~"        #XE9CE)
              ("<<~"        #XE9CF)
              ("<$"         #XE9D0)
              ("<+"         #XE9D1)
              ("<!>"        #XE9D2)
              ("<@>"        #XE9D3)
              ("<#>"        #XE9D4)
              ("<%>"        #XE9D5)
              ("<^>"        #XE9D6)
              ("<&>"        #XE9D7)
              ("<?>"        #XE9D8)
              ("<.>"        #XE9D9)
              ("</>"        #XE9DA)
              ("<\\>"       #XE9DB)
              ("<\">"       #XE9DC)
              ("<:>"        #XE9DD)
              ("<~>"        #XE9DE)
              ("<**>"       #XE9DF)
              ("<<^"        #XE9E0)
              ("<="         #XE9E1)
              ("<->"        #XE9E2)
              ("<!--"       #XE9E3)
              ("<--"        #XE9E4)
              ("<~<"        #XE9E5)
              ("<==>"       #XE9E6)
              ("<|-"        #XE9E7)
              ("<||"        #XE9E8)
              ("<<|"        #XE9E9)
              ("<-<"        #XE9EA)
              ("<-->"       #XE9EB)
              ("<<=="       #XE9EC)
              ("<=="        #XE9ED)
              ("<-\\"        #XE9EE)
              ("<-/"        #XE9EF)
              ("<=\\"        #XE9F0)
              ("<=/"        #XE9F1)
              ("=<<"        #XEA00)
              ("=="         #XEA01)
              ("==="        #XEA02)
              ("==>"        #XEA03)
              ("=>"         #XEA04)
              ("=~"         #XEA05)
              ("=>>"        #XEA06)
              ("=~="        #XEA07)
              ("==>>"       #XEA08)
              ("=>="        #XEA09)
              ("=<="        #XEA0A)
              ("=<"         #XEA0B)
              ("==<"        #XEA0C)
              ("=<|"        #XEA0D)
              ("=/="        #XEA0F)
              ("=/<"        #XEA10)
              ("=|"         #XEA11)
              ("=||"        #XEA12)
              ("=|:"        #XEA13)
              (">-"         #XEA20)
              (">>-"        #XEA22)
              (">>="        #XEA23)
              (">=>"        #XEA24)
              (">>^"        #XEA25)
              (">>|"        #XEA26)
              (">!="        #XEA27)
              (">->"        #XEA28)
              (">=="        #XEA29)
              (">="         #XEA2A)
              (">/="        #XEA2B)
              (">-|"        #XEA2C)
              (">=|"        #XEA2D)
              (">-\\"        #XEA2E)
              (">=\\"        #XEA2F)
              (">-/"        #XEA30)
              (">=/"        #XEA31)
              (">λ="        #XEA32)
              ("?."         #XEA3F)
              ("^="         #XEA43)
              ("^<<"        #XEA48)
              ("^>>"        #XEA49)
              ("\\="         #XEA54)
              ("\\=="        #XEA55)
              ("\\/="        #XEA56)
              ("\\-/"        #XEA57)
              ("\\-:"        #XEA58)
              ("\\->"        #XEA59)
              ("\\=>"        #XEA5A)
              ("\\-<"        #XEA5B)
              ("\\=<"        #XEA5C)
              ("\\=:"        #XEA5D)
              ("|="         #XEA69)
              ("|>="        #XEA6A)
              ("|>"         #XEA6B)
              ("|+|"        #XEA6C)
              ("|->"        #XEA6D)
              ("|-->"       #XEA6E)
              ("|=>"        #XEA6F)
              ("|==>"       #XEA70)
              ("|>-"        #XEA71)
              ("|<<"        #XEA72)
              ("||>"        #XEA73)
              ("|>>"        #XEA74)
              ("|-"         #XEA75)
              ("||-"        #XEA76)
              ("||="        #XEA77)
              ("|)"         #XEA78)
              ("|]"         #XEA79)
              ("|-:"        #XEA7A)
              ("|=:"        #XEA7B)
              ("|-<"        #XEA7C)
              ("|=<"        #XEA7D)
              ("|--<"       #XEA7E)
              ("|==<"       #XEA7F)
              ("~="         #XEA8A)
              ("~>"         #XEA8B)
              ("~~>"        #XEA8C)
              ("~>>"        #XEA8D)
              ("[["         #XEA8F)
              ("[|"         #XEA90)
              ("_|_"        #XEA97)
              ("]]"         #XEAA0)
              ("≡≡"         #XEAB3)
              ("≡≡≡"        #XEAB4)
              ("≡:≡"        #XEAB5)
              ("≡/"         #XEAB6)
              ("≡/≡"        #XEAB7)
              )))

  (defun add-pragmatapro-prettify-symbols-alist ()
    (setq prettify-symbols-alist pragmatapro-prettify-symbols-alist))

  ;; enable prettified symbols on comments
  (defun setup-compose-predicate ()
    (setq prettify-symbols-compose-predicate
          (defun my-prettify-symbols-default-compose-p (start end _match)
            "Same as `prettify-symbols-default-compose-p', except compose symbols in comments as well."
            (let* ((syntaxes-beg (if (memq (char-syntax (char-after start)) '(?w ?_))
                                     '(?w ?_) '(?. ?\\)))
                   (syntaxes-end (if (memq (char-syntax (char-before end)) '(?w ?_))
                                     '(?w ?_) '(?. ?\\))))
              (not (or (memq (char-syntax (or (char-before start) ?\s)) syntaxes-beg)
                       (memq (char-syntax (or (char-after end) ?\s)) syntaxes-end)
                       (nth 3 (syntax-ppss))))))))

  ;; main hook fn, just add to text-mode/prog-mode
  (defun prettify-hook ()
    (add-pragmatapro-prettify-symbols-alist)
    (setup-compose-predicate))
#+end_src
*** Emoji 😂
#+begin_src emacs-lisp
  (if (version< "27.0" emacs-version)
      (set-fontset-font
       "fontset-default" 'unicode "Apple Color Emoji" nil 'prepend)
    (set-fontset-font
     t 'symbol (font-spec :family "Apple Color Emoji") nil 'prepend))
#+end_src
*** COMMENT [[https://www.nerdfonts.com/cheat-sheet][Nerd Fonts]]
#+begin_src emacs-lisp
  (use-package nerd-fonts
    :straight (nerd-fonts :type git :host github :repo "twlz0ne/nerd-fonts.el"))
#+end_src
** Themes
*** [[https://github.com/cryon/almost-mono-themes][cryon/almost-mono-themes: Almost monochromatic themes for emacs in a few variants]]
#+begin_src emacs-lisp
  (use-package almost-mono-themes)
#+end_src

*** [[https://protesilaos.com/emacs/ef-themes][Ef (εὖ) themes for GNU Emacs | Protesilaos Stavrou]]
#+begin_src emacs-lisp
  (use-package ef-themes
    :init
    (setq
     ;; headings
     ef-themes-headings '((0 . (1.2 variable-pitch grayscale light regular))
                          (1 . (1.1 variable-pitch rainbow light))
                          (t . (variable-pitch rainbow regular)))

     ;; org
     ef-themes-org-agenda '((header-block . (variable-pitch scale-title))
                            (header-date . (grayscale bold-today)))
     ef-themes-org-blocks 'gray-background

     ;; text
     ef-themes-bold-constructs t
     ef-themes-italic-constructs t
     ef-themes-slanted-constructs t

     ;; other
     ef-themes-hl-line '(accented)
     ef-themes-lang-checkers '(straight-underline faint)
     ef-themes-mode-line '(accented borderless)
     ef-themes-paren-match '(subtle-bold)
     ef-themes-syntax '(faint alt-syntax)
     ef-themes-variable-pitch-ui t))
#+end_src
*** gruvbox
#+begin_src emacs-lisp
  (use-package gruvbox-theme :defer t)
#+end_src

*** [[https://protesilaos.com/emacs/modus-themes][Modus Themes (Modus Operandi and Modus Vivendi) | Protesilaos Stavrou]]
#+begin_src emacs-lisp
  (use-package modus-themes
    :init
    (setq
     ;; headings
     ;; modus-themes-headings '((1 . (1.2 variable-pitch monochrome regular))
     ;;                         (2 . (1.1 variable-pitch rainbow regular))
     ;;                         (t . (variable-pitch rainbow regular)))

     ;; org
     modus-themes-org-agenda '((header-block . (variable-pitch scale-title))
                               (header-date . (grayscale bold-today)))
     modus-themes-org-blocks 'gray-background

     ;; text
     modus-themes-bold-constructs t
     modus-themes-italic-constructs t
     modus-themes-slanted-constructs t

     ;; other
     modus-themes-hl-line '(accented)
     modus-themes-lang-checkers '(straight-underline faint)
     modus-themes-mode-line '(accented borderless)
     modus-themes-syntax '(faint alt-syntax)
     modus-themes-variable-pitch-ui t

     modus-themes-common-palette-overrides '((bg-mode-line-active bg-blue-nuanced)
                                             (prose-todo red)))

    (defun slumos-modus-themes-custom-faces ()
      (modus-themes-with-colors
        (set-face-attribute 'org-ellipsis nil :foreground fg-heading-8 :height 0.6)))

    :config
    (add-hook 'modus-themes-after-load-theme-hook #'slumos-modus-themes-custom-faces)
    (modus-themes-load-theme 'modus-operandi-tinted))
#+end_src

*** nordless
#+BEGIN_SRC emacs-lisp
  (use-package nordless-theme :defer t)
#+END_SRC

*** parchment
#+begin_src emacs-lisp
  (use-package parchment-theme :defer t)
#+end_src
*** symx
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package smyx-theme
    :defer t
    :config
    (set-face-attribute 'org-todo nil :box nil)
    (set-face-attribute 'org-done nil :box nil))
#+END_SRC
*** tao-yin
#+begin_src emacs-lisp
  (use-package tao-theme :defer t)
#+end_src

*** Dark/light switching on macOS
#+begin_src emacs-lisp
  (defun slumos/handle-appearance-change (appearance)
    (pcase appearance
      ('light (modus-themes-load-theme 'modus-operandi-tinted))
      ('dark (modus-themes-load-theme 'modus-vivendi-tinted))))
  (add-hook 'ns-system-appearance-change-functions #'slumos/handle-appearance-change)
#+end_src

** Code
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
#+END_SRC
** Mode Line
*** Clock
#+begin_src emacs-lisp
  (display-time)
#+end_src

*** Filenames
#+begin_src emacs-lisp
  (custom-set-variables '(find-file-visit-truename t))
#+end_src
*** COMMENT Doom Mode Line
#+begin_src emacs-lisp
  (use-package doom-modeline
    :hook
    (after-init . doom-modeline-mode)
    :custom
    (doom-modeline-bar-width 8)
    (doom-modeline-buffer-file-name-style 'truncate-nil)
    (doom-modeline-enable-word-count t)
    (doom-modeline-env-version t)
    (doom-modeline-hud t)
    (doom-modeline-icon t "Use all-the-icons")
    (doom-modeline-vcs-max-length 25) ; feature_slumos_W123456789_something
                                          ;(doom-modeline-buffer-file-name-style 'file-name) ;; if TRAMP is super-slow
    )
#+end_src
** TODO COMMENT [[https://github.com/slumos/nano-emacs][NΛNO]]
#+begin_src emacs-lisp
  ;; Path to nano emacs modules (mandatory)
  (add-to-list 'load-path "~/Projects/nano-emacs")
  (add-to-list 'load-path ".")

  ;; Window layout (optional)
  (require 'nano-layout)

  ;; Theming Command line options (this will cancel warning messages)
  (add-to-list 'command-switch-alist '("-dark"   . (lambda (args))))
  (add-to-list 'command-switch-alist '("-light"  . (lambda (args))))
  (add-to-list 'command-switch-alist '("-default"  . (lambda (args))))

  (cond
   ((member "-default" command-line-args) t)
   ((member "-dark" command-line-args) (require 'nano-theme-dark))
   (t (require 'nano-theme-light)))

  ;; Theme
  (require 'nano-faces)
  (nano-faces)

  (require 'nano-theme)
  (nano-theme)

  ;; Nano default settings (optional)
  (require 'nano-defaults)

  ;; Nano header & mode lines (optional)
  (require 'nano-modeline)
#+end_src
* Magit
[[https://magit.vc/][It's Magit! A Git Porcelain inside Emacs]]

Magit—like Org—is a total killer app and probably one of the reasons
Emacs had a revival in the recent(ish) years.

Just like [[http://mh-e.sourceforge.net/][MH-E]] back in the day, it's not about avoiding the CLI,
it's about heads-up display of the important stuff and driving the
CLI with single keystrokes.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind
    ("\C-x g" . magit-status)
    :custom
    (magit-file-mode t)
    (magit-clone-default-directory "~/Projects/")
    (magit-repository-directories
     '(("~/Projects" . 1)
       ("~/Projects/iac" . 1)
       ("~/Projects/puppet" . 1)))
    (transient-default-level 5)
    (auto-revert-verbose t))
#+END_SRC

#+begin_src emacs-lisp
  (use-package forge
    :after magit
    :custom
    (forge-topic-list-limit '(60 . 0)))
#+end_src
** TODO Look at https://github.com/arthurcgusmao/acg-emacs/commit/2257058e424b82e1d670cadf2e870f0a6a37d669
** Originally based on [[https://gist.github.com/dotemacs/9a0433341e75e01461c9][this gist]]:
#+begin_src emacs-lisp
  (defun slumos/parse-git-repo-url (url)
    "convert a git remote location as a HTTP URL"
    (if (string-match "^http" url)
        url
      (replace-regexp-in-string "\\(.*\\)@\\(.*\\):\\(.*\\)\\(\\.git\\)?"
                                "https://\\2/\\3"
                                url)))

  (defun slumos/magit-open-repo ()
    "open remote repo URL"
    (interactive)
    (let ((url (magit-get "remote" "origin" "url")))
      (progn
        (browse-url (slumos/parse-git-repo-url url))
        (message "opening repo %s" url))))

  (add-hook 'magit-mode-hook
            (lambda ()
              (local-set-key (kbd "o") #'slumos/magit-open-repo)))
  #+end_src

  Inspired by [[https://emacs.stackexchange.com/questions/30487/add-copy-to-kill-ring-current-branch-name-with-magit][Add (copy) to kill ring current branch name with Magit - Emacs Stack Exchange]]
  #+begin_src emacs-lisp
    (defun slumos/magit-copy-buffer-current-branch ()
      "Copy current branch name to clipboard"
      (interactive)
      (let ((branch (magit-get-current-branch)))
        (if branch
            (progn (kill-new branch)
                   (message "%s" branch))
          (user-error "There is not current branch"))))
  #+end_src
** COMMENT Experimental
  #+begin_src emacs-lisp :results replace
    (defun slumos/parse-github-repo-url (url)
      "return a hash of the components of a git repo url (naive)"
      (let ((components (make-hash-table)))
        (string-match "\\(.*\\)@\\(.*\\):\\(.*\\)/\\(.*?\\)\\(.git\\|$\\)" url)
        (puthash 'user (match-string 1 url) components)
        (puthash 'host (match-string 2 url) components)
        (puthash 'org  (match-string 3 url) components)
        (puthash 'repo (match-string 4 url) components)
        components))

    ;; (with-current-buffer "magit: quizlet"
    ;;   (slumos/parse-github-repo-url (magit-get "remote" "origin" "url")))
  #+end_src

  #+RESULTS:
  : slumos/parse-github-repo-url

#+begin_src emacs-lisp
  (defun slumos/magit-context ()
    (let ((context (make-hash-table)))
      (puthash 'branch (magit-get-current-branch))
    )
#+end_src

  
  #+begin_src emacs-lisp
  (defun slumos/magit-browse-repo ()
    (interactive)
    (let* ((git-url (magit-get "remote" "origin" "url"))
           (parsed (slumos/parse-github-repo-url git-url))
           (gh-url (format "https://%s/%s/%s"
                           (gethash 'host parsed)
                           (gethash 'org parsed)
                           (gethash 'repo parsed))))
      (browse-url gh-url)))
  #+end_src

  #+begin_src emacs-lisp
    (require 'transient)

    (defun slumos/magit-browse-tbd ()
      (interactive)
      (message "magit command tbd %s" (current-time-string)))

    (transient-define-prefix slumos/magit-open-transient ()
                             "Open related URLs"
                             [["Browse"
                               ("g" "GitHub" slumos/magit-browse-repo)
                               ("c" "CircleCI" slumos/magit-browse-tbd)]])

    (define-key magit-status-mode-map "C-c o" #'slumos/magit-open-transient)

    (with-current-buffer "magit: .emacs.d"
      (slumos/magit-open-transient))
#+end_src
** Initialization
* Org                                                                   :org:
#+begin_src emacs-lisp
  (setq *slumos-org-notes-directory* (expand-file-name "~/Sync/ST/Notes"))
#+end_src


   #+BEGIN_SRC emacs-lisp :noweb yes :results value silent
     (use-package org
       :commands (org-agenda org-capture org-store-link)
       :bind
       <<org-binds>>
       :config
       <<org-config>>)
   #+END_SRC
** Binds
   :PROPERTIES:
   :header-args: :noweb-ref org-binds :tangle no
   :END:
   Pretty basic stuff here.
   #+BEGIN_SRC emacs-lisp
     (("C-c a" . org-agenda)
      ("C-c c" . org-capture)
      ("C-c l" . org-store-link)
      ("C-c g" . org-mac-link-get-link))
   #+END_SRC
** Config
   :PROPERTIES:
   :header-args: :noweb-ref org-config :tangle no :results silent
   :END:
   #+begin_src emacs-lisp
          (custom-set-variables
           '(org-catch-invisible-edits 'error)
           '(org-cycle-include-plain-lists 'integrate)
           '(org-fontify-whole-heading-line t))
   #+end_src

   Regular ellipsis drives me insane because I tend to end regular
   lines that way all the time ... (see?)

   Good choices: =⬎= =[+]= = =

   #+BEGIN_SRC emacs-lisp
     (custom-set-variables
      '(org-ellipsis " "))

     (set-face-attribute 'org-ellipsis nil
                         :inherit '(comment)
                         :height 0.6)
   #+END_SRC

   My muscle memory is completely stuck on =M-< TAB=. This just
   enables what I'm pretty sure was a default in some distant past.

   #+BEGIN_SRC emacs-lisp
   (setq org-cycle-global-at-bob t)
   #+END_SRC

   These settings fix refile completion with [[*Counsel / Ivy / Swiper][Counsel]]:

   #+BEGIN_SRC emacs-lisp
        (defun slumos-org-refile-files ()
          (let ((case-fold-search nil))
            (directory-files *slumos-org-notes-directory* t "^[[:upper:]][[:alpha:]]*.org$")))

        (setq org-refile-use-outline-path 'file
                   org-outline-path-complete-in-steps nil
                   org-refile-targets '((slumos-org-refile-files :maxlevel . 2)))
   #+END_SRC

   That's why I also like to enable speed commands when point is at
   beginning-of-buffer. This means that immediately after opening an
   org file, you can jump to the first heading just by tapping =n=.

   #+BEGIN_SRC emacs-lisp
     (setq org-use-speed-commands
           (lambda () (or
                  (eq (point) 1)
                  ;; (looking-at org-outline-regexp-bol)
                  (and (looking-at org-outline-regexp) (looking-back "^\\**")))))
   #+END_SRC

   Set up some modules by default. I use =org-id= for capture targets,
   =org-mac-link= *all* the damn time, and =ob-shell= for
   some—ahem—"literate" DevOps. More like notebook DevOps in practice,
   but still awesome.

   #+BEGIN_SRC emacs-lisp
   (setq org-modules '(org-id org-mac-link org-protocol ob-shell))
   (org-load-modules-maybe t)
   #+END_SRC

   I don't use =hl-line-mode= often, but when I do, it's in buffers
   that are lists of things.

   #+BEGIN_SRC emacs-lisp
   (add-hook 'org-agenda-mode-hook #'hl-line-mode)
   #+END_SRC

   #+BEGIN_QUOTE
   After saving, also commit to a worktree work-in-progress ref.

   After saving the current file-visiting buffer this mode also
   commits the changes to the worktree work-in-progress ref for
   the current branch.
   #+END_QUOTE

   How awesome does that sound? To call back all your saves is just
   =M-x magit-wip-log-current=.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook (lambda ()
				(magit-wip-after-save-mode t)
				(magit-wip-after-apply-mode t)
				(magit-wip-before-change-mode t)))
   #+END_SRC

**** COMMENT [[https://github.com/enisozgen/idle-org-agenda][enisozgen/idle-org-agenda: A package that shows your agenda when Emacs is idle]]
   #+begin_src emacs-lisp
   (use-package idle-org-agenda
     :after org-agenda
     :config (idle-org-agenda-mode))
   #+end_src
**** Time stamp
   Decided to add a save timestamp to help me tell that whatever I'm
   editing is up to date with other copies.
   #+BEGIN_SRC emacs-lisp
     (add-hook 'before-save-hook 'time-stamp)
   #+END_SRC

   I think this will make my oncall-shift snippet work better.
   #+begin_src emacs-lisp
     (add-hook 'org-mode-hook
               (lambda () (setq-local yas-indent-line 'fixed)))
   #+end_src
**** Exporting
   #+BEGIN_SRC emacs-lisp
   ;(use-package ox-confluence :after org)
   (use-package ox-clip :after org)
   (use-package ox-gfm :after org)
   (use-package ox-jira :after org)
   (use-package ox-pandoc :after org)
   #+END_SRC
*** COMMENT My crazy numbered paragraphs idea
    #+begin_src emacs-lisp
      (defun numbered-paragraphs-headline (headline contents info)
        "Transcode HEADLINE as a plain numbered paragraph. CONTENTS is
      headline contents. INFO is plist used as a communication
      channel."
        (let* ((level (org-export-get-relative-level headline info))
               (num (org-export-get-headline-number)))
          (concat headline contents)))
    #+end_src
*** TODO Check out [[https://github.com/yejianye/toolbox/blob/bd08a355dbc6804aa507c29a60053837eaa2e99c/emacs/funcs.el#L49][toolbox/funcs.el at bd08a355dbc6804aa507c29a60053837eaa2e99c · yejianye/toolbox]]
** Fanciness
*** [[https://github.com/minad/org-modern][minad/org-modern: Modern Org Style]]
#+begin_src emacs-lisp
  (use-package org-modern
    :custom
    (org-modern-star ["◉""○""◈""◇""—"])
    ;; :hook
    ;; (org-mode . org-modern-mode)
    ;; (org-agenda-finalize . org-modern-agenda)
    :config
    (setq org-modern-table-vertical 1)
    (setq org-modern-table-horizontal 1))
#+end_src
*** COMMENT [[https://github.com/jdtsmith/org-modern-indent/][jdtsmith/org-modern-indent: org-modern and org-indent, working together]]
#+begin_src emacs-lisp
  ; https://github.com/jdtsmith/org-modern-indent.git
  (use-package org-modern-indent
    :straight (:type git :host github :repo "jdtsmith/org-modern-indent" :branch "main")
    :hook (org-mode . org-modern-indent-mode))
#+end_src

** Agenda

   #+begin_src emacs-lisp :tangle no
     (setq org-agenda-custom-commands
           '(("ca" "Daily Agenda View"
              ((org-ql-block '(and (path "DMP")
                                   (todo "BLOCKED" "START" "WORK"))
                             ((org-ql-block-header "Progress")))
               (org-ql-block '(and (path "DMP") (planning :from -1 :to 7))
                             ((org-ql-block-headher "Plan")))
               (agenda)))))
   #+end_src

** Additions
*** TODO [[https://github.com/emacsattic/org-doing][emacsattic/org-doing]]
*** COMMENT [[https://github.com/Chobbes/org-chef][Chobbes/org-chef: A package for making a cookbook and managing recipes with org-mode.]]
    #+begin_src emacs-lisp
      (use-package org-chef)
    #+end_src

    #+begin_src emacs-lisp
      (add-to-list 'org-capture-templates
                   '(("c" "Cookbook" entry (file "~/Sync/Notes/Cookbook.org")
                      "%(org-chef-get-recipe-from-url)"
                      :empty-lines 1)
                     ("m" "Manual Cookbook" entry (file "~/Sync/Notes/Cookbook.org")
                      "* %^{Recipe title: }\n  :PROPERTIES:\n  :source-url:\n  :prep-time:\n  :cook-time:\n  :ready-in:\n  :END:\n** Ingredients\n   %?\n** Directions\n\n")))
    #+end_src

*** TODO [[https://github.com/Chobbes/org-chef][Chobbes/org-chef: A package for making a cookbook and managing recipes with org-mode.]]
*** TODO [[https://github.com/ahendriksen/ob-tmux][ahendriksen/ob-tmux: Ob-tmux is an Emacs library that allows org mode to evaluate code blocks in a tmux session.]]
    #+begin_src emacs-lisp
      (use-package ob-tmux
        :custom
        (org-babel-tmux-terminal "iterm")
      )
    #+end_src

*** COMMENT [[https://github.com/magit/orgit][magit/orgit: Support for Org links to Magit buffers]]
    #+begin_src emacs-lisp
      (use-package orgit)
    #+end_src
*** [[https://github.com/akirak/ivy-omni-org][akirak/ivy-omni-org: An Ivy command which lets you visit Org buffers, files, bookmarks, and agenda commands]]
    #+begin_src emacs-lisp
      (leaf ivy-omni-org
        :after counsel
        :commands (ivy-omni-org)
        :bind ("C-c b" . ivy-omni-org)
        :custom
        (ivy-omni-org-file-sources . (slumos/ivy-omni-org-sources)))

      (defun slumos/ivy-omni-org-sources ()
        (-uniq (-concat
                (directory-files org-directory t "\\.org\\'")
                (directory-files org-directory t "\\.sync-conflict-[-[:digit:]]+\\.org\\'")
                (directory-files user-emacs-directory "\\.org\\'"))))
    #+end_src
*** [[https://github.com/alphapapa/org-ql][alphapapa/org-ql: An Org-mode query language, including search commands and saved views]]
    #+begin_src emacs-lisp
      (leaf org-ql
        :custom
        (org-ql-search-directories-files-regexp . "\\.org\\(_done\\)?\\'"))
    #+end_src

*** [[https://github.com/alphapapa/org-web-tools/blob/master/README.org][org-web-tools/README.org at master · alphapapa/org-web-tools · GitHub]]
    #+begin_src emacs-lisp
      (use-package org-web-tools)
    #+end_src

*** TODO Enable and play with [[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-sqlite.org.html][ob-sqlite]]
*** org-mac-link
   #+begin_src emacs-lisp
     (use-package org-mac-link
       :quelpa ((org-mac-link
                 :fetcher git
                 :url "https://gitlab.com/aimebertrand/org-mac-link.git")
                :upgrade t)
       :commands (org-mac-link-get-link))
   #+end_src

** Evaluation
*** Structure Templates
    #+begin_src emacs-lisp
      (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
      (add-to-list 'org-structure-template-alist '("sj" . "src shell :results output :wrap src json"))
      (add-to-list 'org-structure-template-alist '("st" . "src shell :results output :wrap src text"))
      (add-to-list 'org-structure-template-alist '("sy" . "src shell :results output :wrap src yaml"))
    #+end_src
*** Beautiful, gorgeous hack from [[https://emacs.stackexchange.com/questions/24247/org-mode-pipe-source-block-output-as-stdin-to-next-source-block/51734#51734][org babel - Org-mode: pipe source block output as stdin to next source block - Emacs Stack Exchange]]
    #+begin_src emacs-lisp
      (defun org-babel-execute:passthrough (body params) body)
      (defalias 'org-babel-execute:json 'org-babel-execute:passthrough)
      (add-to-list 'org-babel-load-languages '(passthrough . t))
    #+end_src
*** [[https://emacs.stackexchange.com/questions/13244/edebug-orgmode-source-code-blocks-with-input-variables][org mode - Edebug orgmode source code blocks with input variables - Emacs Stack Exchange]]
    #+begin_src emacs-lisp
      (defun org-src-debug ()
        "Put a call to this function at the beginning of the org source block to debug it."
        (save-excursion
          (let ((pt (let ((case-fold-search t)) (org-babel-where-is-src-block-head))))
            (unless pt (error "Not at source block"))
            (goto-char pt)
            (org-edit-src-code)
            (let ((parse-sexp-ignore-comments t))
              (goto-char (point-min))
              (forward-sexp 2)
              (edebug-defun)))))
    #+end_src
*** TRYING COMMENT [[https://github.com/diadochos/org-babel-eval-in-repl][diadochos/org-babel-eval-in-repl: Send and eval org-mode babel code blocks in various REPLs (therefore it's async)]]
    #+begin_src emacs-lisp
      (use-package org-babel-eval-in-repl)
    #+end_src
** slumos hacks
*** Copy org link as rich text
**** HTML
#+begin_src emacs-lisp
  (defun slumos/org-link-at-point-as-html ()
    (let* ((ctx (org-element-context))
           (type (org-element-type ctx))
           (beg (org-element-property :begin ctx))
           (end (org-element-property :end ctx))
           (backend (or (org-export-get-backend 'slimhtml)
                        (org-export-get-backend 'html))))
      (if (eq type 'link)
          (org-export-string-as (buffer-substring beg end) 'slimhtml t)
        (user-error "no link found at point"))))

  (defun slumos/org-copy-link-at-point-as-html ()
    (interactive)
    (kill-new (slumos/org-link-at-point-as-html)))

  (defun slumos/copy-html-to-pasteboard (html)
    (let* ((hex (string-join (--map (format "%0X" it) (string-to-list html))))
           (script (format "set the clipboard to «data HTML%s»" hex)))
      (do-applescript script)))

;;  (with-current-buffer "DMP.org"
;;    (slumos/org-link-at-point-as-html))
  #+end_src

**** Clipboard
#+begin_src emacs-lisp
  (defun slumos/org-copy-link-at-point-to-clipboard-rich ()
    (interactive)
    (let* ((html (slumos/org-link-at-point-as-html)))
      (with-temp-buffer
        (insert html)
        (shell-command-on-region
         (point-min)
         (point-max)
         "textutil -stdin -format html -convert rtf -stdout | pbcopy"))))

  ;; (with-current-buffer "DMP.org"
  ;;   (slumos/org-copy-link-at-point-to-clipboard-rich))
#+end_src

*** TODO slumos-org-copy-to-clipboard
   The idea of this is to copy HTML to the macOS clipboard and tag it as HTML so that it pastes properly.
   See [[https://stackoverflow.com/questions/11085654/apple-script-how-can-i-copy-html-content-to-the-clipboard][macos - Apple Script : How can I copy html content to the clipboard? - Stack Overflow]]

   #+begin_src emacs-lisp
     (defun slumos-org-copy-to-clipboard ()
       "Copy org subtree to system clipboard as rich text"
       (interactive)
       (let* ((backend (or (org-export-get-backend 'slimhtml)
                           (org-export-get-backend 'html)))
              (html-buf (org-export-to-buffer backend "*html-buf*" nil t nil nil '(:toc nil) (lambda () (html-mode)))))
         (with-current-buffer html-buf
           (shell-command-on-region
            (point-min)
            (point-max)
            "textutil -stdin -format html -convert rtf -stdout | pbcopy")
           (bury-buffer))))
   #+end_src
*** Do stuff with "WorkItems"
(WorkItem is SFDC for "ticket")

My work notes have a headline for each sprint, and below that a headline for each workitem, which is a link to the workitem starting with the workitem ID (which matches W-[0-9]+). This could easily be adapted to JIRA by matching [A-Z]+-[0-9]+ (and now that I wrote that I'm going to just redo it that way lol).

The main goal of these is to make it super easy to get the ID or a full rich text link into the system clipboard for pasting into commit messages, Slack, email, etc.

#+begin_src emacs-lisp
  (defun slumos/org-copy-workitem-id-for-subtree ()
    "Find a workitem id in a property or title above point and copy it to the clipboard"
    (interactive)
    (let ((wid (slumos/org-find-workitem-for-subtree)))
      (if wid
          (progn
            (kill-new wid)
            (message "%s" wid))
        (user-error "failed to find a WorkItem ID"))))

  (defun slumos/org-find-workitem-for-subtree ()
    (cl-loop for headline in (slumos/org-subtree-headlines)
             for wi-prop = (org-element-property :WORKITEM headline)
             for title = (org-element-property :title headline)
             if wi-prop return wi-prop
             if (and title (string-match "W-\[0-9\]\+" title)) return (match-string 0 title)))

  (defun slumos/org-subtree-headlines ()
    (save-excursion
      (org-with-wide-buffer
       (slumos/org--subtree-headlines-from-point))))

  (defun slumos/org--subtree-headlines-from-point ()
      (unless (org-at-heading-p) (outline-previous-visible-heading 1))
      (let* ((this (org-element-at-point)))
        (if (org-up-heading-safe)
            (cons this (slumos/org--subtree-headlines-from-point))
          (list this))))
#+end_src

#+begin_src emacs-lisp :results replace drawer pp :tangle no
  (with-current-buffer "DMP.org"
    (let* ((headlines (slumos/org-subtree-headlines))
           (headline (car headlines))
           (title (org-element-property :title headline)))
      headline))
#+end_src

#+RESULTS:
#+begin_example
(headline
 (:raw-value "[[https://gus.lightning.force.com/lightning/r/ADM_Work__c/a07EE00000n9ZsEYAU/view][W-10679745: Migrate krux.periodic.navegg chronos job to k8s | Work]]" :begin 1108 :end 1348 :pre-blank 0 :contents-begin 1269 :contents-end 1347 :robust-begin 1271 :robust-end 1345 :level 2 :priority nil :tags nil :todo-keyword
             #("START" 0 5
               (fontified nil line-prefix
                          #("*" 0 1
                            (face org-indent))
                          wrap-prefix
                          #("*** " 0 1
                            (face org-indent)
                            1 4
                            (face org-indent))
                          face
                          (org-todo org-level-2)
                          org-todo-head
                          #("TODO" 0 4
                            (face org-todo))))
             :todo-type todo :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 1108 :title
             ((link
               (:type "https" :path "//gus.lightning.force.com/lightning/r/ADM_Work__c/a07EE00000n9ZsEYAU/view" :format bracket :raw-link "https://gus.lightning.force.com/lightning/r/ADM_Work__c/a07EE00000n9ZsEYAU/view" :application nil :search-option nil :begin 1117 :end 1268 :contents-begin 1200 :contents-end 1266 :post-blank 0 :parent
                      (headline #1))
               #("W-10679745: Migrate krux.periodic.navegg chronos job to k8s | Work" 0 66
                 (:parent #3))))
             :parent
             (headline
              (:raw-value "[[https://gus.lightning.force.com/lightning/r/ADM_Sprint__c/a0lEE000000CWm1YAG/view][2022.12a]]" :begin 1010 :end 54188 :pre-blank 0 :contents-begin 1108 :contents-end 54187 :robust-begin 1110 :robust-end 54185 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 1010 :title
                          ((link
                            (:type "https" :path "//gus.lightning.force.com/lightning/r/ADM_Sprint__c/a0lEE000000CWm1YAG/view" :format bracket :raw-link "https://gus.lightning.force.com/lightning/r/ADM_Sprint__c/a0lEE000000CWm1YAG/view" :application nil :search-option nil :begin 1012 :end 1107 :contents-begin 1097 :contents-end 1105 :post-blank 0 :parent
                                   (headline #3))
                            #("2022.12a" 0 8
                              (:parent #5))))
                          :parent
                          (org-data
                           (:begin 1 :contents-begin 1 :contents-end 2234182 :end 2234182 :robust-begin 3 :robust-end 2234180 :post-blank 0 :post-affiliated 1 :path "/Users/slumos/Sync/GDrive/Notes/DMP.org" :mode org-data :CATEGORY "DMP" :cached t))
                          :cached t :org-element--cache-sync-key
                          (3 . 1010)))
             :cached t :org-element--cache-sync-key
             (3 . 1108)))
#+end_example

*** COMMENT Post-process grabbed links

    Strip content-free stuff that gets tacked onto the title of every page.

    #+begin_src emacs-lisp
      (defun slumos/org-grab-link-after (s)
        (replace-regexp-in-string " | Salesforce$" "" s))

      (advice-add #'org-as-mac-chrome-get-frontmost-url :filter-return #'slumos/org-grab-link-after)
      (org-as-mac-chrome-get-frontmost-url)
    #+end_src
*** Messing around
#+begin_src emacs-lisp :results replace drawer pp :tangle no
  (require 'dash)
  (defun slumos/org-find-workitem-headline-for-subtree ()
    (--first (string-match "W-\[0-9\].*" (org-element-property :title it)) (slumos/org-subtree-headlines)))

  (with-current-buffer "DMP.org"
      (slumos/org-find-workitem-headline-for-subtree))
#+end_src

#+RESULTS:
#+begin_example
(headline
 (:raw-value "[[https://gus.lightning.force.com/lightning/r/ADM_Work__c/a07EE00000sO211YAC/view][W-10819701: Upgrade Cloudbees JDK to Java 11+]]" :begin 891 :end 1911 :pre-blank 0 :contents-begin 1031 :contents-end 1911 :level 2 :priority nil :tags nil :todo-keyword
             #("START" 0 1
               (fontified t face org-modern-todo display
                          #(" S" 1 2
                            (cursor t))
                          org-category "DMP")
               1 4
               (fontified t face org-modern-todo org-category "DMP")
               4 5
               (fontified t face org-modern-todo display "T " org-category "DMP"))
             :todo-type todo :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 891 :title "[[https://gus.lightning.force.com/lightning/r/ADM_Work__c/a07EE00000sO211YAC/view][W-10819701: Upgrade Cloudbees JDK to Java 11+]]"))
#+end_example

* Other Apps
** [[https://github.com/atgreen/paperless][atgreen/paperless: Emacs-assisted PDF document filing]]
#+begin_src emacs-lisp
  (use-package paperless
    :custom
    (paperless-capture-directory "~/Sync/OneDrive/ScanSnap")
    (paperless-root-directory "~/Sync/OneDrive/Documents"))
#+end_src

** Docker
*** [[https://github.com/Silex/docker.el][Silex/docker.el: Manage docker from Emacs.]]
#+begin_src emacs-lisp
    (use-package docker
      :bind ("C-c d" . docker))
#+end_src
*** COMMENT (deprecated) [[https://github.com/emacs-pe/docker-tramp.el][emacs-pe/docker-tramp.el: TRAMP integration for docker containers]]
#+begin_src emacs-lisp
;  (use-package docker-tramp)
#+end_src

** COMMENT [[https://github.com/akermu/emacs-libvterm][akermu/emacs-libvterm: Emacs libvterm integration]]
#+begin_src emacs-lisp
  (use-package vterm)
#+end_src
** TODO [[https://github.com/xenodium/chatgpt-shell][xenodium/chatgpt-shell: ChatGPT and DALL-E Emacs shells + Org babel 🦄 + a shell maker for other providers]]
** [[https://github.com/skeeto/elfeed][skeeto/elfeed: An Emacs web feeds client]]
#+begin_src emacs-lisp
  (use-package elfeed)
  (use-package elfeed-org
    :config
    (setq rmh-elfeed-org-files (list (expand-file-name "config.org" user-emacs-directory))))
#+end_src
*** elfeed-org configuration                                         :elfeed:
**** Emacs                                                            :emacs:
***** http://planet.emacsen.org/atom.xml
***** [[https://sachachua.com/blog/feed/][Sacha Chua]]
**** Friends                                                        :friends:
***** [[https://davidmcrampton.com/?feed=rss2][https://davidmcrampton.com/?feed=rss2]]
** [[https://codeberg.org/martianh/mastodon.el][martianh/mastodon.el: Emacs client for Mastodon]]
#+begin_src emacs-lisp
  (use-package mastodon
    :config
    (setq mastodon-instance-url "https://emacs.ch"
          mastodon-active-user "slumos"))
#+end_src
* Language Modes
** [[https://github.com/k1LoW/emacs-ansible][Ansible: k1LoW/emacs-ansible]]
#+begin_src emacs-lisp
  (use-package ansible)
#+end_src
** Tree Sitter
*** [[https://github.com/renzmann/treesit-auto][renzmann/treesit-auto: Automatic installation, usage, and fallback for tree-sitter major modes in Emacs 29]]
#+begin_src emacs-lisp
  (use-package treesit-auto
    :config
    (setq treesit-auto-install 'prompt)
    (global-treesit-auto-mode))
#+end_src

** Misc
*** [[https://github.com/abo-abo/lispy][abo-abo/lispy: Short and sweet LISP editing]]
    #+begin_src emacs-lisp
    (leaf lispy
       :hook
       ((emacs-lisp-mode-hook
       fennel-mode-hook) . lispy-mode))
    #+end_src
**** hydra
     [[https://sachachua.com/dotemacs/#hydra-lispy][Thanks again Sacha!]]

     #+NAME: lispy-bindings-ref
     | key | function                      | column   |
     |-----+-------------------------------+----------|
     | <   | lispy-barf                    |          |
     | A   | lispy-beginning-of-defun      |          |
     | j   | lispy-down                    |          |
     | Z   | lispy-edebug-stop             |          |
     | B   | lispy-ediff-regions           |          |
     | G   | lispy-goto-local              |          |
     | h   | lispy-left                    |          |
     | N   | lispy-narrow                  |          |
     | y   | lispy-occur                   |          |
     | o   | lispy-other-mode              |          |
     | J   | lispy-outline-next            |          |
     | K   | lispy-outline-prev            |          |
     | P   | lispy-paste                   |          |
     | l   | lispy-right                   |          |
     | I   | lispy-shifttab                |          |
     | >   | lispy-slurp                   |          |
     | SPC | lispy-space                   |          |
     | xB  | lispy-store-region-and-buffer |          |
     | u   | lispy-undo                    |          |
     | k   | lispy-up                      |          |
     | v   | lispy-view                    |          |
     | V   | lispy-visit                   |          |
     | W   | lispy-widen                   |          |
     | D   | pop-tag-mark                  |          |
     | x   | see                           |          |
     | L   | unbound                       |          |
     | U   | unbound                       |          |
     | X   | unbound                       |          |
     | Y   | unbound                       |          |
     | H   | lispy-ace-symbol-replace      | Edit     |
     | c   | lispy-clone                   | Edit     |
     | C   | lispy-convolute               | Edit     |
     | n   | lispy-new-copy                | Edit     |
     | O   | lispy-oneline                 | Edit     |
     | r   | lispy-raise                   | Edit     |
     | R   | lispy-raise-some              | Edit     |
     | \   | lispy-splice                  | Edit     |
     | S   | lispy-stringify               | Edit     |
     | i   | lispy-tab                     | Edit     |
     | xj  | lispy-debug-step-in           | Eval     |
     | xe  | lispy-edebug                  | Eval     |
     | xT  | lispy-ert                     | Eval     |
     | e   | lispy-eval                    | Eval     |
     | E   | lispy-eval-and-insert         | Eval     |
     | xr  | lispy-eval-and-replace        | Eval     |
     | p   | lispy-eval-other-window       | Eval     |
     | q   | lispy-ace-paren               | Move     |
     | z   | lispy-knight                  | Move     |
     | s   | lispy-move-down               | Move     |
     | w   | lispy-move-up                 | Move     |
     | t   | lispy-teleport                | Move     |
     | Q   | lispy-ace-char                | Nav      |
     | -   | lispy-ace-subword             | Nav      |
     | a   | lispy-ace-symbol              | Nav      |
     | b   | lispy-back                    | Nav      |
     | d   | lispy-different               | Nav      |
     | f   | lispy-flow                    | Nav      |
     | F   | lispy-follow                  | Nav      |
     | g   | lispy-goto                    | Nav      |
     | xb  | lispy-bind-variable           | Refactor |
     | xf  | lispy-flatten                 | Refactor |
     | xc  | lispy-to-cond                 | Refactor |
     | xd  | lispy-to-defun                | Refactor |
     | xi  | lispy-to-ifs                  | Refactor |
     | xl  | lispy-to-lambda               | Refactor |
     | xu  | lispy-unbind-variable         | Refactor |
     | M   | lispy-multiline               | Other    |
     | xh  | lispy-describe                | Other    |
     | m   | lispy-mark-list               | Other    |

     #+BEGIN_SRC emacs-lisp :var bindings=lispy-bindings-ref :colnames yes :results silent :exports code
       (eval
        (append
         '(defhydra my/lispy-cheat-sheet (:hint nil :foreign-keys run)
            ("<f14>" nil "Exit" :exit t))
         (cl-loop for x in bindings
                  unless (string= "" (elt x 2))
                  collect
                  (list (car x)
                        (intern (elt x 1))
                        (when (string-match "lispy-\\(?:eval-\\)?\\(.+\\)"
                                            (elt x 1))
                          (match-string 1 (elt x 1)))
                        :column
                        (elt x 2)))))
       (with-eval-after-load "lispy"
         (define-key lispy-mode-map (kbd "s-l") 'my/lispy-cheat-sheet/body))
     #+END_SRC

** TODO [[https://github.com/doublep/eldev][doublep/eldev: Elisp Development Tool]]
** Dockerfile
   #+begin_src emacs-lisp
   (use-package dockerfile-mode)
   #+end_src
** [[https://fennel-lang.org/][Fennel]]
   I use Fennel for Hammerspoon configuration and lurves it.
   #+begin_src emacs-lisp
     (use-package fennel-mode
       :mode "\\.fnl\\'"
       :hook
       (fennel-mode . lispy-mode)
       (emacs-lisp-mode . lispy-mode))
   #+end_src
** flycheck
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck-mode
       :ensure flycheck
       :hook (puppet-mode ruby-mode json-mode python-mode))
   #+END_SRC
*** TODO [[https://github.com/baron42bba/.emacs.d/blob/master/bba.org#flycheck][Flycheck puppet-lint from this example]]
** Go (golang)
   #+begin_src emacs-lisp
     (use-package go-mode
       :bind
       (:map go-mode-map
             ("M-." . godef-jump))
       :config
       (add-hook 'go-mode-hook (lambda () (setq tab-width 4)))
       (add-hook 'before-save-hook 'gofmt-before-save))
   #+end_src

(use-package go-mode
  :mode ("\\.go\\'")
  :ensure t
  :config
  (add-hook 'go-mode-hook
            (lambda ()
              (setq tab-width 4)
              (add-hook 'before-save-hook 'gofmt-before-save)
              )))
   
** Groovy
   #+BEGIN_SRC emacs-lisp
     (use-package groovy-mode
       :mode "\\.groovy\\'"
       :custom
       (groovy-indent-offset 2))
   #+END_SRC
** Java
   #+begin_src emacs-lisp
     (exec-path-from-shell-copy-env "JAVA_HOME")
   #+end_src

   #+begin_src emacs-lisp
     (leaf lsp-mode
       :commands lsp)
   #+end_src

   #+begin_src emacs-lisp
     (leaf lsp-ui
       :hook (lsp-mode-hook . lsp-ui-mode)
       :custom
       ((lsp-auto-guess-root . t)
        (lsp-enable-completion-at-point . t)
        (lsp-log-io . t)
        (lsp-log-max . 2000)
        (lsp-ui-doc-enable . t)))
   #+end_src

   #+begin_src emacs-lisp
     (use-package lsp-java
       :hook ((java-mode-hook . lsp-deferred)))
   #+end_src

   #+begin_src emacs-lisp
     (use-package dap-mode
       :hook ((java-mode-hook . dap-mode)
              (dap-stopped . (lambda (arg) call-interactively #'dap-hydra)))
       :config
       (dap-mode 1)
       (dap-ui-mode 1))
   #+end_src

   #+begin_src emacs-lisp :tangle no
     (leaf dap-java
       :package (dap-mode))
   #+end_src

** Javascript
   #+BEGIN_SRC emacs-lisp
     (use-package js2-mode :mode "\\.js\'")
   #+END_SRC

   Putting JSON here too...meh.
   #+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :mode "\\.json\\(\\.erb\\)?\'"
    :config
    (add-hook 'json-mode-hook #'flycheck-mode)
    (add-hook 'json-mode-hook #'yas-minor-mode)
    (org-babel-do-load-languages 'org-babel-load-languages '((jq . t))))
   #+END_SRC

   Trying out jsonian
   #+begin_src emacs-lisp :tangle no
     (use-package jsonian
       :straight (:type git :host github :repo "iwahbe/jsonian")
       :mode "\\.json\'"
       :after so-long
       :custom (jsonian-no-so-long-mode))
   #+end_src

** jq mode
   #+begin_src emacs-lisp
     (use-package jq-mode)
   #+end_src
** Kubernetes / Helm
   #+begin_src emacs-lisp
     (use-package k8s-mode
       :ensure t
       :hook (k8s-mode . yas-minor-mode))
   #+end_src
** Lua
#+begin_src emacs-lisp
  (use-package lua-mode)
#+end_src

** Markdown
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :commands (markdown-mode gfm-mode)
       :mode (("README\\.md\\'" . gfm-mode)
              ("\\.md\\'" . markdown-mode)
              ("\\.markdown\\'" . markdown-mode))
       :init
       (setq markdown-command "cmark-gfm"
             ;;; ripped from https://github.com/hlissner/doom-emacs/blob/ce3188/modules/lang/markdown/config.el#L28
             ;; HACK Due to jrblevin/markdown-mode#578, invoking `imenu' throws a
             ;;      'wrong-type-argument consp nil' error if you use native-comp.
             markdown-nested-imenu-heading-index (not (ignore-errors (native-comp-available-p)))))
   #+END_SRC
** MinecraftForge
*** TODO [[https://github.com/qwattash/forge-mode][qwattash/forge-mode: Emacs minor mode for minecraft forge development]]

** Puppet
   #+BEGIN_SRC emacs-lisp
     (use-package puppet-mode
       :mode "\\.pp\\'"
       :config
       (unbind-key "$" puppet-mode-map)
       (setq-local align-region-separate 'group)
       (add-to-list 'puppet-mode-align-rules
		    '(puppet-assignment-literal
		      (regexp . "\\(\\s-*\\)=\\s-*[^# \t\n]")
		      (repeat . t)
		      (modes . '(puppet-mode)))))
   #+END_SRC
** Python
   #+BEGIN_SRC emacs-lisp
     (use-package python
       :mode ("\\.py\\'" . python-mode)
       :interpreter ("python" . python-mode))
   #+END_SRC

   #+begin_src emacs-lisp
     (use-package elpy)
   #+end_src

   IPython / Jupyter Notebook client

   #+BEGIN_SRC emacs-lisp
     (use-package ein
       :commands (ein:notebooklist-login
                  ein:notebooklist-open)
       :config
       (org-babel-do-load-languages 'org-babel-load-languages '((ein . t))))
   #+END_SRC

   Language Server Protocol
   #+begin_src emacs-lisp
     (use-package lsp-python-ms
       :hook
       (python-mode . (lambda () (require 'lsp-python-ms))))
   #+end_src
*** [[https://github.com/abo-abo/lpy][abo-abo/lpy: Minimal Python IDE for GNU Emacs]]
    #+begin_src emacs-lisp
      (use-package lpy)
    #+end_src

** Ruby
   #+BEGIN_SRC emacs-lisp
     (use-package ruby-mode
       :mode "\\(\\.rb\\|\\.rake\\|Gemfile\\(\\.local\\)?\\||Puppetfile\\)\\'")

     (use-package inf-ruby
       :no-require t)

     (use-package rspec-mode
       :config
       (inf-ruby-switch-setup))

     (use-package ruby-hash-syntax
       :bind
       (:map ruby-mode-map
             ("C-c #" . ruby-hash-syntax-toggle)))

     (use-package seeing-is-believing
       :bind (("<s-return>" . seeing-is-believing)))

     (use-package chruby)
   #+END_SRC

   #+begin_src emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((ruby . t)))
   #+end_src

   #+BEGIN_SRC emacs-lisp
     ;; https://raw.githubusercontent.com/jimweirich/emacs-setup-esk/master/ruby-align.el
     (require 'align)

     (add-to-list 'align-rules-list
		  '(ruby-comma-delimiter
		    (regexp . ",\\(\\s-*\\)[^# \t\n]")
		    (repeat . t)
		    (modes  . '(ruby-mode))))

     (add-to-list 'align-rules-list
		  '(ruby-hash-literal
		    (regexp . "\\(\\s-*\\)=>\\s-*[^# \t\n]")
		    (group 2 3)
		    (repeat . t)
		    (modes  . '(ruby-mode))))

     (add-to-list 'align-rules-list
		  '(ruby-hash-literal2
		    (regexp . "[a-z0-9]:\\(\\s-*\\)[^# \t\n]")
		    (repeat . t)
		    (modes  . '(ruby-mode))))

     (add-to-list 'align-rules-list
		  '(ruby-assignment-literal
		    (regexp . "\\(\\s-*\\)=\\s-*[^# \t\n]")
		    (repeat . t)
		    (modes  . '(ruby-mode))))

     (add-to-list 'align-rules-list
		  '(ruby-xmpfilter-mark
		    (regexp . "\\(\\s-*\\)# => [^#\t\n]")
		    (repeat . nil)
		    (modes  . '(ruby-mode))))
   #+END_SRC

** Rust
   #+begin_src emacs-lisp
   (use-package rustic)
   #+end_src

   #+begin_src emacs-lisp
   (use-package flycheck-rust)
   #+end_src

** Terraform (HCL)
   #+BEGIN_SRC emacs-lisp
     (use-package terraform-mode
       :config
       (setq lsp-disabled-clients '(tfls))
       :hook
       ; see aphelia (terraform-mode . terraform-format-on-save-mode)
       (terraform-mode . lsp-deferred)
       (terraform-mode . flycheck-mode))
   #+END_SRC
** Web (HTML, etc)
   #+BEGIN_SRC emacs-lisp
     (use-package web-mode
       :mode "\\.j2$"
       :config (setq web-mode-content-types-alist '(("json" . "spinnaker/.*\\.j2\\'"))))
   #+END_SRC
** TOML
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package toml-mode
       :mode "Pipfile\\'")
   #+END_SRC
** YAML
   #+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :mode "\\(.yaml\\|.yml\\)$"
    :config (add-hook 'yaml-mode-hook #'flycheck-mode))

  (use-package yaml-pro
    :hook (yaml-mode . yaml-pro-mode))

  (use-package yaml-imenu
    :hook (yaml-mode . yaml-imenu-enable))
   #+END_SRC
* Helpers
** Automagic make scripts executable
   #+BEGIN_SRC emacs-lisp
     (custom-set-variables '(executable-prefix-env t))
   #+END_SRC
** [[https://github.com/casouri/vundo][casouri/vundo: Visualize the undo tree.]]
#+begin_src emacs-lisp
  (use-package vundo
    :config
    (setq vundo-glyph-alist vundo-unicode-symbols))
#+end_src

** Copy region formatted for various markup systems
   #+BEGIN_SRC emacs-lisp
   (use-package copy-as-format)
   #+END_SRC
** [[https://github.com/Fanael/edit-indirect/blob/master/edit-indirect.el][edit-indirect/edit-indirect.el at master · Fanael/edit-indirect]]
#+begin_src emacs-lisp
  (use-package edit-indirect)
#+end_src
** COMMENT [[https://github.com/emacs-tree-sitter/ts-fold][emacs-tree-sitter/ts-fold: Code-folding using tree-sitter]]
#+begin_src emacs-lisp
  (use-package ts-fold
    :straight (ts-fold :type git :host github :repo "emacs-tree-sitter/ts-fold"))
#+end_src

** Font scale for all frames
   #+BEGIN_SRC emacs-lisp
     (use-package default-text-scale
       :init (default-text-scale-mode))
   #+END_SRC
** Hydra
   #+begin_src emacs-lisp
     (use-package hydra)
   #+end_src

   #+begin_src emacs-lisp
     (use-package use-package-hydra)
   #+end_src

   #+begin_src emacs-lisp
     (defun invoke-hydra ()
       (interactive)
       (counsel-M-x ".*hydra-.*/body "))
     (global-set-key (kbd "C-c h") #'invoke-hydra)
   #+end_src
*** Hydras
**** Commonly visited file shortcuts

     This seems like a decent demonstration of literate programming. Add a row to this table, then eval the defhydra block.
     #+name: commonly-visited-files-shortcuts
     | key | path                                     | name                     | fun          |
     |-----+------------------------------------------+--------------------------+--------------|
     | a   | ~/.config/alacritty/alacritty.yml        | alacritty config         | find-file    |
     | c   | ~/.emacs.d/config.org                    | main config (config.org) | find-file    |
     | N   | ~/Sync/OneDrive/Notes/NOTES.org          | NOTES.org                | find-file    |
     | p   | ~/.emacs.d/personal.org                  | personal config          | find-file    |
     | q   | ~/Sync/GDrive/My Drive/Notes/Quizlet.org | Quizlet.org              | find-file    |
     | r   | ~/Sync/Notes/Cookbook.org                | cookbook                 | find-file    |
     | s   | ~/Sync/Notes/SLUMOS.org                  | SLUMOS.org               | find-file    |
     | t   | ~/Sync/Notes/TODO.org                    | TODO.org                 | find-file    |
     | w   | ~/.emacs.d/work.org                      | work config              | find-file    |
     | z   | ~/.zshrc                                 | zshrc                    | chezmoi-find |

     #+begin_src emacs-lisp :var table=commonly-visited-files-shortcuts :results output replace
       (cl-loop for (key path name fun) in table do
                (prin1 (list key path name fun)))
     #+end_src

     #+name: table-to-file-shortcuts-heads
     #+begin_src emacs-lisp :var table=commonly-visited-files-shortcuts :results output replace
       (cl-loop for (key path name fun) in table do
                (print (list key (list (intern fun) path) name)) (list :column "File Shortcuts"))
     #+end_src

     #+begin_src emacs-lisp :noweb yes
       (defhydra hydra-commonly-visited-files-shortcuts (:color blue)
         <<table-to-file-shortcuts-heads(table=commonly-visited-files-shortcuts)>>)
       (global-set-key (kbd "C-c v") #'hydra-commonly-visited-files-shortcuts/body)
     #+end_src
     
**** kill-ring-saving
#+begin_src emacs-lisp
  (defhydra slumos-hydra-copy-something-as-kill (:color blue)
    "copy as kill"
      ("b" slumos/magit-copy-buffer-current-branch "current branch (magit buffer)")
      ("w" slumos/org-copy-workitem-id-for-subtree "workitem for subtree (org-mode)"))
  (global-set-key (kbd "C-c w") #'slumos-hydra-copy-something-as-kill/body)
#+end_src
** Jumping
*** avy
    #+BEGIN_QUOTE
      "If you're familiar with the popular `ace-jump-mode' package, this
      package does all that and more, without the implementation
      headache."
    #+END_QUOTE
    #+BEGIN_SRC emacs-lisp
	(use-package avy
          :bind
          ("C-." . avy-goto-char-timer)
          ("M-g M-g" . avy-goto-line))
    #+END_SRC
*** [[https://github.com/noctuid/link-hint.el][noctuid/link-hint.el: Pentadactyl-like Link Hinting in Emacs with Avy]]
    #+begin_src emacs-lisp
      (use-package link-hint
        :bind
        ("M-o" . link-hint-open-link))
    #+end_src
** [[https://github.com/jwiegley/emacs-async][jwiegley/emacs-async: Simple library for asynchronous processing in Emacs]]
#+begin_src emacs-lisp
  (use-package async)
#+end_src
** COMMENT [[https://github.com/jinnovation/kele.el][jinnovation/kele.el: 🥤 Spritzy Kubernetes cluster management for Emacs]]
#+begin_src emacs-lisp
  (use-package kele
    :config
    (kele-mode 1)
    (bind-key (kbd "s-k") kele-command-map kele-mode-map))
#+end_src

** [[https://github.com/r0bobo/kubedoc.el/blob/main/kubedoc.el][kubedoc.el/kubedoc.el at main · r0bobo/kubedoc.el]]
#+begin_src emacs-lisp
  (use-package kubedoc
    :bind
    (:map kubedoc-mode-map
          ("u" . kubedoc-up)))
#+end_src

** [[https://github.com/mhayashi1120/Emacs-wgrep][mhayashi1120/Emacs-wgrep: Writable grep buffer and apply the changes to files]]
   #+begin_src emacs-lisp
   (use-package wgrep)
   #+end_src
** TRYING [[https://github.com/oantolin/embark/tree/master#quick-start][oantolin/embark: Emacs Mini-Buffer Actions Rooted in Keymaps]]
"It is highly recommended to also install Marginalia..." [[https://github.com/minad/marginalia][minad/marginalia: marginalia.el - Marginalia in the minibuffer]]
#+begin_src emacs-lisp
  (use-package marginalia
    :config (marginalia-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package embark
    :ensure t
    :bind
    (("C-." . embark-act)
     ("C-;" . embark-dwim)
     ("C-h B" . embark-bindings))

    :init
    (setq prefix-help-command #'embark-prefix-help-command)

    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  (use-package embark-consult
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** [[https://github.com/radian-software/apheleia][radian-software/apheleia: 🌷 Run code formatter on buffer contents without moving point, using RCS patches and dynamic programming.]]
#+begin_src emacs-lisp
  (use-package apheleia
    :hook (terraform-mode . apheleia-mode))
#+end_src

** [[https://github.com/tuh8888/chezmoi.el][tuh8888/chezmoi.el: An emacs package for interacting with chezmoi.]]
#+begin_src emacs-lisp
    (use-package chezmoi
      :commands (chezmoi-find chezmoi-write chezmoi-diff chezmoi-magit-status)
      :bind
      ("C-c C f" . chezmoi-find)
      ("C-c C s" . chezmoi-write)
      ("C-c C g" . chezmoi-magit-status))
#+end_src
** [[https://github.com/wbolster/emacs-direnv][wbolster/emacs-direnv: direnv integration for emacs]]
   #+begin_src emacs-lisp
   (use-package direnv)
   #+end_src

** [[https://github.com/Wilfred/helpful][Wilfred/helpful: A better Emacs *help* buffer]]
   #+begin_src emacs-lisp
     (use-package helpful
       :after counsel
       :config
       (setq counsel-describe-function-function #'helpful-callable)
       (setq counsel-describe-variable-function #'helpful-variable))
   #+end_src
** [[https://github.com/xuchunyang/elisp-demos][xuchunyang/elisp-demos: Demonstrate Emacs Lisp APIs]]
#+begin_src emacs-lisp
  (use-package elisp-demos
    :after helpful
    :init (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update))
#+end_src

** [[https://github.com/ymarco/auto-activating-snippets][ymarco/auto-activating-snippets: Snippets for Emacs that expand as you type]]
#+begin_src emacs-lisp
  (use-package aas
    :config
    (aas-set-snippets 'global
      ";->" "→"
      ";arr" "⇒"
      ";larr" "⟹")
    (aas-global-mode))
#+end_src

* multiple-cursors
   [[http://emacsrocks.com/e13.html][Emacs Rocks! Episode 13: multiple-cursors]]
   [[https://github.com/abo-abo/hydra/wiki/multiple-cursors][multiple cursors · abo-abo/hydra Wiki]]

   #+begin_src emacs-lisp :noweb yes
     (use-package multiple-cursors
       :bind
       ("C-c m" . hydra-multiple-cursors/body)
       ("C->" . mc/mark-next-like-this)
       ("C-<" . mc/mark-previous-like-this)
       :config
       <<mc-hydra>>)
   #+end_src

*** Multiple Cursors Hydra
    :PROPERTIES:
    :header-args: :noweb-ref mc-hydra :tangle no
    :END:
    #+begin_src emacs-lisp
      (defhydra hydra-multiple-cursors (:hint nil)
        "
       Up^^             Down^^           Miscellaneous           % 2(mc/num-cursors) cursor%s(if (> (mc/num-cursors) 1) \"s\" \"\")
      ------------------------------------------------------------------
       [_p_]   Next     [_n_]   Next     [_l_] Edit lines  [_0_] Insert numbers
       [_P_]   Skip     [_N_]   Skip     [_a_] Mark all    [_A_] Insert letters
       [_M-p_] Unmark   [_M-n_] Unmark   [_s_] Search      [_q_] Quit
       [_|_] Align with input CHAR       [Click] Cursor at point"
        ("l" mc/edit-lines :exit t)
        ("a" mc/mark-all-like-this :exit t)
        ("n" mc/mark-next-like-this)
        ("N" mc/skip-to-next-like-this)
        ("M-n" mc/unmark-next-like-this)
        ("p" mc/mark-previous-like-this)
        ("P" mc/skip-to-previous-like-this)
        ("M-p" mc/unmark-previous-like-this)
        ("|" mc/vertical-align)
        ("s" mc/mark-all-in-region-regexp :exit t)
        ("0" mc/insert-numbers :exit t)
        ("A" mc/insert-letters :exit t)
        ("<mouse-1>" mc/add-cursor-on-click)
        ;; Help with click recognition in this hydra
        ("<down-mouse-1>" ignore)
        ("<drag-mouse-1>" ignore)
        ("q" nil))
    #+end_src
*** SKIP COMMENT leaf-version
    #+begin_src emacs-lisp
      (leaf multiple-cursors
        :bind
        ("C-c m" . hydra-multiple-cursors/body)
        ("C-c n" . mc/mark-next-like-this)
        :hydra (hydra-multiple-cursors
                (:hint nil)
                "
             Up^^             Down^^           Miscellaneous
            ------------------------------------------------------------------
             [_p_]   Next     [_n_]   Next     [_l_] Edit lines  [_0_] Insert numbers
             [_P_]   Skip     [_N_]   Skip     [_a_] Mark all    [_A_] Insert letters
             [_M-p_] Unmark   [_M-n_] Unmark   [_s_] Search      [_q_] Quit
             [_|_] Align with input CHAR       [Click] Cursor at point"
                ("l" mc/edit-lines :exit t)
                ("a" mc/mark-all-like-this :exit t)
                ("n" mc/mark-next-like-this)
                ("N" mc/skip-to-next-like-this)
                ("M-n" mc/unmark-next-like-this)
                ("p" mc/mark-previous-like-this)
                ("P" mc/skip-to-previous-like-this)
                ("M-p" mc/unmark-previous-like-this)
                ("|" mc/vertical-align)
                ("s" mc/mark-all-in-region-regexp :exit t)
                ("0" mc/insert-numbers :exit t)
                ("A" mc/insert-letters :exit t)
                ("<mouse-1>" mc/add-cursor-on-click)
                ;; Help with click recognition in this hydra
                ("<down-mouse-1>" ignore)
                ("<drag-mouse-1>" ignore)
                ("q" nil)))
    #+end_src
** which-key: Cool cheat-sheet for bound keys
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :config (which-key-mode))
   #+END_SRC
** undo-tree
   [[http://pragmaticemacs.com/emacs/advanced-undoredo-with-undo-tree/][Advanced undo/redo with undo-tree | Pragmatic Emacs]]
   [[http://www.dr-qubit.org/undo-tree/undo-tree.el][www.dr-qubit.org/undo-tree/undo-tree.el]]
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :bind
       ("C-x u" . undo-tree-visualize)
       :config
       (setq undo-tree-visualizer-timestamps t)
       (setq undo-tree-history-directory-alist `(("." . ,(expand-file-name ".undo-tree" user-emacs-directory))))
       (global-undo-tree-mode 1))
   #+END_SRC
** WS Butler
   This cleans up trailing whitespace only on lines I edited. Briliant!
   #+BEGIN_SRC emacs-lisp
     (use-package ws-butler
       :hook (prog-mode . ws-butler-mode))
   #+END_SRC
** yasnippet
   #+begin_src emacs-lisp
     (use-package yasnippet
       :commands (yas-minor-mode)
       :hook (org-mode . yas-minor-mode)
       :config
       (yas-reload-all)
       :custom
       (yas-snippet-dirs (list (expand-file-name "snippets" user-emacs-directory))))
   #+end_src

   #+begin_src emacs-lisp :tangle no
     (leaf yasnippet
       :require t
       :commands (yas-minor-mode)
       :hook (org-mode . yas-minor-mode)
       :custom
       ((yas-snippet-dirs . (expand-file-name "snippets" user-emacs-directory)))
       :hydra
       (hydra-yasnippet (:color blue :hint nil)
       "
                   ^YASnippets^
     --------------------------------------------
       Modes:    Load/Visit:    Actions:

      _g_lobal  _d_irectory    _i_nsert
      _m_inor   _f_ile         _t_ryout
      _e_xtra   _l_ist         _n_ew
                _a_ll
     "
       ("d" yas-load-directory)
       ("e" yas-activate-extra-mode)
       ("i" yas-insert-snippet)
       ("f" yas-visit-snippet-file :color blue)
       ("n" yas-new-snippet)
       ("t" yas-tryout-snippet)
       ("l" yas-describe-tables)
       ("g" yas/global-mode)
       ("m" yas/minor-mode)
       ("a" yas-reload-all)))
   #+end_src

** Honor .editorconfig files
   #+BEGIN_SRC emacs-lisp
     (use-package editorconfig
       :init
       (editorconfig-mode 1))
   #+END_SRC
** Counsel / Ivy / Swiper
   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :diminish ivy-mode
       :init (ivy-mode 1)
       :bind
       (:map ivy-mode-map
       ("C-s" . swiper-isearch)
       ("M-x" . counsel-M-x)
       ("C-x C-f" . counsel-find-file)
       ("C-h f" . counsel-describe-function)
       ("C-h v" . counsel-describe-variable)
       ("C-c u" . counsel-unicode-char)
       ("C-c r" . counsel-rg)
       :map ivy-minibuffer-map
       ("<return>" . ivy-alt-done)
       ("<tab>" . ivy-partial)
       :map org-mode-map
       ("C-c C-j" . counsel-org-goto))
       :config
       (setq enable-recursive-minibuffers t)
       (setq ivy-height 20)
       (setq ivy-use-selectable-prompt t)
       (setq ivy-use-virtual-buffers t)
       (setq ivy-count-format "(%d/%d) ")
       (setq ivy-display-style 'fancy)
       (setq ivy-re-builders-alist
	     '((read-file-name-internal . ivy--regex-fuzzy)
	       (t . ivy--regex-plus)))
       (setq magit-completing-read-function #'ivy-completing-read))
   #+END_SRC

   #+begin_src emacs-lisp
     (use-package ivy-avy
       :after counsel)
   #+end_src


   #+BEGIN_SRC emacs-lisp
   (use-package counsel-projectile
     :bind
     ("C-x p SPC" . counsel-projectile))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package flx)
   #+END_SRC

   #+begin_src emacs-lisp
     (use-package ivy-rich
       :after counsel
       :config
       (ivy-rich-mode 1)
       (setq ivy-format-function #'ivy-format-function-line))
   #+end_src

#+begin_src emacs-lisp
  (use-package ivy-posframe
    :after ivy
    :hook ivy-mode
    :config
    (setq ivy-posframe-display-functions-alist
          '((swiper . nil)
            (t . ivy-posframe-display-at-frame-center))))
#+end_src

*** COMMENT [[https://github.com/masasam/emacs-counsel-tramp][masasam/emacs-counsel-tramp: Tramp ivy interface for ssh and docker and ‎vagrant]]
    #+BEGIN_SRC emacs-lisp
      (use-package counsel-tramp
	:hook
	(counsel-tramp-pre-command-hook . (lambda ()
					    (projectile-mode 0)
					    (editorconfig-mode 0)))
	(counsel-tramp-quit-hook . (lambda ()
				     (projectile-mode 1)
				     (editorconfig-mode 1))))
    #+END_SRC
*** [[https://github.com/raxod502/prescient.el][raxod502/prescient.el: ☄️ Simple but effective sorting and filtering for Emacs.]]
    #+BEGIN_SRC emacs-lisp
      (use-package prescient)
      (use-package ivy-prescient
        :config (ivy-prescient-mode 1))
    #+END_SRC
*** TODO [[http://pragmaticemacs.com/emacs/save-window-layouts-with-ivy-view/][Save window layouts with ivy-view | Pragmatic Emacs]]
*** TODO [[https://github.com/emacs-taskrunner/emacs-taskrunner/blob/master/taskrunner.el][emacs-taskrunner/taskrunner.el]]
** TRAMP
   #+BEGIN_QUOTE
   TRAMP stands for “Transparent Remote (file) Access, Multiple
   Protocol”.  This package provides remote file editing, similar to
   Ange FTP.
   #+END_QUOTE
*** Add handling for TOTP prompt
    #+begin_src emacs-lisp
  (use-package tramp
    :custom
    (tramp-password-prompt-regexp "^.*\\([pP]assword\\|[pP]assphrase\\|Verification code\\).*:? *")
    :config
    (add-to-list 'tramp-connection-properties
                 (list (regexp-quote "krxd.net")
                       "remote-shell" "/bin/bash")))
    #+end_src

** Functions
   By me or collected from awesome people.
*** colorize ansi file
    #+begin_src emacs-lisp
      (defun slumos/ansi-colorize-dwim ()
        "Colorize the region using ansi-color-apply-on-region"
        (interactive "*")
        (if (use-region-p)
            (ansi-color-apply-on-region (region-beginning) (region-end))
          (ansi-color-apply-on-region (point-min) (point-max))))
    #+end_src
*** insert a random password
    #+BEGIN_SRC emacs-lisp
      (defun slumos/insert-random-password ()
	"Generate a random password and insert it at point"
	(interactive)
	(insert
	 (s-chomp
	  (shell-command-to-string "pwgen 32"))))
    #+END_SRC
*** insert-date/time-stamp
    #+BEGIN_SRC emacs-lisp
      (defun slumos/insert-datetime-stamp (&optional with-time)
	"Insert current date (with prefix current time) in ISO8601"
	(interactive "*P")
	(insert (if with-time
		    (format-time-string "%FT%T")
		  (format-time-string "%F"))))
    #+END_SRC
*** show-file-name
#+BEGIN_SRC emacs-lisp
(defun show-file-name ()
  "Show the full path file name in the minibuffer and copy it to the kill ring."
  (interactive)
  (message (buffer-file-name))
  (kill-new (file-truename buffer-file-name))
)
#+END_SRC
*** rename-file-and-buffer
    Another /omg, why wasn't this in Emacs 18/ moment.

    From the really-great http://emacsredux.com/blog/2013/05/04/rename-file-and-buffer/

#+BEGIN_SRC emacs-lisp
  (defun rename-file-and-buffer ()
    "Rename the current buffer and file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (message "Buffer is not visiting a file!")
        (let ((new-name (read-file-name "New name: " filename)))
          (cond
           ((vc-backend filename) (vc-rename-file filename new-name))
           (t
            (rename-file filename new-name t)
            (set-visited-file-name new-name t t)))))))
#+END_SRC
**** TODO replace rename-file-and-buffer with rename-visited-file (Emacs 29)
*** compile-notify

#+BEGIN_SRC emacs-lisp
  (defun slumos/compile-notify (buf status)
    (if (fboundp #'tn-notify) (tn-notify status "Emacs" "Compilation"))
    (message "compile-notify: %s %s" buf status))
  (add-to-list 'compilation-finish-functions #'slumos/compile-notify)
#+END_SRC

— slumos

*** window-toggle-split-direction

https://www.emacswiki.org/emacs/ToggleWindowSplit

#+BEGIN_SRC emacs-lisp
  (defun window-toggle-split-direction ()
    "Switch window split from horizontally to vertically, or vice versa.

  i.e. change right window to bottom, or change bottom window to right."
    (interactive)
    (require 'windmove)
    (let ((done))
      (dolist (dirs '((right . down) (down . right)))
        (unless done
          (let* ((win (selected-window))
                 (nextdir (car dirs))
                 (neighbour-dir (cdr dirs))
                 (next-win (windmove-find-other-window nextdir win))
                 (neighbour1 (windmove-find-other-window neighbour-dir win))
                 (neighbour2 (if next-win (with-selected-window next-win
                                            (windmove-find-other-window neighbour-dir next-win)))))
            ;;(message "win: %s\nnext-win: %s\nneighbour1: %s\nneighbour2:%s" win next-win neighbour1 neighbour2)
            (setq done (and (eq neighbour1 neighbour2)
                            (not (eq (minibuffer-window) next-win))))
            (if done
                (let* ((other-buf (window-buffer next-win)))
                  (delete-window next-win)
                  (if (eq nextdir 'right)
                      (split-window-vertically)
                    (split-window-horizontally))
                  (set-window-buffer (windmove-find-other-window neighbour-dir) other-buf))))))))
#+END_SRC

— [[https://www.emacswiki.org/emacs/BaManzi][BaManzi]]
** browse-at-remote
   #+BEGIN_SRC emacs-lisp
   (use-package browse-at-remote)
   #+END_SRC
** [[https://github.com/storvik/emacs-lastpass][storvik/emacs-lastpass: Emacs LastPass command wrapper.]]
   #+BEGIN_SRC emacs-lisp
        (use-package lastpass
          :config
          (setq lastpass-user user-mail-address)
          (setq lastpass-multifactor-use-passcode nil)
          (lastpass-auth-source-enable)
          :hook
          (lastpass-logged-in-hook . #'lastpass-auth-source-enable))

   #+END_SRC
** Edit the web with +Atom+ Emacs
   #+BEGIN_SRC emacs-lisp
     (use-package atomic-chrome
       :init
       (atomic-chrome-start-server))
   #+END_SRC
** Edit S3 files directly
   [[https://github.com/mattusifer/s3ed][mattusifer/s3ed: An interface to s3 from emacs]]
   #+begin_src emacs-lisp
   (use-package s3ed)
   #+end_src
** COMMENT AWSCLI Completion
   #+begin_src emacs-lisp
     (use-package awscli-capf
       :commands (awscli-capf-add)
       :hook (org-mode . awscli-capf-add))
   #+end_src
** TRYING Folding for YAML: [[https://gitlab.com/emacs-stuff/indent-tools/][indent-tools]]

   Obviously this does a lot more but folding YAML is why I'm looking
   at it.
   #+BEGIN_SRC emacs-lisp
     (use-package indent-tools
       :bind ("C-c >" . indent-tools-hydra/body))
   #+END_SRC
** [[https://github.com/politza/pdf-tools][PDF-Tools: Emacs support library for PDF files.]]
   #+begin_src emacs-lisp
     (leaf pdf-tools
       :package t
       :config
       (pdf-tools-install)
       :bind
       'pdf-view-mode-map
       ("\\" . hydra-pdf-tools/body)
       ("<s-spc>" .  pdf-view-scroll-down-or-next-page)
       ("g"  . pdf-view-first-page)
       ("G"  . pdf-view-last-page)
       ("l"  . image-forward-hscroll)
       ("h"  . image-backward-hscroll)
       ("j"  . pdf-view-next-page)
       ("k"  . pdf-view-previous-page)
       ("e"  . pdf-view-goto-page)
       ("u"  . pdf-view-revert-buffer)
       ("al" . pdf-annot-list-annotations)
       ("ad" . pdf-annot-delete)
       ("aa" . pdf-annot-attachment-dired)
       ("am" . pdf-annot-add-markup-annotation)
       ("at" . pdf-annot-add-text-annotation)
       ("y"  . pdf-view-kill-ring-save)
       ("i"  . pdf-misc-display-metadata)
       ("s"  . pdf-occur)
       ("b"  . pdf-view-set-slice-from-bounding-box)
       ("r"  . pdf-view-reset-slice)
       :hydra
       (hydra-pdf-tools
	(:color blue :hint nil)
	"
									   ╭───────────┐
	    Move  History   Scale/Fit     Annotations  Search/Link    Do   │ PDF Tools │
	╭──────────────────────────────────────────────────────────────────┴───────────╯
	      ^^_g_^^      _B_    ^↧^    _+_    ^ ^     [_al_] list    [_s_] search    [_u_] revert buffer
	      ^^^↑^^^      ^↑^    _H_    ^↑^  ↦ _W_ ↤   [_am_] markup  [_o_] outline   [_i_] info
	      ^^_p_^^      ^ ^    ^↥^    _0_    ^ ^     [_at_] text    [_F_] link      [_d_] dark mode
	      ^^^↑^^^      ^↓^  ╭─^─^─┐  ^↓^  ╭─^ ^─┐   [_ad_] delete  [_f_] search link
	 _h_ ←pag_e_→ _l_  _N_  │ _P_ │  _-_    _b_     [_aa_] dired
	      ^^^↓^^^      ^ ^  ╰─^─^─╯  ^ ^  ╰─^ ^─╯   [_y_]  yank
	      ^^_n_^^      ^ ^  _r_eset slice box
	      ^^^↓^^^
	      ^^_G_^^
	--------------------------------------------------------------------------------
	     "
	("\\" hydra-master/body "back")
	("<ESC>" nil "quit")
	("al" pdf-annot-list-annotations)
	("ad" pdf-annot-delete)
	("aa" pdf-annot-attachment-dired)
	("am" pdf-annot-add-markup-annotation)
	("at" pdf-annot-add-text-annotation)
	("y"  pdf-view-kill-ring-save)
	("+" pdf-view-enlarge :color red)
	("-" pdf-view-shrink :color red)
	("0" pdf-view-scale-reset)
	("H" pdf-view-fit-height-to-window)
	("W" pdf-view-fit-width-to-window)
	("P" pdf-view-fit-page-to-window)
	("n" pdf-view-next-page-command :color red)
	("p" pdf-view-previous-page-command :color red)
	("d" pdf-view-dark-minor-mode)
	("b" pdf-view-set-slice-from-bounding-box)
	("r" pdf-view-reset-slice)
	("g" pdf-view-first-page)
	("G" pdf-view-last-page)
	("e" pdf-view-goto-page)
	("o" pdf-outline)
	("s" pdf-occur)
	("i" pdf-misc-display-metadata)
	("u" pdf-view-revert-buffer)
	("F" pdf-links-action-perfom)
	("f" pdf-links-isearch-link)
	("B" pdf-history-backward :color red)
	("N" pdf-history-forward :color red)
	("l" image-forward-hscroll :color red)
	("h" image-backward-hscroll :color red)))
   #+end_src
** smerge hydra from [[https://github.com/alphapapa/unpackaged.el#smerge-mode][alphapapa/unpackaged.el: A collection of useful Emacs Lisp code that isn't substantial enough to be packaged]]
   #+begin_src emacs-lisp
     (use-package smerge-mode
       :after hydra
       :config
       (defhydra unpackaged/smerge-hydra
         (:color pink :hint nil :post (smerge-auto-leave))
         "
     ^Move^       ^Keep^               ^Diff^                 ^Other^
     ^^-----------^^-------------------^^---------------------^^-------
     _n_ext       _b_ase               _<_: upper/base        _C_ombine
     _p_rev       _u_pper              _=_: upper/lower       _r_esolve
     ^^           _l_ower              _>_: base/lower        _k_ill current
     ^^           _a_ll                _R_efine
     ^^           _RET_: current       _E_diff
     "
         ("n" smerge-next)
         ("p" smerge-prev)
         ("b" smerge-keep-base)
         ("u" smerge-keep-upper)
         ("l" smerge-keep-lower)
         ("a" smerge-keep-all)
         ("RET" smerge-keep-current)
         ("\C-m" smerge-keep-current)
         ("<" smerge-diff-base-upper)
         ("=" smerge-diff-upper-lower)
         (">" smerge-diff-base-lower)
         ("R" smerge-refine)
         ("E" smerge-ediff)
         ("C" smerge-combine-with-next)
         ("r" smerge-resolve)
         ("k" smerge-kill-current)
         ("ZZ" (lambda ()
                 (interactive)
                 (save-buffer)
                 (bury-buffer))
          "Save and bury buffer" :color blue)
         ("q" nil "cancel" :color blue))
       :hook (magit-diff-visit-file . (lambda ()
                                        (when smerge-mode
                                          (unpackaged/smerge-hydra/body)))))
   #+end_src
** [[https://github.com/pashky/restclient.el][pashky/restclient.el: HTTP REST client tool for emacs]]
   [[https://www.youtube.com/watch?v=fTvQTMOGJaw][(26) Emacs Rocks! Episode 15: restclient-mode - YouTube]]
   #+BEGIN_SRC emacs-lisp
     (use-package restclient)
     (use-package restclient-jq)
     (use-package ob-restclient
       :config
       (org-babel-do-load-languages
        'org-babel-load-languages
        '((restclient . t)
          (python . t))))
   #+END_SRC
** [[https://github.com/mihaiolteanu/lastfm.el][mihaiolteanu/lastfm.el: Last.fm API for Emacs Lisp]]
   #+begin_src emacs-lisp
     (leaf lastfm)
   #+end_src
** [[https://github.com/mihaiolteanu/vuiet][mihaiolteanu/vuiet: The music player and explorer for Emacs]]
   #+begin_src emacs-lisp

   #+end_src
** Spelling
   #+begin_src emacs-lisp
     (dolist (hook '(text-mode))
       (add-hook hook (lambda () (flyspell-mode 1))))
     (dolist (hook '(prog-mode))
       (add-hook hook (lambda () (flyspell-prog-mode))))
   #+end_src
*** [[https://blog.binchen.org/posts/what-s-the-best-spell-check-set-up-in-emacs/][What's the best spell check setup in emacs | Chen's blog]]
   #+begin_src emacs-lisp
     (cond
      ((executable-find "hunspell")
       (setq ispell-program-name "hunspell")
       (setq ispell-local-dictionary "en_US")
       (setq ispell-local-dictionary-alist
             ;; Please note the list `("-d" "en_US")` contains ACTUAL parameters passed to hunspell
             ;; You could use `("-d" "en_US,en_US-med")` to check with multiple dictionaries
             '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)))
       (setq ispell-really-hunspell t)

       ;; new variable `ispell-hunspell-dictionary-alist' is defined in Emacs
       ;; If it's nil, Emacs tries to automatically set up the dictionaries.
       (when (boundp 'ispell-hunspell-dictionary-alist)
         (setq ispell-hunspell-dictionary-alist ispell-local-dictionary-alist)))

      ((executable-find "aspell")
       (setq ispell-program-name "aspell")
       ;; Please note ispell-extra-args contains ACTUAL parameters passed to aspell
       (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US"))
       (setq ispell-really-aspell t)))
   #+end_src
** TODO [[https://github.com/emacs-languagetool/flycheck-languagetool][flycheck-languagetool]]
** Projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :config
      (projectile-mode 1)
      :custom
      (projectile-file-exists-local-cache-expire 300))
  #+END_SRC
* Context-specific
** Work/Life Balance?
   #+BEGIN_SRC emacs-lisp
     (let* ((local-config-name (pcase (system-name)
                                 ("argenta.local" "personal.org")
                                 ("steven.lan" "personal.org")
                                 ("Steven-Lumos-VXXQV3F32R.local" "work.org")))
            (local-config (expand-file-name local-config-name user-emacs-directory)))
       (message "work/life loading %s on %s" local-config (system-name))
       (if (file-exists-p local-config)
           (org-babel-load-file local-config)))
   #+END_SRC
* Notes
** Locale
#+begin_src sh :results output replace raw :wrap src text
  locale
#+end_src

#+RESULTS:
#+begin_src text
LANG="en_US.UTF-8"
LC_COLLATE="en_US.UTF-8"
LC_CTYPE="en_US.UTF-8"
LC_MESSAGES="en_US.UTF-8"
LC_MONETARY="en_US.UTF-8"
LC_NUMERIC="en_US.UTF-8"
LC_TIME="en_US.UTF-8"
LC_ALL=
#+end_src

** TODO COMMENT [[https://lists.gnu.org/archive/html/emacs-orgmode/2014-04/msg00874.html][[O] Cool trick on how to eval bash/zsh babel blocks in emacs]]
   #+begin_src emacs-lisp
   (setq explicit-shell-file-name "/usr/local/bin/zsh")
   #+end_src


   #+begin_src emacs-lisp
     (defadvice org-babel-execute:sh (around sacha activate)
       (if (assoc-default :term (ad-get-arg 1) nil)
         (let ((buffer (make-term "babel" (or explicit-shell-file-name (getenv "ESHELL") (getenv "SHELL"))))
           (with-current-buffer buffer
             (insert (org-babel-expand-body:generic
                  body params (org-babel-variable-assignments:sh params)))
             (term-send-input))
     (pop-to-buffer buffer))
         ad-do-it))
   #+end_src

** TODO rcirc [[https://github.com/stevensurgnier/.emacs.d/blob/master/user/init/init-rcirc.el][.emacs.d/init-rcirc.el at master · stevensurgnier/.emacs.d]]
** TODO [[https://github.com/kaushalmodi/.emacs.d/commit/6beb2156b0d6181b0881cc714de1780129bb038f][Use rg (ripgrep) for projectile file caching · kaushalmodi/.emacs.d@6beb215]]
** TODO Check out [[https://nhoffman.github.io/.emacs.d/][init.el for Noah Hoffman]]
** TODO Colorize ob-shell ANSI output in org buffer?
** Getting customized vars to copy to use-package blocks
   #+begin_src emacs-lisp :results value table drawer replace :tangle no :wrap src text
     (let ((found nil))
           (mapatoms (lambda (sym)
                       (let ((val (get sym 'customized-value))
                             (comment (get sym 'customized-variable-comment)))
                         (if (car val) (push (list sym val comment) found)))))
           found)
   #+end_src

   #+RESULTS:
   #+begin_src text
   | debug-on-error                         | (t)                | nil                                                                          |
   | lsp-log-io                             | (t)                | Customized with leaf in `lsp-ui' block at `/Users/slumos/.emacs.d/config.el' |
   | leaf-defaults                          | ('(:ensure t))     | Customized with leaf in `leaf' block at `/Users/slumos/.emacs.d/config.el'   |
   | lsp-log-max                            | (2000)             | Customized with leaf in `lsp-ui' block at `/Users/slumos/.emacs.d/config.el' |
   | lsp-auto-guess-root                    | (t)                | Customized with leaf in `lsp-ui' block at `/Users/slumos/.emacs.d/config.el' |
   | lsp-enable-completion-at-point         | (t)                | Customized with leaf in `lsp-ui' block at `/Users/slumos/.emacs.d/config.el' |
   | lsp-ui-doc-enable                      | (t)                | Customized with leaf in `lsp-ui' block at `/Users/slumos/.emacs.d/config.el' |
   | org-ql-search-directories-files-regexp | (\.org\(_done\)?\') | Customized with leaf in `org-ql' block at `/Users/slumos/.emacs.d/config.el' |
   | el-get-git-shallow-clone               | (t)                | Customized with leaf in `el-get' block at `/Users/slumos/.emacs.d/config.el' |
   #+end_src
