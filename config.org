# -*- mode: org; -*-
#+DESCRIPTION: My nice =~/.config/emacs configuration.
#+KEYWORDS:  emacs org
#+LANGUAGE:  en
#+STARTUP: entitiespretty
#+TODO: TODO(t) TRYING(r) BROKEN(t) SKIP(s) | DONE(d)
#+FILETAGS: :emacs:config:
#+CATEGORY: EMACS
#+PROPERTY: header-args    :results silent

* Introduction
  I know, I'm supposed to only care about writing code and not
  configuring editors.
** Philosophy
   1. Emacs defaults except recent terrible changes. Looking at you
      (transient-mark-mode t)
   2. The Emacs way is fine
      * custom hasn't been really hate-worthy for ages—oh, you hate
        custom? Now who cares more about writing code than configuring
        editors?
      * the new package system is just fine thanks.
   3. I went to the trouble to acquire [[http://www.fsd.it/fonts/pragmatapro.htm][Pragmata Pro]]—because it's awesome,
      but more than that—because I like Unicode enough to buy a
      programming font with decent Unicode support. I'm hardly going to
      do that and then *not* use Unicode in my editor config.
* Startup
** Daemon
   #+BEGIN_SRC emacs-lisp
   (setq server-use-tcp t)
   (server-force-delete) ; attempt to work around segfault bug
   (server-start)
   #+END_SRC
** Handling of BROKEN/SKIP states (should not be tangled)
   I just learned about COMMENT status (=C-c ;=) and decided to punt
   on this for now while trying that instead.
** Initial buffers (=*scratch*=)
   #+BEGIN_SRC emacs-lisp
     (setq initial-scratch-message nil)
     (setq inhibit-startup-screen t)
   #+END_SRC
* Basics
** Emacs Packages
   #+begin_src emacs-lisp
     (custom-set-variables
      '(package-archives
        '(("org"   .  "https://orgmode.org/elpa/")
          ("melpa" .  "https://melpa.org/packages/")
          ("elpy"	.  "https://jorgenschaefer.github.io/packages/")
          ("gnu"   .  "https://elpa.gnu.org/packages/")))
      '(package-archive-priorities
        '(("org"	.  100)
          ("elpy"	.  100)
          ("melpa" .  50)
          ("gnu"	.  10))))
     (package-initialize)
   #+end_src
*** =use-package=
    John Wiegley is an Emacs badass. I am not even kidding.

    #+begin_src emacs-lisp
      (unless (package-installed-p 'use-package)
	(package-refresh-contents)
	(package-install 'use-package))
    #+end_src


    #+BEGIN_SRC emacs-lisp
      (setq use-package-always-defer nil)
      (setq use-package-always-ensure t)
      (setq use-package-compute-statistics t)
      (setq use-package-ignore-unknown-keywords t)
      (setq use-package-minimum-reported-time 0)
      (setq use-package-verbose t)
    #+END_SRC

    Adds the =:quelpa= keyword for extra laziness when installing sutff outside
    of package archives.
    #+begin_src emacs-lisp
      (use-package quelpa :demand t)
      (use-package quelpa-use-package :demand t)
    #+end_src
*** TRYING [[https://github.com/conao3/leaf.el][conao3/leaf.el: Support your setting init.el like use-package]]
    #+begin_src emacs-lisp
      (prog1 "prepare leaf"
        (prog1 "leaf"
          (unless (package-installed-p 'leaf)
            (unless (assoc 'leaf package-archive-contents)
              (package-refresh-contents))
            (condition-case err
                (package-install 'leaf)
              (error
               (package-refresh-contents)       ; renew local melpa cache if fail
               (package-install 'leaf))))

          (leaf leaf-keywords
                :ensure t
                :config (leaf-keywords-init))

          (leaf leaf
            :custom ((leaf-defaults . '(:ensure t)))))

        (prog1 "optional packages for leaf-keywords"
          ;; optional packages if you want to use :hydra, :el-get,,,
          (leaf hydra :ensure t)
          (leaf el-get :ensure t
                :custom ((el-get-git-shallow-clone  . t)))))
    #+end_src

** Religion
*** Canon
    Rollback sacrilege committed in recent years (decades...)

    I use C-SPC C-SPC frequently to get transient mark and I'm fine
    with that.

    #+BEGIN_SRC emacs-lisp
      (custom-set-variables
       '(indent-tabs-mode nil)
       '(transient-mark-mode nil))
    #+END_SRC
*** Buckeys
    #+BEGIN_SRC emacs-lisp
      (case window-system
	('ns
         (setq mac-command-modifier 'meta) ; That's right.
         (setq mac-option-modifier 'super)
         (setq ns-function-modifier 'hyper)))
    #+END_SRC
*** Noise. Make less.
    The advent of the tool bar — or was it fringe? ugh... — was great
    for me, because it was offensive enough to bother learning how to
    turn it off.  Once I was in a turning off mode, I realized that
    the only thing I actually used the scroll bar for is telling how
    far into a buffer I was, and why should I even care about that?

    There's no point to turning off the menu bar in OSX. Yay for Lion
    Full Screen though!

    #+BEGIN_SRC emacs-lisp
      (fringe-mode 0)
      (tool-bar-mode -1)
      (scroll-bar-mode -1)
      (unless (memq window-system '(mac ns))
        (menu-bar-mode -1))
      (setq inhibit-startup-screen t)
    #+END_SRC
** Dedicated directory for backup files
   XDG WHAT
   #+BEGIN_SRC emacs-lisp
   (require 'xdg)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (defconst *backup-dir* (expand-file-name "emacs/backups" (xdg-data-home)))
     (setq backup-directory-alist (cons (cons "." *backup-dir*) nil))
   #+END_SRC
** Import Environment
   #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell
       :demand t
       :config
       (setq shell-file-name "/usr/local/bin/zsh")
       (setq exec-path-from-shell-arguments '("-l" "-i"))
       (setq exec-path-from-shell-check-startup-files nil)
       (exec-path-from-shell-initialize)
       (exec-path-from-shell-copy-envs
        '("AWS_CONFIG_FILE"
          "EMAIL"
          "LANG"
          "XDG_CACHE_HOME"
          "XDG_CONFIG_DIRS"
          "XDG_CONFIG_HOME"
          "XDG_DATA_DIRS"
          "XDG_DATA_HOME"
          "XDG_RUNTIME_DIR")))
   #+END_SRC
** Tuning
   Who remembers Eight Megs And Constantly Swapping?
   #+BEGIN_SRC emacs-lisp
   (setq gc-cons-threshold (* 100 1024 1024))
   #+END_SRC
** Keys
   #+begin_src emacs-lisp
     (global-set-key (kbd "<C-backspace>") #'delete-indentation)
   #+end_src
* Preferences
** Utf-8
   #+BEGIN_SRC emacs-lisp
   (prefer-coding-system 'utf-8)
   #+END_SRC
** Fonts
    #+begin_src emacs-lisp
      (custom-set-variables
       '(face-font-family-alternatives
	 (quote
	  (("Monospace" "PragmataPro" "courier" "fixed")
	   ("Monospace Serif" "PragmataPro" "Courier 10 Pitch" "Consolas" "Courier Std" "FreeMono" "Nimbus Mono L" "courier" "fixed")
	   ("courier" "CMU Typewriter Text" "fixed")
	   ("Sans Serif" "GillSans" "helv" "helvetica" "arial" "fixed")
	   ("helv" "helvetica" "arial" "fixed")))))
    #+end_src
*** PragmataPro
    #+BEGIN_SRC emacs-lisp
      (set-frame-font "PragmataPro-14")
    #+END_SRC
*** Emoji 😂
    #+begin_src emacs-lisp
      (if (version< "27.0" emacs-version)
          (set-fontset-font
           "fontset-default" 'unicode "Apple Color Emoji" nil 'prepend)
        (set-fontset-font
         t 'symbol (font-spec :family "Apple Color Emoji") nil 'prepend))
    #+end_src
** Themes
*** COMMENT symx
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package smyx-theme
	:config
	(set-face-attribute 'org-todo nil :box nil)
	(set-face-attribute 'org-done nil :box nil))
    #+END_SRC
*** nordless
    #+BEGIN_SRC emacs-lisp
      (use-package nordless-theme
        :config (load-theme 'nordless t))
    #+END_SRC
*** COMMENT gruvbox
    #+begin_src emacs-lisp
      (use-package gruvbox-theme
	:config
	(load-theme 'gruvbox-dark-soft t))
    #+end_src
*** COMMENT parchment
    #+begin_src emacs-lisp
      (use-package parchment-theme
	:config
	(load-theme 'parchment t))
    #+end_src
*** COMMENT tao-yin
    #+begin_src emacs-lisp
    (use-package tao-theme
      :config
      (load-theme 'tao-yin t))
    #+end_src

** Code
   #+BEGIN_SRC emacs-lisp
   (show-paren-mode t)
   #+END_SRC
** Mode Line
*** Deploy fanciness
**** TRYING Doom Mode Line
     #+begin_src emacs-lisp
       (use-package doom-modeline
	 :hook
	 (after-init . doom-modeline-init)
	 :custom
	 (doom-modeline-icon t "Use all-the-icons"))
       #+end_src
**** SKIP Spaceline
     #+BEGIN_SRC emacs-lisp :tangle no
       (use-package spaceline-config
	 :ensure spaceline
	 :config (spaceline-spacemacs-theme))
     #+END_SRC
**** All The Icons!
     I'm not bothering to automate this now: On a new system, you gotta =M-x all-the-icons-install-fonts=
     #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons)
     #+END_SRC

     A bit too noisy for me...
     #+BEGIN_SRC emacs-lisp :tangle no
       (use-package all-the-icons-ivy
         :init (all-the-icons-ivy-setup))
     #+END_SRC
**** [[https://github.com/domtronn/spaceline-all-the-icons.el][domtronn/spaceline-all-the-icons.el: A Spaceline Mode Line theme using All The Icons for Emacs]]
     #+BEGIN_SRC emacs-lisp :tangle no
       (use-package spaceline-all-the-icons
	 :after spaceline
	 :config
	 (setq spaceline-all-the-icons-separator-type 'arrow)
	 (setq spaceline-all-the-icons-icon-set-modified 'circle)
	 (spaceline-all-the-icons-theme)
	 (spaceline-all-the-icons--setup-git-ahead)
	 (spaceline-all-the-icons--setup-paradox)
	 (spaceline-toggle-all-the-icons-narrowed-on))
     #+END_SRC
**** Color in comint
     #+BEGIN_SRC emacs-lisp
       (use-package xterm-color
	 :init
	 (setq comint-output-filter-functions (remove #'ansi-color-process-output comint-output-filter-functions))
	 (add-hook 'comint-preoutput-filter-functions #'xterm-color-filter))
     #+END_SRC
** auto-revert
   Really want to set =auto-revert-check-vc-info= to =t=, but =nil= for
   now because I need to use TRAMP which conflicts with it...
   #+BEGIN_SRC emacs-lisp
     (setq auto-revert-check-vc-info nil)
     (global-auto-revert-mode)
   #+END_SRC
** Me
   #+BEGIN_SRC emacs-lisp
   (setq user-mail-address (or (getenv "EMAIL") "steven@lumos.us"))
   #+END_SRC
** Misc
   #+BEGIN_SRC emacs-lisp
     (setq vc-follow-symlinks t)
   #+END_SRC
* Helpers
** AWSCLI Completion
   #+begin_src emacs-lisp
     (use-package awscli-capf
       :commands (awscli-capf-add)
       :hook (org-mode . awscli-capf-add))
   #+end_src
** TODO COMMENT [[https://jblevins.org/projects/deft/][Deft for Emacs]]
   Need to look deeper, but I think it only takes you to the file
   level? I use few large org files rather than many small ones so not
   sure this helps me.
   #+begin_src emacs-lisp
     (leaf deft
       :commands (deft)
       :setq
       (deft-directory . "~/Google Drive/Notes")
       (deft-recursive . t))
   #+end_src


** Hydra
   #+begin_src emacs-lisp
     (use-package hydra)
   #+end_src

   #+begin_src emacs-lisp
     (use-package use-package-hydra)
   #+end_src

   #+begin_src emacs-lisp
     (defun invoke-hydra ()
       (interactive)
       (counsel-M-x "hydra-.*/body "))
     (global-set-key (kbd "C-c h") #'invoke-hydra)
   #+end_src

** COMMENT aggressive-indent
   #+begin_src emacs-lisp
     (use-package aggressive-indent
       :defer t
       :commands (aggressive-indent-mode)
       :quelpa (aggressive-indent
		:fetcher github
		:repo "Malabarba/aggressive-indent-mode")
       :hook (ruby-mode . aggressive-indent-mode))
   #+end_src

** Automagic make scripts executable
   #+BEGIN_SRC emacs-lisp
     (custom-set-variables '(executable-prefix-env t))
   #+END_SRC
** Better packages ux
   #+BEGIN_SRC emacs-lisp
     (leaf paradox
       :require t
       :commands
       list-packages
       paradox-list-packages
       :init
       (paradox-enable)
       (add-hook 'paradox-menu-mode-hook #'hl-line-mode))
   #+END_SRC
** SKIP COMMENT Better Zoom
   _Seems to have stopped working in 26_.
   The =zoom-frm= package improves on =text-scale-adjust= by providing
   functions for changing size across all buffers.

   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package zoom-frm
       :ensure nil
       :bind (("C-c C-+" . zoom-in/out)
              ("C-c C--" . zoom-in/out)
              ("C-c C-0" . zoom-in/out)
              ("C-c C-=" . zoom-in/out)))
   #+END_SRC
** Font scale for all frames
   #+BEGIN_SRC emacs-lisp
     (use-package default-text-scale
       :init (default-text-scale-mode))
   #+END_SRC
** Copy region formatted for various markup systems
   #+BEGIN_SRC emacs-lisp
   (use-package copy-as-format)
   #+END_SRC
** Jumping
*** [[https://github.com/abo-abo/ace-link][abo-abo/ace-link: Quickly follow links in Emacs]]
    #+BEGIN_SRC emacs-lisp
      (use-package ace-link
	:config
	(ace-link-setup-default)
	:bind
	(:map org-mode-map
	("M-o" . ace-link-org))
	(:map Info-mode-map
	("o" . ace-link-info)))
    #+END_SRC
*** avy
    #+BEGIN_QUOTE
      "If you're familiar with the popular `ace-jump-mode' package, this
      package does all that and more, without the implementation
      headache."
    #+END_QUOTE
    #+BEGIN_SRC emacs-lisp
	(use-package avy
          :bind
          ("C-." . avy-goto-char)
          ("M-g M-g" . avy-goto-line))
    #+END_SRC
*** [[https://github.com/jacktasia/dumb-jump][jacktasia/dumb-jump: an Emacs "jump to definition" package]]
    #+BEGIN_SRC emacs-lisp
      (use-package dumb-jump
	:bind (("M-g o" . dumb-jump-go-other-window)
	       ("M-g j" . dumb-jump-go)
	       ("M-g i" . dumb-jump-go-prompt)
	       ("M-g x" . dumb-jump-go-prefer-external)
	       ("M-g z" . dumb-jump-go-prefer-external-other-window))
	:config (setq dumb-jump-selector 'ivy))
    #+END_SRC
** multiple-cursors
   [[http://emacsrocks.com/e13.html][Emacs Rocks! Episode 13: multiple-cursors]]
   [[http://endlessparentheses.com/multiple-cursors-keybinds.html][Multiple Cursors keybinds · Endless Parentheses]]
   [[http://pages.sachachua.com/.emacs.d/Sacha.html#org0dfa59e][Sacha Chua's Emacs configuration]] (where I stole the keymap)

   #+begin_src emacs-lisp
     (leaf multiple-cursors
       :bind ("C-c m" . hydra-multiple-cursors/body)
       :hydra (hydra-multiple-cursors
	       (:hint nil)
	       "
		    ^Up^            ^Down^        ^Other^
	       ----------------------------------------------
	       [_p_]   Prev    [_n_]   Next    [_l_] Edit lines
	       [_P_]   Skip    [_N_]   Skip    [_a_] Mark all
	       [_M-p_] Unmark  [_M-n_] Unmark  [_r_] Mark by regexp
	       ^ ^             ^ ^             [_q_] Quit
	       "
	       ("l" mc/edit-lines :exit t)
	       ("a" mc/mark-all-like-this :exit t)
	       ("n" mc/mark-next-like-this)
	       ("N" mc/skip-to-next-like-this)
	       ("M-n" mc/unmark-next-like-this)
	       ("p" mc/mark-previous-like-this)
	       ("P" mc/skip-to-previous-like-this)
	       ("M-p" mc/unmark-previous-like-this)
	       ("r" mc/mark-all-in-region-regexp :exit t)
	       ("q" nil)))
   #+end_src
** which-key: Cool cheat-sheet for bound keys
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :config (which-key-mode))
   #+END_SRC
** undo-tree
   [[http://pragmaticemacs.com/emacs/advanced-undoredo-with-undo-tree/][Advanced undo/redo with undo-tree | Pragmatic Emacs]]
   [[http://www.dr-qubit.org/undo-tree/undo-tree.el][www.dr-qubit.org/undo-tree/undo-tree.el]]
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :bind
       ("C-x u" . undo-tree-visualize)
       :config
       (setq undo-tree-visualizer-timestamps t)
       (global-undo-tree-mode 1))
   #+END_SRC
** WS Butler
   This cleans up trailing whitespace only on lines I edited. Briliant!
   #+BEGIN_SRC emacs-lisp
     (use-package ws-butler
       :config
       (ws-butler-global-mode t))
   #+END_SRC
** yasnippet
   #+begin_src emacs-lisp
     (use-package yasnippet
       :commands (yas-minor-mode)
       :hook (org-mode . yas-minor-mode)
       :config
       (yas-reload-all)
       :custom
       (yas-snippet-dirs (list (expand-file-name "snippets" user-emacs-directory))))
   #+end_src

   #+begin_src emacs-lisp :tangle no
     (leaf yasnippet
       :require t
       :commands (yas-minor-mode)
       :hook (org-mode . yas-minor-mode)
       :custom
       ((yas-snippet-dirs . (expand-file-name "snippets" user-emacs-directory)))
       :hydra
       (hydra-yasnippet (:color blue :hint nil)
       "
                   ^YASnippets^
     --------------------------------------------
       Modes:    Load/Visit:    Actions:

      _g_lobal  _d_irectory    _i_nsert
      _m_inor   _f_ile         _t_ryout
      _e_xtra   _l_ist         _n_ew
                _a_ll
     "
       ("d" yas-load-directory)
       ("e" yas-activate-extra-mode)
       ("i" yas-insert-snippet)
       ("f" yas-visit-snippet-file :color blue)
       ("n" yas-new-snippet)
       ("t" yas-tryout-snippet)
       ("l" yas-describe-tables)
       ("g" yas/global-mode)
       ("m" yas/minor-mode)
       ("a" yas-reload-all)))
   #+end_src

** Honor .editorconfig files
   #+BEGIN_SRC emacs-lisp
     (use-package editorconfig
       :init
       (editorconfig-mode 1))
   #+END_SRC
** Counsel / Ivy / Swiper
   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :diminish ivy-mode
       :init (ivy-mode 1)
       :bind
       (:map ivy-mode-map
       ("C-s" . swiper-isearch)
       ("M-x" . counsel-M-x)
       ("C-x C-f" . counsel-find-file)
       ("<f1> f" . counsel-describe-function)
       ("<f1> v" . counsel-describe-variable)
       ("C-c u" . counsel-unicode-char)
       ("C-c r" . counsel-rg)
       :map ivy-minibuffer-map
       ("<return>" . ivy-alt-done)
       ("<tab>" . ivy-partial)
       :map org-mode-map
       ("C-c C-j" . counsel-org-goto))
       :config
       (setq enable-recursive-minibuffers t)
       (setq ivy-height 20)
       (setq ivy-use-selectable-prompt t)
       (setq ivy-use-virtual-buffers t)
       (setq ivy-count-format "(%d/%d) ")
       (setq ivy-display-style 'fancy)
       (setq ivy-re-builders-alist
	     '((read-file-name-internal . ivy--regex-fuzzy)
	       (t . ivy--regex-plus)))
       (setq magit-completing-read-function #'ivy-completing-read))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
   (use-package counsel-projectile
     :bind
     ("C-x p SPC" . counsel-projectile))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package flx)
   #+END_SRC

   #+begin_src emacs-lisp
     (use-package ivy-rich
       :after counsel
       :config
       (ivy-rich-mode 1)
       (setq ivy-format-function #'ivy-format-function-line))
   #+end_src

*** [[https://github.com/masasam/emacs-counsel-tramp][masasam/emacs-counsel-tramp: Tramp ivy interface for ssh and docker and ‎vagrant]]
    #+BEGIN_SRC emacs-lisp
      (use-package counsel-tramp
	:hook
	(counsel-tramp-pre-command-hook . (lambda ()
					    (projectile-mode 0)
					    (editorconfig-mode 0)))
	(counsel-tramp-quit-hook . (lambda ()
				     (projectile-mode 1)
				     (editorconfig-mode 1))))
    #+END_SRC
*** [[https://github.com/raxod502/prescient.el][raxod502/prescient.el: ☄️ Simple but effective sorting and filtering for Emacs.]]
    #+BEGIN_SRC emacs-lisp
    (use-package ivy-prescient
      :init
      (ivy-prescient-mode))
    #+END_SRC
*** TODO [[http://pragmaticemacs.com/emacs/save-window-layouts-with-ivy-view/][Save window layouts with ivy-view | Pragmatic Emacs]]
*** TODO [[https://github.com/emacs-taskrunner/emacs-taskrunner/blob/master/taskrunner.el][emacs-taskrunner/taskrunner.el]]
** TRAMP
   #+BEGIN_QUOTE
   TRAMP stands for “Transparent Remote (file) Access, Multiple
   Protocol”.  This package provides remote file editing, similar to
   Ange FTP.
   #+END_QUOTE
*** TRAMP for Vagrant
    #+BEGIN_SRC emacs-lisp
      (use-package vagrant-tramp
	:init (vagrant-tramp-add-method))
    #+END_SRC
** Functions
   By me or collected from awesome people.
*** colorize ansi file
    #+begin_src emacs-lisp
      (defun slumos/ansi-colorize-dwim ()
        "Colorize the region using ansi-color-apply-on-region"
        (interactive "*")
        (if (use-region-p)
            (ansi-color-apply-on-region (region-beginning) (region-end))
          (ansi-color-apply-on-region (point-min) (point-max))))
    #+end_src

*** insert a random password
    #+BEGIN_SRC emacs-lisp
      (defun slumos/insert-random-password ()
	"Generate a random password and insert it at point"
	(interactive)
	(insert
	 (s-chomp
	  (shell-command-to-string "pwgen 32"))))
    #+END_SRC
*** insert-date/time-stamp
    #+BEGIN_SRC emacs-lisp
      (defun slumos/insert-datetime-stamp (&optional with-time)
	"Insert current date (with prefix current time) in ISO8601"
	(interactive "*P")
	(insert (if with-time
		    (format-time-string "%FT%T")
		  (format-time-string "%F"))))
    #+END_SRC
*** show-file-name
#+BEGIN_SRC emacs-lisp
(defun show-file-name ()
  "Show the full path file name in the minibuffer and copy it to the kill ring."
  (interactive)
  (message (buffer-file-name))
  (kill-new (file-truename buffer-file-name))
)
#+END_SRC

*** rename-file-and-buffer
Another /omg, why wasn't this in Emacs 18/ moment.

From the really-great http://emacsredux.com/blog/2013/05/04/rename-file-and-buffer/

#+BEGIN_SRC emacs-lisp
  (defun rename-file-and-buffer ()
    "Rename the current buffer and file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (message "Buffer is not visiting a file!")
        (let ((new-name (read-file-name "New name: " filename)))
          (cond
           ((vc-backend filename) (vc-rename-file filename new-name))
           (t
            (rename-file filename new-name t)
            (set-visited-file-name new-name t t)))))))
#+END_SRC

*** compile-notify

#+BEGIN_SRC emacs-lisp
  (defun slumos/compile-notify (buf status)
    (if (fboundp #'tn-notify) (tn-notify status "Emacs" "Compilation"))
    (message "compile-notify: %s %s" buf status))
  (add-to-list 'compilation-finish-functions #'slumos/compile-notify)
#+END_SRC

— slumos

*** window-toggle-split-direction

https://www.emacswiki.org/emacs/ToggleWindowSplit

#+BEGIN_SRC emacs-lisp
  (defun window-toggle-split-direction ()
    "Switch window split from horizontally to vertically, or vice versa.

  i.e. change right window to bottom, or change bottom window to right."
    (interactive)
    (require 'windmove)
    (let ((done))
      (dolist (dirs '((right . down) (down . right)))
        (unless done
          (let* ((win (selected-window))
                 (nextdir (car dirs))
                 (neighbour-dir (cdr dirs))
                 (next-win (windmove-find-other-window nextdir win))
                 (neighbour1 (windmove-find-other-window neighbour-dir win))
                 (neighbour2 (if next-win (with-selected-window next-win
                                            (windmove-find-other-window neighbour-dir next-win)))))
            ;;(message "win: %s\nnext-win: %s\nneighbour1: %s\nneighbour2:%s" win next-win neighbour1 neighbour2)
            (setq done (and (eq neighbour1 neighbour2)
                            (not (eq (minibuffer-window) next-win))))
            (if done
                (let* ((other-buf (window-buffer next-win)))
                  (delete-window next-win)
                  (if (eq nextdir 'right)
                      (split-window-vertically)
                    (split-window-horizontally))
                  (set-window-buffer (windmove-find-other-window neighbour-dir) other-buf))))))))
#+END_SRC

— [[https://www.emacswiki.org/emacs/BaManzi][BaManzi]]
** browse-at-remote
   #+BEGIN_SRC emacs-lisp
   (use-package browse-at-remote)
   #+END_SRC
** [[https://github.com/storvik/emacs-lastpass][storvik/emacs-lastpass: Emacs LastPass command wrapper.]]
   #+BEGIN_SRC emacs-lisp
        (use-package lastpass
          :config
          (setq lastpass-user user-mail-address)
          (setq lastpass-multifactor-use-passcode nil)
          (lastpass-auth-source-enable)
          :hook
          (lastpass-logged-in-hook . #'lastpass-auth-source-enable))

   #+END_SRC
** Edit the web with +Atom+ Emacs
   #+BEGIN_SRC emacs-lisp
   (use-package atomic-chrome
     :init
     (atomic-chrome-start-server))
   #+END_SRC
** TRYING Folding for YAML: [[https://gitlab.com/emacs-stuff/indent-tools/][indent-tools]]

   Obviously this does a lot more but folding YAML is why I'm looking
   at it.
   #+BEGIN_SRC emacs-lisp
     (use-package indent-tools
       :bind ("C-c >" . indent-tools-hydra/body))
   #+END_SRC
** [[https://github.com/politza/pdf-tools][PDF-Tools: Emacs support library for PDF files.]]
   #+begin_src emacs-lisp
     (leaf pdf-tools
       :package t
       :config
       (pdf-tools-install)
       :bind
       'pdf-view-mode-map
       ("\\" . hydra-pdf-tools/body)
       ("<s-spc>" .  pdf-view-scroll-down-or-next-page)
       ("g"  . pdf-view-first-page)
       ("G"  . pdf-view-last-page)
       ("l"  . image-forward-hscroll)
       ("h"  . image-backward-hscroll)
       ("j"  . pdf-view-next-page)
       ("k"  . pdf-view-previous-page)
       ("e"  . pdf-view-goto-page)
       ("u"  . pdf-view-revert-buffer)
       ("al" . pdf-annot-list-annotations)
       ("ad" . pdf-annot-delete)
       ("aa" . pdf-annot-attachment-dired)
       ("am" . pdf-annot-add-markup-annotation)
       ("at" . pdf-annot-add-text-annotation)
       ("y"  . pdf-view-kill-ring-save)
       ("i"  . pdf-misc-display-metadata)
       ("s"  . pdf-occur)
       ("b"  . pdf-view-set-slice-from-bounding-box)
       ("r"  . pdf-view-reset-slice)
       :hydra
       (hydra-pdf-tools
	(:color blue :hint nil)
	"
									   ╭───────────┐
	    Move  History   Scale/Fit     Annotations  Search/Link    Do   │ PDF Tools │
	╭──────────────────────────────────────────────────────────────────┴───────────╯
	      ^^_g_^^      _B_    ^↧^    _+_    ^ ^     [_al_] list    [_s_] search    [_u_] revert buffer
	      ^^^↑^^^      ^↑^    _H_    ^↑^  ↦ _W_ ↤   [_am_] markup  [_o_] outline   [_i_] info
	      ^^_p_^^      ^ ^    ^↥^    _0_    ^ ^     [_at_] text    [_F_] link      [_d_] dark mode
	      ^^^↑^^^      ^↓^  ╭─^─^─┐  ^↓^  ╭─^ ^─┐   [_ad_] delete  [_f_] search link
	 _h_ ←pag_e_→ _l_  _N_  │ _P_ │  _-_    _b_     [_aa_] dired
	      ^^^↓^^^      ^ ^  ╰─^─^─╯  ^ ^  ╰─^ ^─╯   [_y_]  yank
	      ^^_n_^^      ^ ^  _r_eset slice box
	      ^^^↓^^^
	      ^^_G_^^
	--------------------------------------------------------------------------------
	     "
	("\\" hydra-master/body "back")
	("<ESC>" nil "quit")
	("al" pdf-annot-list-annotations)
	("ad" pdf-annot-delete)
	("aa" pdf-annot-attachment-dired)
	("am" pdf-annot-add-markup-annotation)
	("at" pdf-annot-add-text-annotation)
	("y"  pdf-view-kill-ring-save)
	("+" pdf-view-enlarge :color red)
	("-" pdf-view-shrink :color red)
	("0" pdf-view-scale-reset)
	("H" pdf-view-fit-height-to-window)
	("W" pdf-view-fit-width-to-window)
	("P" pdf-view-fit-page-to-window)
	("n" pdf-view-next-page-command :color red)
	("p" pdf-view-previous-page-command :color red)
	("d" pdf-view-dark-minor-mode)
	("b" pdf-view-set-slice-from-bounding-box)
	("r" pdf-view-reset-slice)
	("g" pdf-view-first-page)
	("G" pdf-view-last-page)
	("e" pdf-view-goto-page)
	("o" pdf-outline)
	("s" pdf-occur)
	("i" pdf-misc-display-metadata)
	("u" pdf-view-revert-buffer)
	("F" pdf-links-action-perfom)
	("f" pdf-links-isearch-link)
	("B" pdf-history-backward :color red)
	("N" pdf-history-forward :color red)
	("l" image-forward-hscroll :color red)
	("h" image-backward-hscroll :color red)))
   #+end_src
* [#B] Magit
  [[https://magit.vc/][It's Magit! A Git Porcelain inside Emacs]]

  Magit—like Org—is a total killer app and probably one of the reasons
  Emacs had a revival in the recent(ish) years.

  Just like [[http://mh-e.sourceforge.net/][MH-E]] back in the day, it's not about avoiding the CLI,
  it's about heads-up display of the important stuff and driving the
  CLI with single keystrokes.

  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :bind
      ("\C-x g" . magit-status)
      :custom
      (forge-topic-list-limit '(60 . 0))
      (magit-file-mode t)
      (magit-clone-default-directory "~/Projects/")
      (magit-repository-directories
       '(("~/Projects" . 1)
         ("~/Projects/iac" . 1)
         ("~/Projects/puppet" . 1)))
      (transient-default-level 5)
      (auto-revert-buffer-list-filter 'magit-auto-revert-repository-buffers-p)
      (auto-revert-verbose t))
  #+END_SRC

* Org [0/5]                                                             :org:
** Initialization
   #+BEGIN_SRC emacs-lisp :noweb yes :results value silent
     (use-package org
       :commands (org-agenda org-capture org-store-link)
       :bind
       <<org-binds>>
       :config
       <<org-config>>)
   #+END_SRC

** Binds
   :PROPERTIES:
   :header-args: :noweb-ref org-binds :tangle no
   :END:
   Pretty basic stuff here.
   #+BEGIN_SRC emacs-lisp
     (("C-c a" . org-agenda)
      ("C-c c" . org-capture)
      ("C-c l" . org-store-link)
      ("C-c g" . org-mac-grab-link))
   #+END_SRC
** Config
   :PROPERTIES:
   :header-args: :noweb-ref org-config :tangle no
   :END:

   Regular ellipsis drives me insane because I tend to end regular
   lines that way all the time ... (see?)
   #+BEGIN_SRC emacs-lisp
   (setq org-ellipsis " ↴")
   #+END_SRC

   My muscle memory is completely stuck on =M-< TAB=. This just
   enables what I'm pretty sure was a default in some distant past.

   #+BEGIN_SRC emacs-lisp
   (setq org-cycle-global-at-bob t)
   #+END_SRC

   These settings fix refile completion with [[*Counsel / Ivy / Swiper][Counsel]]:

   #+BEGIN_SRC emacs-lisp
     (setq org-refile-use-outline-path 'file
	   org-outline-path-complete-in-steps nil
	   org-refile-targets '((org-agenda-files :maxlevel . 2)))
   #+END_SRC

   That's why I also like to enable speed commands when point is at
   beginning-of-buffer. This means that immediately after opening an
   org file, you can jump to the first heading just by tapping =n=.

   #+BEGIN_SRC emacs-lisp
     (setq org-use-speed-commands
	   (lambda () (or (eq (point) 1)
			  (looking-at org-outline-regexp-bol))))
   #+END_SRC

   Set up some modules by default. I use =org-id= for capture targets,
   =org-mac-link= *all* the damn time, and =ob-shell= for
   some—ahem—"literate" DevOps. More like notebook DevOps in practice,
   but still awesome.

   #+BEGIN_SRC emacs-lisp
   (setq org-modules '(org-id org-mac-link org-protocol ob-shell))
   (org-load-modules-maybe t)
   #+END_SRC

   I don't use =hl-line-mode= often, but when I do, it's in buffers
   that are lists of things.

   #+BEGIN_SRC emacs-lisp
   (add-hook 'org-agenda-mode-hook #'hl-line-mode)
   #+END_SRC

   #+BEGIN_QUOTE
   After saving, also commit to a worktree work-in-progress ref.

   After saving the current file-visiting buffer this mode also
   commits the changes to the worktree work-in-progress ref for
   the current branch.
   #+END_QUOTE

   How awesome does that sound? To call back all your saves is just
   =M-x magit-wip-log-current=.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook (lambda ()
				(magit-wip-after-save-mode t)
				(magit-wip-after-apply-mode t)
				(magit-wip-before-change-mode t)))
   #+END_SRC

   Good for editing this file. Expand =<el= to an emacs-lisp src block.
   Update: Org 9.2 killed it ... T-T
   #+BEGIN_SRC emacs-lisp
     ;; Can't figure out how to make noweb expansion skip a single block...
     ;; (add-to-list 'org-structure-template-alist '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
     ;; (add-to-list 'org-structure-template-alist '("sh" "#+BEGIN_SRC sh\n?\n#+END_SRC"))
   #+END_SRC

   Pops up the agenda when emacs is idle. Remind me what I should be
   doing instead of whatever I am doing.

   #+BEGIN_SRC emacs-lisp :tangle no
       (defun jump-to-org-agenda ()
         (interactive)
         (let ((buf (get-buffer "*Org Agenda*"))
               wind)
           (if buf
               (if (setq wind (get-buffer-window buf))
                   (select-window wind)
                 (if (called-interactively-p)
                     (progn
                       (select-window (display-buffer buf t t))
                       (org-fit-window-to-buffer)
                       ;; (org-agenda-redo)
                       )
                   (with-selected-window (display-buffer buf)
                     (org-fit-window-to-buffer)
                     ;; (org-agenda-redo)
                     )))
             (call-interactively #'org-agenda-list))))
       (run-with-idle-timer 900 t #'jump-to-org-agenda)
   #+END_SRC

   No love for zsh??
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-babel-shell-names "zsh")
     (org-babel-shell-initialize)
   #+END_SRC

   Decided to add a save timestamp to help me tell that whatever I'm
   editing is up to date with other copies.
   #+BEGIN_SRC emacs-lisp
     (add-hook 'before-save-hook 'time-stamp)
   #+END_SRC
** TODO Enable and play with [[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-sqlite.org.html][ob-sqlite]]
** Bullets
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :hook (org-mode . org-bullets-mode)
       :config (setq org-bullets-bullet-list '("‣")))
   #+END_SRC
** Exporting
   #+BEGIN_SRC emacs-lisp
   ;(use-package ox-confluence :after org)
   (use-package ox-clip :after org)
   (use-package ox-gfm :after org)
   (use-package ox-jira :after org)
   #+END_SRC
*** COMMENT My crazy numbered paragraphs idea
    #+begin_src emacs-lisp
      (defun numbered-paragraphs-headline (headline contents info)
        "Transcode HEADLINE as a plain numbered paragraph. CONTENTS is
      headline contents. INFO is plist used as a communication
      channel."
        (let* ((level (org-export-get-relative-level headline info))
               (num (org-export-get-headline-number)))
          (concat headline contents)))
    #+end_src

** Additions
*** [[https://github.com/magit/orgit][magit/orgit: Support for Org links to Magit buffers]]
    #+begin_src emacs-lisp
      (use-package orgit)
    #+end_src
*** [[https://github.com/akirak/ivy-omni-org][akirak/ivy-omni-org: An Ivy command which lets you visit Org buffers, files, bookmarks, and agenda commands]]
    #+begin_src emacs-lisp
      (leaf ivy-omni-org
        :after counsel
        :commands (ivy-omni-org)
        :bind ("C-c b" . ivy-omni-org)
        :custom
        (ivy-omni-org-file-sources . (slumos/ivy-omni-org-sources)))

      (defun slumos/ivy-omni-org-sources ()
        (-uniq (-concat
                (directory-files org-directory t "\\.org\\'")
                (directory-files org-directory t "\\.sync-conflict-[-[:digit:]]+\\.org\\'")
                (directory-files user-emacs-directory "\\.org\\'"))))
    #+end_src
** My Personal Hacks
*** COMMENT -- (Replaced by awscli YASnippet) Add the properties I like when executing aws cli commands.
    #+BEGIN_SRC emacs-lisp
      (defun slumos/org-add-aws-sh-properties ()
        (interactive)
        (org-set-property "header-args" ":exports both :eval no-export :wrap src json :results raw"))
    #+END_SRC
*** Post-process grabbed links

    Strip content-free stuff that gets tacked onto the title of every page.

    #+begin_src emacs-lisp
      (defun slumos/org-grab-link-after (s)
        (replace-regexp-in-string " | Salesforce$" "" s))

      (advice-add #'org-as-mac-chrome-get-frontmost-url :filter-return #'slumos/org-grab-link-after)
      (org-as-mac-chrome-get-frontmost-url)
    #+end_src

** TODO [[https://github.com/Kungsgeten/org-brain#setup-and-requirements][Kungsgeten/org-brain: Org-mode wiki + concept-mapping]]          :long:
** TRYING [[https://github.com/astahlman/ob-async][astahlman/ob-async: Asynchronous src_block execution for org-babel]]
   #+BEGIN_SRC emacs-lisp
   (use-package ob-async)
   #+END_SRC
** TODO [[https://www.nongnu.org/org-edna-el/][Org Edna]]
   #+begin_src emacs-lisp
     (use-package org-edna
       :after org
       :config (org-edna-load))
   #+end_src

** TODO Blogging with Hugo
   - [[https://archive.fo/ajEiq][An Emacs Blogging Workflow | Modern Emacs]]
** TODO calfw calfw-org-agenda
* Projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :config
      (projectile-mode 1))
  #+END_SRC
* [[https://github.com/pashky/restclient.el][pashky/restclient.el: HTTP REST client tool for emacs]]
  [[https://www.youtube.com/watch?v=fTvQTMOGJaw][(26) Emacs Rocks! Episode 15: restclient-mode - YouTube]]
  #+BEGIN_SRC emacs-lisp
    (use-package restclient)
    (use-package ob-restclient
      :config
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((restclient . t)
         (python . t))))
  #+END_SRC
* Language Modes
** Dash
   #+begin_src emacs-lisp
     (use-package counsel-dash
       :hook (elpy-mode . (lambda () (setq-local counsel-dash-docsets "Python_3"))))
   #+end_src

** Dockerfile
   (use-package dockerfile-mode)
** [[https://fennel-lang.org/][Fennel]]
   Seeing if I can configure Hammerspoon with Fennel
   #+begin_src emacs-lisp
     (use-package fennel-mode
       :mode "\\.fnl\\'"
       :hook
       (fennel-mode . lispy-mode)
       (emacs-lisp-mode . lispy-mode))
   #+end_src

** flycheck
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck-mode
       :ensure flycheck
       :hook (puppet-mode ruby-mode json-mode python-mode))
   #+END_SRC
*** TODO [[https://github.com/baron42bba/.emacs.d/blob/master/bba.org#flycheck][Flycheck puppet-link from this example]]
** Go
   #+begin_src emacs-lisp
     (use-package go-mode
       :bind
       (:map go-mode-map
	     ("M-." . godef-jump)))
   #+end_src

** Groovy
   #+BEGIN_SRC emacs-lisp
     (use-package groovy-mode
       :mode "\\.groovy\\'")
   #+END_SRC
** Java
   #+begin_src emacs-lisp
     (exec-path-from-shell-copy-env "JAVA_HOME")
   #+end_src

   #+begin_src emacs-lisp
     (leaf company
       :after java-mode
       :hook java-mode-hook
       :custom
       ((company-backends . '(company-lsp))))
   #+end_src

   #+begin_src emacs-lisp
     (leaf lsp-mode
       :commands lsp
       :init (require 'lsp-clients))
   #+end_src

   #+begin_src emacs-lisp
     (leaf company-lsp
       :commands company-lsp
       :config
       (add-to-list 'company-backends 'company-lsp))
   #+end_src

   #+begin_src emacs-lisp
     (leaf lsp-ui
       :hook (lsp-mode-hook . lsp-ui-mode)
       :custom
       ((lsp-auto-guess-root . t)
        (lsp-enable-completion-at-point . t)
        (lsp-log-io . t)
        (lsp-log-max . 2000)
        (lsp-ui-doc-enable . t)))
   #+end_src

   #+begin_src emacs-lisp
     (use-package lsp-java
       :hook ((java-mode-hook . lsp)))
   #+end_src

   #+begin_src emacs-lisp
     (use-package dap-mode
       :hook ((java-mode-hook . dap-mode)
              (dap-stopped . (lambda (arg) call-interactively #'dap-hydra)))
       :config
       (dap-mode 1)
       (dap-ui-mode 1))
   #+end_src

   #+begin_src emacs-lisp :tangle no
     (leaf dap-java
       :package (dap-mode))
   #+end_src

** Javascript
   #+BEGIN_SRC emacs-lisp
     (use-package js2-mode :mode "\\.js\'")
   #+END_SRC

   Putting JSON here too...meh.
   #+BEGIN_SRC emacs-lisp
     (use-package json-mode
       :mode "\\.json\\(\\.erb\\)?\'"
       :config
       (add-hook 'json-mode-hook #'flycheck-mode))
   #+END_SRC
** jq mode
   #+begin_src emacs-lisp
     (use-package jq-mode)
   #+end_src
** Lua
   I only really use Lua for [[https://github.com/sdegutis/mjolnir][Mjolnir]], but maybe someday
   [[http://www.hammerspoon.org/][Hammerspoon]]. And I've played with [[https://nodemcu.com/][NodeMCU]] devices a bit...
   #+BEGIN_SRC emacs-lisp
   (use-package lua-mode
     :mode "\\(\\.lua\\|\\.rockspec\\)\\'")
   #+END_SRC
** Markdown
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :commands (markdown-mode gfm-mode)
       :mode (("README\\.md\\'" . gfm-mode)
	      ("\\.md\\'" . markdown-mode)
	      ("\\.markdown\\'" . markdown-mode))
       :init
       (setq markdown-command "cmark-gfm"))
       ;; :config
       ;; stolen from http://stackoverflow.com/a/26297700
       ;; makes markdown tables saner via orgtbl-mode
       ;; (require 'org-table)
       ;; (defun cleanup-org-tables ()
       ;;   (save-excursion
       ;;     (goto-char (point-min))
       ;;     (while (search-forward "-+-" nil t) (replace-match "-|-"))))
       ;; (add-hook 'markdown-mode-hook #'orgtbl-mode)
       ;; (add-hook 'markdown-mode-hook
       ;; 	    (lambda()
       ;; 	      (add-hook 'after-save-hook #'cleanup-org-tables  nil 'make-it-local))))
   #+END_SRC
** Puppet
   #+BEGIN_SRC emacs-lisp
     (use-package puppet-mode
       :mode "\\.pp\\'"
       :config
       (unbind-key "$" puppet-mode-map)
       (setq-local align-region-separate 'group)
       (add-to-list 'puppet-mode-align-rules
		    '(puppet-assignment-literal
		      (regexp . "\\(\\s-*\\)=\\s-*[^# \t\n]")
		      (repeat . t)
		      (modes . '(puppet-mode)))))
   #+END_SRC
** Python
   #+BEGIN_SRC emacs-lisp
     (use-package python
       :mode ("\\.py\\'" . python-mode)
       :interpreter ("python" . python-mode))
   #+END_SRC

   #+begin_src emacs-lisp
     (use-package elpy)
   #+end_src

   IPython / Jupyter Notebook client

   #+BEGIN_SRC emacs-lisp
     (use-package ein
       :commands (ein:notebooklist-login
                  ein:notebooklist-open)
       :config
       (org-babel-do-load-languages 'org-babel-load-languages '((ein . t))))
   #+END_SRC

** Ruby
   #+BEGIN_SRC emacs-lisp
     (use-package ruby-mode
       :mode "\\(\\.rb\\|\\.rake\\|Gemfile\\||Puppetfile\\)\\'")

     (use-package inf-ruby
       :no-require t)

     (use-package rspec-mode
       :config
       (inf-ruby-switch-setup))

     (use-package ruby-hash-syntax
       :bind
       (:map ruby-mode-map
	     ("C-c #" . ruby-toggle-hash-syntax)))

     (use-package seeing-is-believing
       :bind (("<s-return>" . seeing-is-believing)))

     (use-package chruby)
   #+END_SRC

   #+begin_src emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((ruby . t)))
   #+end_src

   #+BEGIN_SRC emacs-lisp
     ;; https://raw.githubusercontent.com/jimweirich/emacs-setup-esk/master/ruby-align.el
     (require 'align)

     (add-to-list 'align-rules-list
		  '(ruby-comma-delimiter
		    (regexp . ",\\(\\s-*\\)[^# \t\n]")
		    (repeat . t)
		    (modes  . '(ruby-mode))))

     (add-to-list 'align-rules-list
		  '(ruby-hash-literal
		    (regexp . "\\(\\s-*\\)=>\\s-*[^# \t\n]")
		    (group 2 3)
		    (repeat . t)
		    (modes  . '(ruby-mode))))

     (add-to-list 'align-rules-list
		  '(ruby-hash-literal2
		    (regexp . "[a-z0-9]:\\(\\s-*\\)[^# \t\n]")
		    (repeat . t)
		    (modes  . '(ruby-mode))))

     (add-to-list 'align-rules-list
		  '(ruby-assignment-literal
		    (regexp . "\\(\\s-*\\)=\\s-*[^# \t\n]")
		    (repeat . t)
		    (modes  . '(ruby-mode))))

     (add-to-list 'align-rules-list
		  '(ruby-xmpfilter-mark
		    (regexp . "\\(\\s-*\\)# => [^#\t\n]")
		    (repeat . nil)
		    (modes  . '(ruby-mode))))
   #+END_SRC

** Rust
   #+begin_src emacs-lisp
   (use-package rustic)
   #+end_src

   #+begin_src emacs-lisp
   (use-package flycheck-rust)
   #+end_src

** Terraform (HCL)
   #+BEGIN_SRC emacs-lisp
     (use-package terraform-mode
       :hook 
       (terraform-mode . terraform-format-on-save-mode)
       (terraform-mode . flycheck-mode))
   #+END_SRC
** Web (HTML, etc)
   #+BEGIN_SRC emacs-lisp
     (use-package web-mode)
   #+END_SRC
** TOML
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package toml-mode
       :mode "Pipfile\\'")
   #+END_SRC
** YAML
   #+BEGIN_SRC emacs-lisp
     (use-package yaml-imenu)
     (use-package yaml-mode
       :mode "\\(.yaml\\|.yml\\)$"
       :config (add-hook 'yaml-mode-hook #'flycheck-mode)
       :hook (yaml-imenu-enable))
   #+END_SRC

* Context-specific
  Yuck, barf, and bleh. Someone show me a better way!
** Localhost
   I just have a =localhost-[hostname]= repo for each host that's important to me.
   #+BEGIN_SRC emacs-lisp
     (defconst *user-localhost-config-dir* (expand-file-name "localhost" (xdg-config-home)))
     (defconst *user-localhost-config-file* (expand-file-name "emacs.el.gpg" *user-localhost-config-dir*))
     (when (file-exists-p *user-localhost-config-file*)
       (load *user-localhost-config-file*))
   #+END_SRC
** Work/Life Balance?
   #+BEGIN_SRC emacs-lisp
     (let* ((local-config-name (pcase (system-name)
				 ("steven.lan" "personal.org")
				 ("slumos-ltm.internal.salesforce.com" "work.org")))
	    (local-config (expand-file-name local-config-name user-emacs-directory)))
       (if (file-exists-p local-config)
	   (org-babel-load-file local-config)))
   #+END_SRC
* Notes
** TODO rcirc [[https://github.com/stevensurgnier/.emacs.d/blob/master/user/init/init-rcirc.el][.emacs.d/init-rcirc.el at master · stevensurgnier/.emacs.d]]
** TODO [[https://github.com/kaushalmodi/.emacs.d/commit/6beb2156b0d6181b0881cc714de1780129bb038f][Use rg (ripgrep) for projectile file caching · kaushalmodi/.emacs.d@6beb215]]
** TODO Check out [[https://nhoffman.github.io/.emacs.d/][init.el for Noah Hoffman]]
** TODO Colorize ob-shell ANSI output in org buffer?
** Getting customized vars to copy to use-package blocks
   #+begin_src emacs-lisp :results value table drawer replace :tangle no
     (let ((found nil))
           (mapatoms (lambda (sym)
                       (let ((val (get sym 'customized-value))
                             (comment (get sym 'customized-variable-comment)))
                         (if (car val) (push (list sym val comment) found)))))
           found)
   #+end_src

   #+RESULTS:
   :results:
   | magit-file-mode                | (t)                                                                | Customized with use-package magit     |
   | transient-default-level        | (5)                                                                | Customized with use-package magit     |
   | magit-repository-directories   | ('((~/Projects . 1) (~/Projects/iac . 1) (~/Projects/puppet . 1))) | Customized with use-package magit     |
   | magit-clone-default-directory  | (~/Projects/)                                                      | Customized with use-package magit     |
   | doom-modeline-icon             | (t)                                                                | Use all-the-icons                     |
   | auto-revert-verbose            | (t)                                                                | Customized with use-package magit     |
   | forge-topic-list-limit         | ('(60 . 0))                                                        | Customized with use-package magit     |
   | yas-snippet-dirs               | ('(/Users/slumos/.config/emacs/snippets))                          | Customized with use-package yasnippet |
   | auto-revert-buffer-list-filter | ('magit-auto-revert-repository-buffers-p)                          | Customized with use-package magit     |
   :end:
