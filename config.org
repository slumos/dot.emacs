# -*- mode: org; -*-
#+DESCRIPTION: My nice =~/.config/emacs configuration. XDG edition.
#+KEYWORDS:  emacs org
#+LANGUAGE:  en
#+STARTUP: entitiespretty fold
#+TODO: TODO(t) TRYING(r) BROKEN(t) SKIP(s)
#+FILETAGS: :emacs:config:
#+CATEGORY: EMACS

* Introduction
  I know, I'm supposed to only care about writing code and not
  configuring editors.
** Philosophy
   1. Emacs defaults except recent terrible changes. Looking at you
      (transient-mark-mode t)
   2. The Emacs way is fine
      * custom hasn't been really hate-worthy for ages—oh, you hate
        custom? Now who cares more about writing code than configuring
        editors?
      * the new package system is just fine thanks.
   3. I went to the trouble to acquire [[http://www.fsd.it/fonts/pragmatapro.htm][Pragmata Pro]]—because it's awesome,
      but more than that—because I like Unicode enough to buy a
      programming font with decent Unicode support. I'm hardly going to
      do that and then *not* use Unicode in my editor config.
* Startup
** TODO Daemon
   #+BEGIN_SRC emacs-lisp
   (setq server-use-tcp t)
   (server-start)
   #+END_SRC
** TODO Handling of BROKEN/SKIP states (should not be tangled)
** Initial buffers (=*scratch*=)
   #+BEGIN_SRC emacs-lisp
     (setq initial-scratch-message nil)
     (setq inhibit-startup-screen t)
   #+END_SRC
* Basics
** =use-package=
   John Wiegley is an Emacs badass. I am not even kidding.

   #+BEGIN_SRC emacs-lisp
     (require 'use-package)
     (setq use-package-always-ensure t)
     (setq use-package-verbose t)
   #+END_SRC
** Religion
*** Canon
    Rollback sacrilege committed in recent years (decades...)

    I use C-SPC C-SPC frequently to get transient mark and I'm fine
    with that.

    #+BEGIN_SRC emacs-lisp
      (setq
       indent-tabs-mode nil
       transient-mark-mode nil)
    #+END_SRC
*** Buckeys
    #+BEGIN_SRC emacs-lisp
      (case window-system
	('ns
         (setq mac-command-modifier 'meta) ; That's right.
         (setq mac-option-modifier 'super)
         (setq ns-function-modifier 'hyper)))
    #+END_SRC
*** Noise. Make less. 
    The advent of the tool bar—or was it fringe? ugh...—was great for me,
    because it was offensive enough to bother learning how to turn it off.
    Once I was in a turning off mode, I realized that the only thing I
    actually used the scroll bar for is telling how far into a buffer I
    was, and why should I even care about that?

    There's no point to turning off the menu bar in OSX. Yay for Lion
    Full Screen though!

    #+BEGIN_SRC emacs-lisp
      (fringe-mode 0)
      (tool-bar-mode -1)
      (scroll-bar-mode -1)
      (unless (memq window-system '(mac ns))
        (menu-bar-mode -1))
      (setq inhibit-startup-screen t)
    #+END_SRC
** Dedicated directory for backup files
   XDG WHAT
   #+BEGIN_SRC emacs-lisp
     (defconst *backup-dir* (expand-file-name "emacs/backups" (xdg-data-home)))
     (setq backup-directory-alist (cons (cons "." *backup-dir*) nil))
   #+END_SRC
** Import Environment
   #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell
       :config
       (setq shell-file-name "/bin/zsh")
       (exec-path-from-shell-initialize)
       (exec-path-from-shell-copy-envs
        '("AWS_CONFIG_FILE"
          "EMAIL"
          "LANG"
          "XDG_CACHE_HOME"
          "XDG_CONFIG_DIRS"
          "XDG_CONFIG_HOME"
          "XDG_DATA_DIRS"
          "XDG_DATA_HOME"
          "XDG_RUNTIME_DIR")))
   #+END_SRC
** Tuning
   Who remembers Eight Megs And Constantly Swapping?
   #+BEGIN_SRC emacs-lisp
   (setq gc-cons-threshold (* 100 1024 1024))
   #+END_SRC
* Preferences
** Utf-8
   #+BEGIN_SRC emacs-lisp
   (prefer-coding-system 'utf-8)
   #+END_SRC
** PragmataPro
   #+BEGIN_SRC emacs-lisp
     (set-default-font "PragmataPro-14")
   #+END_SRC
** Theme
   #+BEGIN_SRC emacs-lisp
     (use-package smyx-theme
       :config
       (load-theme 'smyx t)
       (set-face-attribute 'org-todo nil :box nil)
       (set-face-attribute 'org-done nil :box nil))
   #+END_SRC
** Code
   #+BEGIN_SRC emacs-lisp
   (show-paren-mode t)
   #+END_SRC
** Mode Line
*** Deploy fanciness
**** Spaceline
     #+BEGIN_SRC emacs-lisp
       (use-package spaceline-config
	 :ensure spaceline
	 :config (spaceline-spacemacs-theme))
     #+END_SRC
**** All The Icons!
     I'm not bothering to automate this now: On a new system, you gotta =M-x all-the-icons-install-fonts=
     #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons)
     #+END_SRC

     A bit too noisy for me...
     #+BEGIN_SRC emacs-lisp :tangle no
       (use-package all-the-icons-ivy
         :init (all-the-icons-ivy-setup))
     #+END_SRC
**** [[https://github.com/domtronn/spaceline-all-the-icons.el][domtronn/spaceline-all-the-icons.el: A Spaceline Mode Line theme using All The Icons for Emacs]]
     #+BEGIN_SRC emacs-lisp
       (use-package spaceline-all-the-icons
	 :after spaceline
	 :config
	 (setq spaceline-all-the-icons-separator-type 'arrow)
	 (setq spaceline-all-the-icons-icon-set-modified 'circle)
	 (spaceline-all-the-icons-theme)
	 (spaceline-all-the-icons--setup-git-ahead)
	 (spaceline-all-the-icons--setup-paradox)
	 (spaceline-toggle-all-the-icons-narrowed-on))
     #+END_SRC
**** Color in comint
     #+BEGIN_SRC emacs-lisp
       (use-package xterm-color
	 :init
	 (add-hook 'comint-preoutput-filter-functions #'xterm-color-filter)
	 (setq comint-output-filter-functions (remove #'ansi-color-process-output comint-output-filter-functions)))
     #+END_SRC
** auto-revert
   Really want to set =auto-revert-check-vc-info= to =t=, but =nil= for
   now because I need to use TRAMP which conflicts with it...
   #+BEGIN_SRC emacs-lisp
     (setq auto-revert-check-vc-info nil)
     (global-auto-revert-mode)
   #+END_SRC
** My:
   #+BEGIN_SRC emacs-lisp
   (setq user-mail-address (or (getenv "EMAIL") "steven@lumos.us"))
   #+END_SRC
* Helpers
** Better packages ux
   #+BEGIN_SRC emacs-lisp
	  (use-package paradox
	    :config
	    (add-hook 'paradox-menu-mode-hook #'hl-line-mode))
   #+END_SRC
** Better Zoom
   The =zoom-frm= package improves on =text-scale-adjust= by providing
   functions for changing size across all buffers.

   #+BEGIN_SRC emacs-lisp
     (use-package zoom-frm
       :ensure t
       :bind (("C-c C-+" . zoom-in/out)
              ("C-c C--" . zoom-in/out)
              ("C-c C-0" . zoom-in/out)
              ("C-c C-=" . zoom-in/out)))
   #+END_SRC
** Copy region formatted for various markup systems
   #+BEGIN_SRC emacs-lisp
   (use-package copy-as-format)
   #+END_SRC
** Jumping
*** [[https://github.com/abo-abo/ace-link][abo-abo/ace-link: Quickly follow links in Emacs]]
    #+BEGIN_SRC emacs-lisp
      (use-package ace-link
	:config
	(ace-link-setup-default)
	:bind
	(:map org-mode-map
	("M-o" . ace-link-org))
	(:map Info-mode-map
	("o" . ace-link-info)))
    #+END_SRC
*** avy
    #+BEGIN_QUOTE
      "If you're familiar with the popular `ace-jump-mode' package, this
      package does all that and more, without the implementation
      headache."
    #+END_QUOTE
    #+BEGIN_SRC emacs-lisp
	(use-package avy
          :bind
          ("C-." . avy-goto-char)
          ("M-g M-g" . avy-goto-line))
    #+END_SRC
*** [[https://github.com/jacktasia/dumb-jump][jacktasia/dumb-jump: an Emacs "jump to definition" package]]
    #+BEGIN_SRC emacs-lisp
      (use-package dumb-jump
	:bind (("M-g o" . dumb-jump-go-other-window)
	       ("M-g j" . dumb-jump-go)
	       ("M-g i" . dumb-jump-go-prompt)
	       ("M-g x" . dumb-jump-go-prefer-external)
	       ("M-g z" . dumb-jump-go-prefer-external-other-window))
	:config (setq dumb-jump-selector 'ivy))
    #+END_SRC
** multiple-cursors
   [[http://emacsrocks.com/e13.html][Emacs Rocks! Episode 13: multiple-cursors]]
   [[http://endlessparentheses.com/multiple-cursors-keybinds.html][Multiple Cursors keybinds · Endless Parentheses]]
   [[http://pages.sachachua.com/.emacs.d/Sacha.html#org0dfa59e][Sacha Chua's Emacs configuration]] (where I stole the keymap)
   #+BEGIN_SRC emacs-lisp
     (use-package multiple-cursors
       :bind
       (("C-c m t" . mc/mark-all-like-this)
	("C-c m m" . mc/mark-all-like-this-dwim)
	("C-c m l" . mc/edit-lines)
	("C-c m e" . mc/edit-ends-of-lines)
	("C-c m a" . mc/edit-beginnings-of-lines)
	("C-c m n" . mc/mark-next-like-this)
	("C-c m p" . mc/mark-previous-like-this)
	("C-c m s" . mc/mark-sgml-tag-pair)
	("C-c m d" . mc/mark-all-like-this-in-defun)))
   #+END_SRC
** which-key: Cool cheat-sheet for bound keys
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :config (which-key-mode))
   #+END_SRC
** TODO undo-tree
   [[http://pragmaticemacs.com/emacs/advanced-undoredo-with-undo-tree/][Advanced undo/redo with undo-tree | Pragmatic Emacs]]
   [[http://www.dr-qubit.org/undo-tree/undo-tree.el][www.dr-qubit.org/undo-tree/undo-tree.el]]
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package undo-tree
       :bind
       ("C-c C-u" . undo-tree-visualize)
       :config
       (setq undo-tree-visualizer-timestamps))
   #+END_SRC
** WS Butler
   This cleans up trailing whitespace only on line I edited. Briliant!
   #+BEGIN_SRC emacs-lisp
     (use-package ws-butler
       :config
       (add-hook 'prog-mode-hook #'ws-butler-mode)
       (add-hook 'yaml-mode-hook #'ws-butler-mode))
   #+END_SRC
** Honor .editorconfig files
   #+BEGIN_SRC emacs-lisp
     (use-package editorconfig
       :init
       (editorconfig-mode 1))
   #+END_SRC
** Counsel / Ivy / Swiper
   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :diminish ivy-mode
       :init (ivy-mode 1)
       :bind
       (:map ivy-mode-map
       ("C-s" . swiper)
       ("M-x" . counsel-M-x)
       ("C-x C-f" . counsel-find-file)
       ("<f1> f" . counsel-describe-function)
       ("<f1> v" . counsel-describe-variable)
       ("C-c u" . counsel-unicode-char)
       ("C-c r" . counsel-rg)
       :map ivy-minibuffer-map
       ("<return>" . ivy-alt-done)
       ("<tab>" . ivy-partial))
       :config
       (setq enable-recursive-minibuffers t)
       (setq ivy-height 20)
       (setq ivy-use-virtual-buffers t)
       (setq ivy-count-format "(%d/%d) ")
       (setq ivy-display-style 'fancy)
       (setq ivy-re-builders-alist 
       '((read-file-name-internal . ivy--regex-fuzzy)
	   (t . ivy--regex-plus)))
       (setq magit-completing-read-function #'ivy-completing-read))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
   (use-package counsel-projectile)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package flx)
   #+END_SRC
*** TODO [[http://pragmaticemacs.com/emacs/save-window-layouts-with-ivy-view/][Save window layouts with ivy-view | Pragmatic Emacs]]
** TRAMP
   #+BEGIN_QUOTE
   TRAMP stands for “Transparent Remote (file) Access, Multiple
   Protocol”.  This package provides remote file editing, similar to
   Ange FTP.
   #+END_QUOTE
*** TODO TRAMP through bastion with Google Authenticator https://www.gnu.org/software/tramp/#Remote-shell-setup
    #+BEGIN_EXAMPLE
    29Jun 16:09:22 ~ 0% ssh host
    Host key fingerprint is SHA256:...
    +---[ECDSA 256]---+
    ...
    +----[SHA256]-----+
    Verification code:
    #+END_EXAMPLE
*** TRAMP for Vagrant
    #+BEGIN_SRC emacs-lisp
      (use-package vagrant-tramp
	:init (vagrant-tramp-add-method))
    #+END_SRC
** Functions
   By me or collected from awesome people.
*** insert-date/time-stamp
    #+BEGIN_SRC emacs-lisp
      (defun slumos/insert-datetime-stamp (&optional with-time)
	"Insert current date (with prefix current time) in ISO8601"
	(interactive "*P")
	(insert (if with-time
		    (format-time-string "%FT%T")
		  (format-time-string "%F"))))
    #+END_SRC
*** show-file-name
#+BEGIN_SRC emacs-lisp
(defun show-file-name ()
  "Show the full path file name in the minibuffer and copy it to the kill ring."
  (interactive)
  (message (buffer-file-name))
  (kill-new (file-truename buffer-file-name))
)
#+END_SRC

*** rename-file-and-buffer
Another /omg, why wasn't this in Emacs 18/ moment.

From the really-great http://emacsredux.com/blog/2013/05/04/rename-file-and-buffer/

#+BEGIN_SRC emacs-lisp
  (defun rename-file-and-buffer ()
    "Rename the current buffer and file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (message "Buffer is not visiting a file!")
        (let ((new-name (read-file-name "New name: " filename)))
          (cond
           ((vc-backend filename) (vc-rename-file filename new-name))
           (t
            (rename-file filename new-name t)
            (set-visited-file-name new-name t t)))))))
#+END_SRC

*** compile-notify

#+BEGIN_SRC emacs-lisp
  (defun slumos/compile-notify (buf status)
    (if (fboundp #'tn-notify) (tn-notify status "Emacs" "Compilation"))
    (message "compile-notify: %s %s" buf status))
  (add-to-list 'compilation-finish-functions #'slumos/compile-notify)
#+END_SRC

— slumos

*** window-toggle-split-direction

https://www.emacswiki.org/emacs/ToggleWindowSplit

#+BEGIN_SRC emacs-lisp
  (defun window-toggle-split-direction ()
    "Switch window split from horizontally to vertically, or vice versa.

  i.e. change right window to bottom, or change bottom window to right."
    (interactive)
    (require 'windmove)
    (let ((done))
      (dolist (dirs '((right . down) (down . right)))
        (unless done
          (let* ((win (selected-window))
                 (nextdir (car dirs))
                 (neighbour-dir (cdr dirs))
                 (next-win (windmove-find-other-window nextdir win))
                 (neighbour1 (windmove-find-other-window neighbour-dir win))
                 (neighbour2 (if next-win (with-selected-window next-win
                                            (windmove-find-other-window neighbour-dir next-win)))))
            ;;(message "win: %s\nnext-win: %s\nneighbour1: %s\nneighbour2:%s" win next-win neighbour1 neighbour2)
            (setq done (and (eq neighbour1 neighbour2)
                            (not (eq (minibuffer-window) next-win))))
            (if done
                (let* ((other-buf (window-buffer next-win)))
                  (delete-window next-win)
                  (if (eq nextdir 'right)
                      (split-window-vertically)
                    (split-window-horizontally))
                  (set-window-buffer (windmove-find-other-window neighbour-dir) other-buf))))))))
#+END_SRC

— [[https://www.emacswiki.org/emacs/BaManzi][BaManzi]]
** browse-at-remote
   #+BEGIN_SRC emacs-lisp
   (use-package browse-at-remote)
   #+END_SRC
** [[https://github.com/storvik/emacs-lastpass][storvik/emacs-lastpass: Emacs LastPass command wrapper.]]
   #+BEGIN_SRC emacs-lisp
   (use-package lastpass
     :config
     (setq lastpass-user user-mail-address)
     (setq lastpass-multifactor-use-passcode nil)
     (lastpass-auth-source-enable))
   #+END_SRC
** TRYING Edit the web with +Atom+ Emacs
   #+BEGIN_SRC emacs-lisp
   (use-package atomic-chrome)
   #+END_SRC
** TRYING Folding for YAML: [[https://gitlab.com/emacs-stuff/indent-tools/][indent-tools]]

   Obviously this does a lot more but folding YAML is why I'm looking
   at it.
   #+BEGIN_SRC emacs-lisp
     (use-package indent-tools
       :bind ("C-c >" . indent-tools-hydra/body))
   #+END_SRC
* Magit
  [[https://magit.vc/][It's Magit! A Git Porcelain inside Emacs]]

  Magit—like Org—is a total killer app and probably one of the reasons
  Emacs had a revival in the recent(ish) years.

  Just like [[http://mh-e.sourceforge.net/][MH-E]] back in the day, it's not about avoiding the CLI,
  it's about heads-up display of the important stuff and driving the
  CLI with single keystrokes.

  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :bind ("\C-x g" . magit-status))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp :tangle no
    (use-package magithub
      :after magit
      :config
      (magithub-feature-autoinject t))
  #+END_SRC

  [[https://github.com/jordonbiondo/.emacs.d/blob/master/jordon/jordon-magit.el][jordon-magit]]: Clean up training whitespace per-hunk. Possibly deprecated by [[*WS Butler][WS Butler]].
  #+BEGIN_SRC emacs-lisp
    (use-package jordon-magit
      :ensure nil
      :after magit
      :load-path (lambda () (expand-file-name "lisp" user-emacs-directory))
      :commands 'jordon-magit-cleanup-this-hunk
      :bind (:map magit-status-mode-map ("C-c s d" . jordon-magit-cleanup-this-hunk))
      :defer t)
  #+END_SRC
* Org [1/9]                                                             :org:
** Initialization
   #+BEGIN_SRC emacs-lisp :noweb yes
     (use-package org
       :ensure org-plus-contrib
       :commands (org-agenda org-capture org-store-link)
       :bind 
       <<org-binds>>
       :config
       <<org-config>>)
   #+END_SRC
** Binds
   :PROPERTIES:
   :header-args: :noweb-ref org-binds :tangle no
   :END:
   Pretty basic stuff here.
   #+BEGIN_SRC emacs-lisp
     (("C-c a" . org-agenda)
      ("C-c c" . org-capture)
      ("C-c l" . org-store-link)
      ("C-c g" . org-mac-grab-link))
   #+END_SRC
** Config
   :PROPERTIES:
   :header-args: :noweb-ref org-config :tangle no
   :END:

   My muscle memory is completely stuck on =M-< TAB=. This just
   enables what I'm pretty sure was a default in some distant past.

   #+BEGIN_SRC emacs-lisp
   (setq org-cycle-global-at-bob t)
   #+END_SRC

   That's why I also like to enable speed commands when point is at
   beginning-of-buffer. This means that immediately after opening an
   org file, you can jump to the first heading just by tapping =n=.

   #+BEGIN_SRC emacs-lisp
     (setq org-use-speed-commands
	   (lambda () (or (eq (point) 1)
			  (looking-at org-outline-regexp-bol))))
   #+END_SRC

   Set up some modules by default. I use =org-id= for capture targets,
   =org-mac-link= *all* the damn time, and =ob-shell= for
   some—ahem—"literate" DevOps. More like notebook DevOps in practice,
   but still awesome.

   #+BEGIN_SRC emacs-lisp
   (setq org-modules '(org-id org-mac-link org-protocol ob-shell))
   (org-load-modules-maybe t)
   #+END_SRC

   I don't use =hl-line-mode= often, but when I do, it's in buffers
   that are lists of things.

   #+BEGIN_SRC emacs-lisp
   (add-hook 'org-agenda-mode-hook #'hl-line-mode)
   #+END_SRC

   #+BEGIN_QUOTE
   After saving, also commit to a worktree work-in-progress ref.

   After saving the current file-visiting buffer this mode also
   commits the changes to the worktree work-in-progress ref for
   the current branch.
   #+END_QUOTE

   How awesome does that sound? To call back all your saves is just
   =M-x magit-wip-log-current=.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook (lambda ()
				(magit-wip-after-save-mode t)))
   #+END_SRC

   Good for editing this file. Expand =<el= to an emacs-lisp src block.

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-structure-template-alist
		  '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC")
		  '("sh" "#+BEGIN_SRC sh\n?\n#+END_SRC"))
   #+END_SRC

   Pops up the agenda when emacs is idle. Remind me what I should be
   doing instead of whatever I am doing.

   #+BEGIN_SRC emacs-lisp :tangle no
       (defun jump-to-org-agenda ()
         (interactive)
         (let ((buf (get-buffer "*Org Agenda*"))
               wind)
           (if buf
               (if (setq wind (get-buffer-window buf))
                   (select-window wind)
                 (if (called-interactively-p)
                     (progn
                       (select-window (display-buffer buf t t))
                       (org-fit-window-to-buffer)
                       ;; (org-agenda-redo)
                       )
                   (with-selected-window (display-buffer buf)
                     (org-fit-window-to-buffer)
                     ;; (org-agenda-redo)
                     )))
             (call-interactively #'org-agenda-list))))
       (run-with-idle-timer 900 t #'jump-to-org-agenda)
   #+END_SRC
** Bullets
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :hook (org-mode . org-bullets-mode)
       :config (setq org-bullets-bullet-list '("‣")))
   #+END_SRC
** Exporting
   #+BEGIN_SRC emacs-lisp
   (use-package ox-clip :after org)
   (use-package ox-gfm :after org)
   (use-package ox-jira :after org)
   #+END_SRC
** Easy table field marking
   Thanks to [[https://github.com/kaushalmodi/.emacs.d/blob/ea60f986d58b27f45d510cde1148bf6d52e10dda/setup-files/setup-org.el#L1041-L1080][.emacs.d/setup-org.el at ea60f986d58b27f45d510cde1148bf6d52e10dda · kaushalmodi/.emacs.d]]
   #+BEGIN_SRC emacs-lisp :tangle no
     ;;;; Table Field Marking
     (defun org-table-mark-field ()
       "Mark the current table field."
       (interactive)
       ;; Do not try to jump to the beginning of field if the point is already there
       (when (not (looking-back "|[[:blank:]]?"))
	 (org-table-beginning-of-field 1))
       (set-mark-command nil)
       (org-table-end-of-field 1))

     (defhydra hydra-org-table-mark-field
       (:body-pre (org-table-mark-field)
		  :hint nil)
       "
	^^      ^🠙^     ^^
	^^      _p_     ^^
     🠘 _b_  selection  _f_ 🠚          | Org table mark ▯field▮ |
	^^      _n_     ^^
	^^      ^🠛^     ^^
     "
       ("x" exchange-point-and-mark "exchange point/mark")
       ("f" (lambda (arg)
	      (interactive "p")
	      (when (eq 1 arg)
		(setq arg 2))
	      (org-table-end-of-field arg)))
       ("b" (lambda (arg)
	      (interactive "p")
	      (when (eq 1 arg)
		(setq arg 2))
	      (org-table-beginning-of-field arg)))
       ("n" next-line)
       ("p" previous-line)
       ("q" nil "cancel" :color blue))

     (bind-keys
      :map org-mode-map
      :filter (org-at-table-p)
      ("S-SPC" . hydra-org-table-mark-field/body))

   #+END_SRC
** slumos
   Add the properties I like when executing aws cli commands.
   #+BEGIN_SRC emacs-lisp
     (defun slumos/org-add-aws-sh-properties ()
       (interactive)
       (org-set-property "header-args" ":exports both :eval no-export :wrap SRC json :results raw"))
   #+END_SRC
** [[https://github.com/magit/orgit][magit/orgit: Support for Org links to Magit buffers]]
   #+BEGIN_SRC emacs-lisp
   (use-package orgit)
   #+END_SRC
** TRYING [[https://github.com/baron42bba/.emacs.d/blob/master/bba.org#ox-jira][Convert a subtree to JIRA markup and copy to clipboard]]
   #+BEGIN_SRC emacs-lisp
   ; https://github.com/baron42bba/.emacs.d/blob/master/bba.org#ox-jira
     (defun bba-org-export-jira-clipboard()
       "narrow to org subtree and store content in jira format in clipboard."
       (interactive)
       (org-narrow-to-subtree)
       (bba-export-jira-org)
       (let ((org-export-babel-evaluate nil))
	 (ox-jira-export-as-jira))
       (delete-region (point) (progn (forward-line 1)(point)))
       (mark-whole-buffer)
       (kill-ring-save 1 1 1))

     (defun bba-export-jira-org()
       "export current narrowed view to file in tmp and open a finder window on OS-X."
       (interactive)
       (beginning-of-buffer)
       (insert "# This file is just plain text called orgmode")
       (newline)
       (insert "# https://en.wikipedia.org/wiki/Org-mode")
       (newline)
       (insert "# You can open it in any text editor or file reader.")
       (newline)
       (insert "# You might want to use Emacs for best experience.")
       (newline)
       (if (re-search-forward "jira:" nil t 1)
	   (if (org-in-regexp org-bracket-link-regexp 1)
	       (let ((remove (list (match-beginning 0) (match-end 0)))
		     (description (last (split-string (if (match-end 3)
							  (match-string-no-properties 3)
							(match-string-no-properties 1)) ":"))))
		 (mark-whole-buffer)
		 (write-region (mark) (point) (concat "/tmp/" (car description) ".org") nil nil )
		 (deactivate-mark)
		 (if (string-equal system-type "darwin")(shell-command "open /tmp/"))
		 )))
       (beginning-of-buffer)
       (kill-line 4))

     (defun bba-ox-clip-formatted-copy()
       "wrapper for ox-clip-formatted-copy to disable org-export-babel-evaluate."
       (interactive)
       (let ((org-export-babel-evaluate nil))
	 (ox-clip-formatted-copy (mark) (point))))
   #+END_SRC
** TRYING [[https://github.com/alphapapa/org-super-agenda][alphapapa/org-super-agenda: Supercharge your Org daily/weekly agenda by grouping items]]
   #+BEGIN_SRC emacs-lisp
     (use-package org-super-agenda
       :config
       (org-super-agenda-mode)
       (let ((org-super-agenda-groups
	      '((:name "Today" :scheduled)
		(:name "Important" :priority "A")
		(:todo "BLOCKED"))))))
   #+END_SRC
** TODO [[https://github.com/astahlman/ob-async][astahlman/ob-async: Asynchronous src_block execution for org-babel]]
** TODO [[https://github.com/Kungsgeten/org-brain#setup-and-requirements][Kungsgeten/org-brain: Org-mode wiki + concept-mapping]]          :long:
** TODO Blogging with Hugo
   - [[https://archive.fo/ajEiq][An Emacs Blogging Workflow | Modern Emacs]]
** TODO calfw calfw-org-agenda
* TRYING [[https://github.com/alphapapa/outshine][alphapapa/outshine: {Emacs} outline with outshine outshines outline]]
  "Outshine attempts to bring the look&feel of Org-mode to the (GNU Emacs) world outside of the Org major-mode."
  #+BEGIN_SRC emacs-lisp
    (use-package outshine
      :init
      (add-hook 'outline-minor-mode-hook 'outshine-hook-function))
  #+END_SRC
* Projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :init (projectile-global-mode))
  #+END_SRC
* [[https://github.com/pashky/restclient.el][pashky/restclient.el: HTTP REST client tool for emacs]]
  [[https://www.youtube.com/watch?v=fTvQTMOGJaw][(26) Emacs Rocks! Episode 15: restclient-mode - YouTube]]
  #+BEGIN_SRC emacs-lisp
    (use-package restclient)
    (use-package ob-restclient
      :config
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((restclient . t))))
  #+END_SRC
* BROKEN Polymode
  The main thing I want to use this for is Org, but it breaks folding and I haven't had time to figure out wtf.

  #+BEGIN_SRC emacs-lisp
    (use-package poly-org
      :ensure polymode)
  #+END_SRC
* Language Modes [0/1]
** Dockerfile
   (use-package dockerfile-mode)
** TRYING [[https://github.com/Microsoft/language-server-protocol/][language-server-protocol]]
   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :config
       (add-hook 'python-mode-hook #'lsp-mode)
       (add-hook 'java-mode-hook #'lsp-mode))
   #+END_SRC
** TRYING flycheck
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
   (use-package flycheck-demjsonlint)
   #+END_SRC
*** TODO [[https://github.com/baron42bba/.emacs.d/blob/master/bba.org#flycheck][Flycheck puppet-link from this example]]
** Groovy
   #+BEGIN_SRC emacs-lisp
     (use-package groovy-mode
       :mode "\\.groovy\\'")
   #+END_SRC
** Javascript
   #+BEGIN_SRC emacs-lisp
     (use-package js2-mode :mode "\\.js\'")
   #+END_SRC

   Putting JSON here too...meh.
   #+BEGIN_SRC emacs-lisp
     (use-package json-mode
       :mode "\\.json\\(\\.erb\\)?\'"
       :config
       (add-hook 'json-mode-hook #'flycheck-mode))
   #+END_SRC
** Lua
   I only really use Lua for [[https://github.com/sdegutis/mjolnir][Mjolnir]], but maybe someday
   [[http://www.hammerspoon.org/][Hammerspoon]]. And I've played with [[https://nodemcu.com/][NodeMCU]] devices a bit...
   #+BEGIN_SRC emacs-lisp
   (use-package lua-mode
     :mode "\\(\\.lua\\|\\.rockspec\\)\\'")
   #+END_SRC
** Markdown
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :commands (markdown-mode gfm-mode)
       :mode (("README\\.md\\'" . gfm-mode)
	      ("\\.md\\'" . markdown-mode)
	      ("\\.markdown\\'" . markdown-mode))
       :init
       (setq markdown-command "cmark-gfm")
       :config
       ;; stolen from http://stackoverflow.com/a/26297700
       ;; makes markdown tables saner via orgtbl-mode
       (require 'org-table)
       (defun cleanup-org-tables ()
	 (save-excursion
	   (goto-char (point-min))
	   (while (search-forward "-+-" nil t) (replace-match "-|-"))))
       (add-hook 'markdown-mode-hook #'orgtbl-mode)
       (add-hook 'markdown-mode-hook
		 (lambda()
		   (add-hook 'after-save-hook #'cleanup-org-tables  nil 'make-it-local))))
   #+END_SRC
** Puppet
   #+BEGIN_SRC emacs-lisp
     (use-package puppet-mode
       :mode "\\.pp\\'"
       :config
       (unbind-key "$" puppet-mode-map)
       (setq-local align-region-separate 'group)
       (add-to-list 'puppet-mode-align-rules
		    '(puppet-assignment-literal
		      (regexp . "\\(\\s-*\\)=\\s-*[^# \t\n]")
		      (repeat . t)
		      (modes . '(puppet-mode)))))
   #+END_SRC
** Python
   #+BEGIN_SRC emacs-lisp
     (use-package python
       :mode ("\\.py\\'" . python-mode)
       :interpreter ("python" . python-mode))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package jedi)
   #+END_SRC

   IPython / Jupyter Notebook client

   #+BEGIN_SRC emacs-lisp
     (use-package ein
       :config
       (setq ein:completion-backend 'ein:use-ac-jedi-backend)
       (org-babel-do-load-languages 'org-babel-load-languages '((ein . t))))
   #+END_SRC
** Ruby
   #+BEGIN_SRC emacs-lisp
     (use-package ruby-mode
       :mode "\\(\\.rb\\|\\.rake\\|Gemfile\\||Puppetfile\\)\\'")

     (use-package inf-ruby
       :no-require t)

     (use-package rspec-mode
       :config
       (inf-ruby-switch-setup))

     (use-package ruby-hash-syntax
       :bind
       (:map ruby-mode-map
	     ("C-c #" . ruby-toggle-hash-syntax)))

     ;; https://raw.githubusercontent.com/jimweirich/emacs-setup-esk/master/ruby-align.el
     (require 'align)

     (add-to-list 'align-rules-list
		  '(ruby-comma-delimiter
		    (regexp . ",\\(\\s-*\\)[^# \t\n]")
		    (repeat . t)
		    (modes  . '(ruby-mode))))

     (add-to-list 'align-rules-list
		  '(ruby-hash-literal
		    (regexp . "\\(\\s-*\\)=>\\s-*[^# \t\n]")
		    (group 2 3)
		    (repeat . t)
		    (modes  . '(ruby-mode))))

     (add-to-list 'align-rules-list
		  '(ruby-hash-literal2
		    (regexp . "[a-z0-9]:\\(\\s-*\\)[^# \t\n]")
		    (repeat . t)
		    (modes  . '(ruby-mode))))

     (add-to-list 'align-rules-list
		  '(ruby-assignment-literal
		    (regexp . "\\(\\s-*\\)=\\s-*[^# \t\n]")
		    (repeat . t)
		    (modes  . '(ruby-mode))))

     (add-to-list 'align-rules-list
		  '(ruby-xmpfilter-mark
		    (regexp . "\\(\\s-*\\)# => [^#\t\n]")
		    (repeat . nil)
		    (modes  . '(ruby-mode))))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package seeing-is-believing
       :bind (("<s-return>" . seeing-is-believing)))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
   (use-package chruby)
   #+END_SRC
** Web (HTML, etc)
   #+BEGIN_SRC emacs-lisp
     (use-package web-mode)
   #+END_SRC
** TOML
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package toml-mode
       :mode "Pipfile\\'")
   #+END_SRC
** YAML
   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode
       :mode "\\(.yaml\\|.yml\\)$"
       :config (add-hook 'yaml-mode-hook #'flycheck-mode))
   #+END_SRC
* Context-specific
  Yuck, barf, and bleh. Someone show me a better way!
** TODO Localhost
   I just have a =localhost-[hostname]= repo for each host that's important to me.
   #+BEGIN_SRC emacs-lisp
     (defconst *user-localhost-config-dir* (expand-file-name "localhost" (xdg-config-home)))
     (defconst *user-localhost-config-file* (expand-file-name "emacs.el.gpg" *user-localhost-config-dir*))
     (when (file-exists-p *user-localhost-config-file*)
       (load *user-localhost-config-file*))
   #+END_SRC
** TODO Secrets
   #+BEGIN_SRC emacs-lisp
     (defconst *user-emacs-secrets-file* (expand-file-name "secrets/emacs.el.gpg" (xdg-config-home)))
     (when (file-exists-p *user-emacs-secrets-file*)
       (load *user-emacs-secrets-file*))
   #+END_SRC
** Work/Life Balance?
   #+BEGIN_SRC emacs-lisp
     (let* ((local-config-name (pcase system-name
				("steven.lan" "personal.org")
				(_ "work.org")))
	   (local-config (expand-file-name local-config-name user-emacs-directory)))
       (if (file-exists-p local-config)
	   (org-babel-load-file local-config)))
   #+END_SRC
* Notes
** TODO rcirc [[https://github.com/stevensurgnier/.emacs.d/blob/master/user/init/init-rcirc.el][.emacs.d/init-rcirc.el at master · stevensurgnier/.emacs.d]]
** TODO [[https://github.com/kaushalmodi/.emacs.d/commit/6beb2156b0d6181b0881cc714de1780129bb038f][Use rg (ripgrep) for projectile file caching · kaushalmodi/.emacs.d@6beb215]]
** TODO Check out [[https://nhoffman.github.io/.emacs.d/][init.el for Noah Hoffman]]
** TODO Colorize ob-shell ANSI output in org buffer?
