# -*- mode: org; -*-
# Time-stamp: <2021-06-22 Tue 21:06 slumos@stevenlum-ltm>
#+DESCRIPTION: My nice =~/.config/emacs configuration.
#+KEYWORDS:  emacs org
#+LANGUAGE:  en
#+STARTUP: entitiespretty overview
#+TODO: TODO(t) TRYING(r) BROKEN(t) SKIP(s) | DONE(d)
#+FILETAGS: :emacs:config:
#+CATEGORY: EMACS
#+PROPERTY: header-args    :results silent

[[http://oremacs.com/lispy/][lispy.el function reference]]

* Introduction
  I know, I'm supposed to only care about writing code and not
  configuring editors.
** Philosophy
   1. Emacs defaults except recent terrible changes. Looking at you
      (transient-mark-mode t)
   2. The Emacs way is fine
      * custom hasn't been really hate-worthy for ages—oh, you hate
        custom? Now who cares more about writing code than configuring
        editors?
      * the new package system is just fine thanks.
   3. I went to the trouble to acquire [[http://www.fsd.it/fonts/pragmatapro.htm][Pragmata Pro]]—because it's awesome,
      but more than that—because I like Unicode enough to buy a
      programming font with decent Unicode support. I'm hardly going to
      do that and then *not* use Unicode in my editor config.
* Basics
** Emacs Packages
   #+begin_src emacs-lisp
     (custom-set-variables
      '(package-archives
        '(("org"   .  "https://orgmode.org/elpa/")
          ("melpa" .  "https://melpa.org/packages/")
;          ("elpy"  .  "https://jorgenschaefer.github.io/packages/")
          ("gnu"   .  "https://elpa.gnu.org/packages/")))
      '(package-archive-priorities
        '(("org"   .  100)
          ("elpy"  .  100)
          ("melpa" .  50)
          ("gnu"   .  10))))
     (package-initialize)
   #+end_src
*** =use-package=
    John Wiegley is an Emacs badass. I am not even kidding.

    #+begin_src emacs-lisp
      (unless (package-installed-p 'use-package)
	(package-refresh-contents)
	(package-install 'use-package))
    #+end_src

    #+begin_src emacs-lisp
      (require 'use-package)
      (setq use-package-always-defer nil)
      (setq use-package-always-ensure t)
      (setq use-package-compute-statistics t)
      (setq use-package-ignore-unknown-keywords t)
      (setq use-package-minimum-reported-time 0)
      (setq use-package-verbose t)
    #+end_src

    Adds the =:quelpa= keyword for extra laziness when installing sutff outside
    of package archives.
    #+begin_src emacs-lisp
      (use-package quelpa :demand t)
      (use-package quelpa-use-package :demand t)
    #+end_src
*** straight
    #+begin_src emacs-lisp
      (defvar bootstrap-version)
      (let ((bootstrap-file
             (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
            (bootstrap-version 5))
        (unless (file-exists-p bootstrap-file)
          (with-current-buffer
              (url-retrieve-synchronously
               "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
               'silent 'inhibit-cookies)
            (goto-char (point-max))
            (eval-print-last-sexp)))
        (load bootstrap-file nil 'nomessage))
    #+end_src

*** TRYING [[https://github.com/conao3/leaf.el][conao3/leaf.el: Support your setting init.el like use-package]]
    #+begin_src emacs-lisp
      (prog1 "prepare leaf"
        (prog1 "leaf"
          (unless (package-installed-p 'leaf)
            (unless (assoc 'leaf package-archive-contents)
              (package-refresh-contents))
            (condition-case err
                (package-install 'leaf)
              (error
               (package-refresh-contents)  ; renew local melpa cache if fail
               (package-install 'leaf))))

          ;; (leaf feather
          ;;    :el-get conao3
          ;;    :config (feather-mode))

          (leaf leaf-keywords
            :ensure t
            :config (leaf-keywords-init))

          (leaf leaf
            :custom ((leaf-defaults . '(:ensure t)))))

        (prog1 "optional packages for leaf-keywords"
          ;; optional packages if you want to use :hydra, :el-get,,,
          (leaf hydra :ensure t)
          (leaf el-get :ensure t
            :custom ((el-get-git-shallow-clone  . t)))))
    #+end_src
** Religion
*** Canon
    Rollback sacrilege committed in recent years (decades...)

    I use C-SPC C-SPC frequently to get transient mark and I'm fine
    with that.

    #+BEGIN_SRC emacs-lisp
      (custom-set-variables
       '(indent-tabs-mode nil)
       '(transient-mark-mode nil))
    #+END_SRC
*** Buckeys
    #+BEGIN_SRC emacs-lisp
      (case window-system
	('ns
         (setq mac-command-modifier 'meta) ; That's right.
         (setq mac-option-modifier 'super)
         (setq ns-function-modifier 'hyper)))
    #+END_SRC
*** Noise. Make less.
    The advent of the tool bar — or was it fringe? ugh... — was great
    for me, because it was offensive enough to bother learning how to
    turn it off.  Once I was in a turning off mode, I realized that
    the only thing I actually used the scroll bar for is telling how
    far into a buffer I was, and why should I even care about that?

    There's no point to turning off the menu bar in OSX. Yay for Lion
    Full Screen though!

    #+BEGIN_SRC emacs-lisp
      (fringe-mode 0)
      (tool-bar-mode -1)
      (scroll-bar-mode -1)
      (unless (memq window-system '(mac ns))
        (menu-bar-mode -1))
      (setq inhibit-startup-screen t)
    #+END_SRC
** Import Environment
   #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell
       :demand t
       :config
       (setq shell-file-name "/usr/local/bin/zsh")
       (setq exec-path-from-shell-arguments '("-l" "-i"))
       (setq exec-path-from-shell-check-startup-files nil)
       (exec-path-from-shell-initialize)
       (exec-path-from-shell-copy-envs
        '("AWS_CONFIG_FILE"
          "EMAIL"
          "LANG"
          "TMPDIR"
          "XDG_CACHE_HOME"
          "XDG_CONFIG_DIRS"
          "XDG_CONFIG_HOME"
          "XDG_DATA_DIRS"
          "XDG_DATA_HOME"
          "XDG_RUNTIME_DIR")))
   #+END_SRC

   XDG WHAT
   #+BEGIN_SRC emacs-lisp
   (require 'xdg)
   #+END_SRC
** Dedicated directory for backup files
   #+BEGIN_SRC emacs-lisp
     (defconst *backup-dir* (expand-file-name "emacs/backups" (xdg-data-home)))
     (setq backup-directory-alist (cons (cons "." *backup-dir*) nil))
   #+END_SRC
** Tuning
   Who remembers Eight Megs And Constantly Swapping?
   #+BEGIN_SRC emacs-lisp
   (setq gc-cons-threshold (* 100 1024 1024))
   #+END_SRC
** Keys
   #+begin_src emacs-lisp
     (global-set-key (kbd "<C-backspace>") #'delete-indentation)
   #+end_src
*** TODO [[https://github.com/Kungsgeten/ryo-modal][Kungsgeten/ryo-modal: Roll your own modal mode]]
    Compare to [[https://github.com/DogLooksGood/meow][DogLooksGood/meow: Modal Editing On Wheel]]
* Startup
** Daemon
   #+begin_src emacs-lisp
     (custom-set-default 'server-socket-dir (expand-file-name "emacs" (xdg-runtime-dir)))
     (server-start)
   #+end_src

** Handling of BROKEN/SKIP states (should not be tangled)
   I just learned about COMMENT status (=C-c ;=) and decided to punt
   on this for now while trying that instead.
** Initial buffers (=*scratch*=)
   #+BEGIN_SRC emacs-lisp
     (setq initial-scratch-message nil)
     (setq inhibit-startup-screen t)
   #+END_SRC
* Preferences
** Utf-8
   #+BEGIN_SRC emacs-lisp
   (prefer-coding-system 'utf-8)
   #+END_SRC
** Fonts
*** PragmataPro
    #+BEGIN_SRC emacs-lisp
      (set-frame-font "PragmataPro Mono Liga-16")
    #+END_SRC

    #+begin_src emacs-lisp
      (if (fboundp 'mac-auto-operator-composition-mode)
	  (mac-auto-operator-composition-mode 1))
    #+end_src

    Copied from [[https://github.com/fabrizioschiavi/pragmatapro/blob/master/emacs_snippets/pragmatapro-char-menu-config-sample.el][pragmatapro/pragmatapro-char-menu-config-sample.el at master · fabrizioschiavi/pragmatapro]]
    #+begin_src emacs-lisp
      ;;; Char menu allows you to enter unicode characters easily. It automatically
      ;;; chooses jump keys to select the glyph you would like to use. This can be a
      ;;; nice alternative to using and memorizing prettified symbols.

      (use-package char-menu
        :ensure t
        :bind ("M-p" . char-menu)
        :custom
        (char-menu '("—" "‘’" "“”" "…" "«»" "–"
                     ("Typography" "•" "©" "†" "‡" "°" "·" "§" "№" "★")
                     ("Mathematical Operators"
                      "∀" "∁" "∂" "∃" "∄" "∅" "∆" "∇" "∈" "∉" "∊" "∋" "∌" "∍" "∎" "∏"
                      "∐" "∑" "−" "∓" "∔" "∕" "∖" "∗" "∘" "∙" "√" "∛" "∜" "∝" "∞" "∟"
                      "∠" "∡" "∢" "∣" "∤" "∥" "∦" "∧" "∨" "∩" "∪" "∫" "∬" "∭" "∮" "∯"
                      "∰" "∱" "∲" "∳" "∴" "∵" "∶" "∷" "∸" "∹" "∺" "∻" "∼" "∽" "∾" "∿"
                      "≀" "≁" "≂" "≃" "≄" "≅" "≆" "≇" "≈" "≉" "≊" "≋" "≌" "≍" "≎" "≏"
                      "≐" "≑" "≒" "≓" "≔" "≕" "≖" "≗" "≘" "≙" "≚" "≛" "≜" "≝" "≞" "≟"
                      "≠" "≡" "≢" "≣" "≤" "≥" "≦" "≧" "≨" "≩" "≪" "≫" "≬" "≭" "≮" "≯"
                      "≰" "≱" "≲" "≳" "≴" "≵" "≶" "≷" "≸" "≹" "≺" "≻" "≼" "≽" "≾" "≿"
                      "⊀" "⊁" "⊂" "⊃" "⊄" "⊅" "⊆" "⊇" "⊈" "⊉" "⊊" "⊋" "⊌" "⊍" "⊎" "⊏"
                      "⊐" "⊑" "⊒" "⊓" "⊔" "⊕" "⊖" "⊗" "⊘" "⊙" "⊚" "⊛" "⊜" "⊝" "⊞" "⊟"
                      "⊠" "⊡" "⊢" "⊣" "⊤" "⊥" "⊦" "⊧" "⊨" "⊩" "⊪" "⊫" "⊬" "⊭" "⊮" "⊯"
                      "⊰" "⊱" "⊲" "⊳" "⊴" "⊵" "⊶" "⊷" "⊸" "⊹" "⊺" "⊻" "⊼" "⊽" "⊾" "⊿"
                      "⋀" "⋁" "⋂" "⋃" "⋄" "⋅" "⋆" "⋇" "⋈" "⋉" "⋊" "⋋" "⋌" "⋍" "⋎" "⋏"
                      "⋐" "⋑" "⋒" "⋓" "⋔" "⋕" "⋖" "⋗" "⋘" "⋙" "⋚" "⋛" "⋜" "⋝" "⋞" "⋟"
                      "⋠" "⋡" "⋢" "⋣" "⋤" "⋥" "⋦" "⋧" "⋨" "⋩" "⋪" "⋫" "⋬" "⋭" "⋮" "⋯"
                      "⋰" "⋱" "⋲" "⋳" "⋴" "⋵" "⋶" "⋷" "⋸" "⋹" "⋺" "⋻" "⋼" "⋽" "⋾" "⋿")
                     ("Superscripts & Subscripts"
                      "⁰" "ⁱ"   "⁴" "⁵" "⁶" "⁷" "⁸" "⁹" "⁺" "⁻" "⁼" "⁽" "⁾" "ⁿ"
                      "₀" "₁" "₂" "₃" "₄" "₅" "₆" "₇" "₈" "₉" "₊" "₋" "₌" "₍₎"
                      "ₐ" "ₑ" "ₒ" "ₓ" "ₔ" "ₕ" "ₖ" "ₗ" "ₘ" "ₙ" "ₚ" "ₛ" "ₜ")
                     ("Arrows"     "←" "→" "↑" "↓" "⇐" "⇒" "⇑" "⇓")
                     ("Greek"      "α" "β" "Y" "δ" "ε" "ζ" "η" "θ" "ι" "κ" "λ" "μ"
                      "ν" "ξ" "ο" "π" "ρ" "σ" "τ" "υ" "φ" "χ" "ψ" "ω")
                     ("Enclosed Alphanumerics"
                      "①" "②" "③" "④" "⑤" "⑥" "⑦" "⑧" "⑨" "Ⓐ" "Ⓑ" "Ⓒ" "Ⓓ" "Ⓔ" "Ⓕ" "Ⓖ"
                      "Ⓗ" "Ⓘ" "Ⓙ" "Ⓚ" "Ⓛ" "Ⓜ" "Ⓝ" "Ⓞ" "Ⓟ" "Ⓠ" "Ⓡ" "Ⓢ" "Ⓣ" "Ⓤ" "Ⓥ" "Ⓦ"
                      "Ⓧ" "Ⓨ" "Ⓩ" "ⓐ" "ⓑ" "ⓒ" "ⓓ" "ⓔ" "ⓕ" "ⓖ" "ⓗ" "ⓘ" "ⓙ" "ⓚ" "ⓛ" "ⓜ"
                      "ⓝ" "ⓞ" "ⓟ" "ⓠ" "ⓡ" "ⓢ" "ⓣ" "ⓤ" "ⓥ" "ⓦ" "ⓧ" "ⓨ" "ⓩ" "⓪")
                     ("Annotations"
                      "      " "      " "     " "     " "        " "    " "      " "      "
                      "      " "     " "    " "     " "     " "     "))))
    #+end_src

    ligature test [ERROR] --> ==> => <= >=
*** prettify-symbols setup
    Copied from https://github.com/fabrizioschiavi/pragmatapro/blob/master/emacs_snippets/pragmatapro-prettify-symbols-v0.827.el
    #+begin_src emacs-lisp
      (custom-set-variables
       '(face-font-family-alternatives
	 (quote
	  (("Monospace" "PragmataPro Liga" "courier" "fixed")
	   ("Monospace Serif" "PragmataPro Liga" "Courier 10 Pitch" "Consolas" "Courier Std" "FreeMono" "Nimbus Mono L" "courier" "fixed")
	   ("courier" "CMU Typewriter Text" "fixed")
	   ("Sans Serif" "GillSans" "helv" "helvetica" "arial" "fixed")
	   ("helv" "helvetica" "arial" "fixed")))))
    #+end_src

    #+begin_src emacs-lisp
      (add-to-list 'load-path (expand-file-name "lisp/emacs-pragmatapro-ligatures" user-emacs-directory))
      (require 'pragmatapro-lig)
      (add-hook 'prog-mode-hook #'pragmatapro-lig-mode)
    #+end_src
*** Emoji 😂
    #+begin_src emacs-lisp
      (if (version< "27.0" emacs-version)
          (set-fontset-font
           "fontset-default" 'unicode "Apple Color Emoji" nil 'prepend)
        (set-fontset-font
         t 'symbol (font-spec :family "Apple Color Emoji") nil 'prepend))
    #+end_src
** Themes
*** [[https://github.com/cryon/almost-mono-themes][cryon/almost-mono-themes: Almost monochromatic themes for emacs in a few variants]]
    #+begin_src emacs-lisp
      (use-package almost-mono-themes)
    #+end_src

*** gruvbox
    #+begin_src emacs-lisp
      (use-package gruvbox-theme :defer t)
    #+end_src
*** [[https://github.com/Mulling/mlso-theme][Mulling/mlso-theme: A dark, medium-contrast theme for emacs]]
    #+begin_src emacs-lisp
      (use-package mlso-theme :defer t)
    #+end_src

*** [[https://protesilaos.com/modus-themes/#h:1af85373-7f81-4c35-af25-afcef490c111][Modus Themes (Modus Operandi and Modus Vivendi) | Protesilaos Stavrou]]
    #+begin_src emacs-lisp
      (use-package modus-themes
        :init
        (setq modus-themes-slanted-constructs t
              modus-themes-bold-constructs t
              modus-themes-syntax 'faint
              modus-themes-paren-match 'subtle-bold)
        (use-package modus-operandi-theme)
        (use-package modus-vivendi-theme)
        (modus-themes-load-operandi))
    #+end_src

*** nordless
    #+BEGIN_SRC emacs-lisp
      (use-package nordless-theme :defer t)
    #+END_SRC

*** parchment
    #+begin_src emacs-lisp
      (use-package parchment-theme :defer t)
    #+end_src
*** symx
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package smyx-theme
        :defer t
        :config
        (set-face-attribute 'org-todo nil :box nil)
        (set-face-attribute 'org-done nil :box nil))
    #+END_SRC
*** tao-yin
    #+begin_src emacs-lisp
    (use-package tao-theme :defer t)
    #+end_src

** Code
   #+BEGIN_SRC emacs-lisp
   (show-paren-mode t)
   #+END_SRC
** Mode Line
*** Clock
    #+begin_src emacs-lisp
      (display-time)
    #+end_src

*** Deploy fanciness
**** Doom Mode Line
     #+begin_src emacs-lisp
       (use-package doom-modeline
	 :hook
	 (after-init . doom-modeline-mode)
	 :custom
	 (doom-modeline-icon t "Use all-the-icons"))
       #+end_src
** TODO COMMENT [[https://github.com/slumos/nano-emacs][NΛNO]]
   #+begin_src emacs-lisp
     ;; Path to nano emacs modules (mandatory)
     (add-to-list 'load-path "~/Projects/nano-emacs")
     (add-to-list 'load-path ".")

     ;; Window layout (optional)
     (require 'nano-layout)

     ;; Theming Command line options (this will cancel warning messages)
     (add-to-list 'command-switch-alist '("-dark"   . (lambda (args))))
     (add-to-list 'command-switch-alist '("-light"  . (lambda (args))))
     (add-to-list 'command-switch-alist '("-default"  . (lambda (args))))

     (cond
      ((member "-default" command-line-args) t)
      ((member "-dark" command-line-args) (require 'nano-theme-dark))
      (t (require 'nano-theme-light)))

     ;; Theme
     (require 'nano-faces)
     (nano-faces)

     (require 'nano-theme)
     (nano-theme)

     ;; Nano default settings (optional)
     (require 'nano-defaults)

     ;; Nano header & mode lines (optional)
     (require 'nano-modeline)
   #+end_src

* Helpers
** TODO Organize this mess!
** TODO auto-save-visited-mode
** TODO COMMENT [[https://jblevins.org/projects/deft/][Deft for Emacs]]
   Need to look deeper, but I think it only takes you to the file
   level? I use few large org files rather than many small ones so not
   sure this helps me.
   #+begin_src emacs-lisp
     (leaf deft
       :commands (deft)
       :setq
       (deft-directory . "~/Google Drive/Notes")
       (deft-recursive . t))
   #+end_src
** [[https://github.com/tttuuu888/package-loading-notifier][tttuuu888/package-loading-notifier: Notify when packages are loaded]]
   #+begin_src emacs-lisp
     (use-package package-loading-notifier
       :init
       (package-loading-notifier-mode 1))
   #+end_src

** [[https://github.com/wbolster/emacs-direnv][wbolster/emacs-direnv: direnv integration for emacs]]
   #+begin_src emacs-lisp
   (use-package direnv)
   #+end_src

** [[https://github.com/mhayashi1120/Emacs-wgrep][mhayashi1120/Emacs-wgrep: Writable grep buffer and apply the changes to files]]
   #+begin_src emacs-lisp
   (use-package wgrep)
   #+end_src
** Hydra
   #+begin_src emacs-lisp
     (use-package hydra)
   #+end_src

   #+begin_src emacs-lisp
     (use-package use-package-hydra)
   #+end_src

   #+begin_src emacs-lisp
     (defun invoke-hydra ()
       (interactive)
       (counsel-M-x "hydra-.*/body "))
     (global-set-key (kbd "C-c h") #'invoke-hydra)
   #+end_src
*** Hydras
**** Commonly visited files

     This seems like a decent demonstration of literate programming. Add a row to this table, then eval the defhydra block.
     #+name: commonly-visited-files-shortcuts
     | key | path                            | name            |
     |-----+---------------------------------+-----------------|
     | c   | ~/.config/emacs/config.org      | main config     |
     | N   | ~/Sync/OneDrive/Notes/NOTES.org | NOTES.org       |
     | n   | ~/Sync/GDrive/Notes/Notes.org   | Work notes      |
     | k   | ~/Sync/GDrive/Notes/DMP.org     | Krux work       |
     | p   | ~/.config/emacs/personal.org    | personal config |
     | s   | ~/Sync/ST/Notes/SLUMOS.org      | SLUMOS.org      |
     | w   | ~/.config/emacs/work.org        | work config     |

     #+name: table-to-find-file-heads
     #+begin_src emacs-lisp :var table=commonly-visited-files-shortcuts :results output replace
       (cl-loop for row in table
         do
         (print (list (car row) (list 'find-file (elt row 1)) (elt row 2) :column "File Shortcuts")))
     #+end_src

     #+begin_src emacs-lisp :noweb yes
       (defhydra hydra-commonly-visited-files-shortcuts (:color blue)
         <<table-to-find-file-heads(table=commonly-visited-files-shortcuts)>>)
       (global-set-key (kbd "C-c v") #'hydra-commonly-visited-files-shortcuts/body)
     #+end_src

** TODO slumos-org-copy-subtree-to-system
   The idea of this is to copy HTML to the macOS clipboard and tag it as HTML so that it pastes properly.
   See [[https://stackoverflow.com/questions/11085654/apple-script-how-can-i-copy-html-content-to-the-clipboard][macos - Apple Script : How can I copy html content to the clipboard? - Stack Overflow]]

   #+begin_src emacs-lisp
     (defun slumos-org-copy-to-clipboard ()
       "Copy org subtree to system clipboard as rich text"
       (interactive)
       (let* ((backend (or (org-export-get-backend 'slimhtml)
                           (org-export-get-backend 'html)))
              (html-buf (org-export-to-buffer backend "*html-buf*" nil t nil nil '(:toc nil) (lambda () (html-mode)))))
         (with-current-buffer html-buf
           (shell-command-on-region
            (point-min)
            (point-max)
            "textutil -stdin -format html -convert rtf -stdout | pbcopy")
           (bury-buffer))))
   #+end_src

** COMMENT aggressive-indent
   #+begin_src emacs-lisp
     (use-package aggressive-indent
       :defer t
       :commands (aggressive-indent-mode)
       :quelpa (aggressive-indent
		:fetcher github
		:repo "Malabarba/aggressive-indent-mode")
       :hook (ruby-mode . aggressive-indent-mode))
   #+end_src

** Automagic make scripts executable
   #+BEGIN_SRC emacs-lisp
     (custom-set-variables '(executable-prefix-env t))
   #+END_SRC
** Better packages ux
   #+BEGIN_SRC emacs-lisp
     (leaf paradox
       :require t
       :commands
       list-packages
       paradox-list-packages
       :init
       (paradox-enable)
       (add-hook 'paradox-menu-mode-hook #'hl-line-mode))
   #+END_SRC
** SKIP COMMENT Better Zoom
   _Seems to have stopped working in 26_.
   The =zoom-frm= package improves on =text-scale-adjust= by providing
   functions for changing size across all buffers.

   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package zoom-frm
       :ensure nil
       :bind (("C-c C-+" . zoom-in/out)
              ("C-c C--" . zoom-in/out)
              ("C-c C-0" . zoom-in/out)
              ("C-c C-=" . zoom-in/out)))
   #+END_SRC
** Font scale for all frames
   #+BEGIN_SRC emacs-lisp
     (use-package default-text-scale
       :init (default-text-scale-mode))
   #+END_SRC
** Copy region formatted for various markup systems
   #+BEGIN_SRC emacs-lisp
   (use-package copy-as-format)
   #+END_SRC
** Jumping
*** [[https://github.com/abo-abo/ace-link][abo-abo/ace-link: Quickly follow links in Emacs]]
    #+BEGIN_SRC emacs-lisp
      (use-package ace-link
	:config
	(ace-link-setup-default)
	:bind
	(:map org-mode-map
	("M-o" . ace-link-org))
	(:map Info-mode-map
	("o" . ace-link-info)))
    #+END_SRC
*** avy
    #+BEGIN_QUOTE
      "If you're familiar with the popular `ace-jump-mode' package, this
      package does all that and more, without the implementation
      headache."
    #+END_QUOTE
    #+BEGIN_SRC emacs-lisp
	(use-package avy
          :bind
          ("C-." . avy-goto-char)
          ("M-g M-g" . avy-goto-line))
    #+END_SRC
*** COMMENT [[https://github.com/jacktasia/dumb-jump][jacktasia/dumb-jump: an Emacs "jump to definition" package]]
    #+BEGIN_SRC emacs-lisp
      (use-package dumb-jump
	:bind (("M-g o" . dumb-jump-go-other-window)
	       ("M-g j" . dumb-jump-go)
	       ("M-g i" . dumb-jump-go-prompt)
	       ("M-g x" . dumb-jump-go-prefer-external)
	       ("M-g z" . dumb-jump-go-prefer-external-other-window))
	:config (setq dumb-jump-selector 'ivy))
    #+END_SRC
** multiple-cursors
   [[http://emacsrocks.com/e13.html][Emacs Rocks! Episode 13: multiple-cursors]]
   [[https://github.com/abo-abo/hydra/wiki/multiple-cursors][multiple cursors · abo-abo/hydra Wiki]]

   #+begin_src emacs-lisp :noweb yes
     (use-package multiple-cursors
       :bind
       ("C-c m" . hydra-multiple-cursors/body)
       ("C->" . mc/mark-next-like-this)
       ("C-<" . mc/mark-previous-like-this)
       :config
       <<mc-hydra>>)
   #+end_src

*** Multiple Cursors Hydra
    :PROPERTIES:
    :header-args: :noweb-ref mc-hydra :tangle no
    :END:
    #+begin_src emacs-lisp
      (defhydra hydra-multiple-cursors (:hint nil)
        "
       Up^^             Down^^           Miscellaneous           % 2(mc/num-cursors) cursor%s(if (> (mc/num-cursors) 1) \"s\" \"\")
      ------------------------------------------------------------------
       [_p_]   Next     [_n_]   Next     [_l_] Edit lines  [_0_] Insert numbers
       [_P_]   Skip     [_N_]   Skip     [_a_] Mark all    [_A_] Insert letters
       [_M-p_] Unmark   [_M-n_] Unmark   [_s_] Search      [_q_] Quit
       [_|_] Align with input CHAR       [Click] Cursor at point"
        ("l" mc/edit-lines :exit t)
        ("a" mc/mark-all-like-this :exit t)
        ("n" mc/mark-next-like-this)
        ("N" mc/skip-to-next-like-this)
        ("M-n" mc/unmark-next-like-this)
        ("p" mc/mark-previous-like-this)
        ("P" mc/skip-to-previous-like-this)
        ("M-p" mc/unmark-previous-like-this)
        ("|" mc/vertical-align)
        ("s" mc/mark-all-in-region-regexp :exit t)
        ("0" mc/insert-numbers :exit t)
        ("A" mc/insert-letters :exit t)
        ("<mouse-1>" mc/add-cursor-on-click)
        ;; Help with click recognition in this hydra
        ("<down-mouse-1>" ignore)
        ("<drag-mouse-1>" ignore)
        ("q" nil))
    #+end_src
*** SKIP COMMENT leaf-version
    #+begin_src emacs-lisp
      (leaf multiple-cursors
        :bind
        ("C-c m" . hydra-multiple-cursors/body)
        ("C-c n" . mc/mark-next-like-this)
        :hydra (hydra-multiple-cursors
                (:hint nil)
                "
             Up^^             Down^^           Miscellaneous
            ------------------------------------------------------------------
             [_p_]   Next     [_n_]   Next     [_l_] Edit lines  [_0_] Insert numbers
             [_P_]   Skip     [_N_]   Skip     [_a_] Mark all    [_A_] Insert letters
             [_M-p_] Unmark   [_M-n_] Unmark   [_s_] Search      [_q_] Quit
             [_|_] Align with input CHAR       [Click] Cursor at point"
                ("l" mc/edit-lines :exit t)
                ("a" mc/mark-all-like-this :exit t)
                ("n" mc/mark-next-like-this)
                ("N" mc/skip-to-next-like-this)
                ("M-n" mc/unmark-next-like-this)
                ("p" mc/mark-previous-like-this)
                ("P" mc/skip-to-previous-like-this)
                ("M-p" mc/unmark-previous-like-this)
                ("|" mc/vertical-align)
                ("s" mc/mark-all-in-region-regexp :exit t)
                ("0" mc/insert-numbers :exit t)
                ("A" mc/insert-letters :exit t)
                ("<mouse-1>" mc/add-cursor-on-click)
                ;; Help with click recognition in this hydra
                ("<down-mouse-1>" ignore)
                ("<drag-mouse-1>" ignore)
                ("q" nil)))
    #+end_src
** which-key: Cool cheat-sheet for bound keys
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :config (which-key-mode))
   #+END_SRC
** undo-tree
   [[http://pragmaticemacs.com/emacs/advanced-undoredo-with-undo-tree/][Advanced undo/redo with undo-tree | Pragmatic Emacs]]
   [[http://www.dr-qubit.org/undo-tree/undo-tree.el][www.dr-qubit.org/undo-tree/undo-tree.el]]
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :bind
       ("C-x u" . undo-tree-visualize)
       :config
       (setq undo-tree-visualizer-timestamps t)
       (global-undo-tree-mode 1))
   #+END_SRC
** WS Butler
   This cleans up trailing whitespace only on lines I edited. Briliant!
   #+BEGIN_SRC emacs-lisp
     (use-package ws-butler
       :config
       (ws-butler-global-mode t))
   #+END_SRC
** yasnippet
   #+begin_src emacs-lisp
     (use-package yasnippet
       :commands (yas-minor-mode)
       :hook (org-mode . yas-minor-mode)
       :config
       (yas-reload-all)
       :custom
       (yas-snippet-dirs (list (expand-file-name "snippets" user-emacs-directory))))
   #+end_src

   #+begin_src emacs-lisp :tangle no
     (leaf yasnippet
       :require t
       :commands (yas-minor-mode)
       :hook (org-mode . yas-minor-mode)
       :custom
       ((yas-snippet-dirs . (expand-file-name "snippets" user-emacs-directory)))
       :hydra
       (hydra-yasnippet (:color blue :hint nil)
       "
                   ^YASnippets^
     --------------------------------------------
       Modes:    Load/Visit:    Actions:

      _g_lobal  _d_irectory    _i_nsert
      _m_inor   _f_ile         _t_ryout
      _e_xtra   _l_ist         _n_ew
                _a_ll
     "
       ("d" yas-load-directory)
       ("e" yas-activate-extra-mode)
       ("i" yas-insert-snippet)
       ("f" yas-visit-snippet-file :color blue)
       ("n" yas-new-snippet)
       ("t" yas-tryout-snippet)
       ("l" yas-describe-tables)
       ("g" yas/global-mode)
       ("m" yas/minor-mode)
       ("a" yas-reload-all)))
   #+end_src

** Honor .editorconfig files
   #+BEGIN_SRC emacs-lisp
     (use-package editorconfig
       :init
       (editorconfig-mode 1))
   #+END_SRC
** Counsel / Ivy / Swiper
   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :diminish ivy-mode
       :init (ivy-mode 1)
       :bind
       (:map ivy-mode-map
       ("C-s" . swiper-isearch)
       ("M-x" . counsel-M-x)
       ("C-x C-f" . counsel-find-file)
       ("<f1> f" . counsel-describe-function)
       ("<f1> v" . counsel-describe-variable)
       ("C-c u" . counsel-unicode-char)
       ("C-c r" . counsel-rg)
       :map ivy-minibuffer-map
       ("<return>" . ivy-alt-done)
       ("<tab>" . ivy-partial)
       :map org-mode-map
       ("C-c C-j" . counsel-org-goto))
       :config
       (setq enable-recursive-minibuffers t)
       (setq ivy-height 20)
       (setq ivy-use-selectable-prompt t)
       (setq ivy-use-virtual-buffers t)
       (setq ivy-count-format "(%d/%d) ")
       (setq ivy-display-style 'fancy)
       (setq ivy-re-builders-alist
	     '((read-file-name-internal . ivy--regex-fuzzy)
	       (t . ivy--regex-plus)))
       (setq magit-completing-read-function #'ivy-completing-read))
   #+END_SRC

   #+begin_src emacs-lisp
     (use-package ivy-avy
       :after counsel)
   #+end_src


   #+BEGIN_SRC emacs-lisp
   (use-package counsel-projectile
     :bind
     ("C-x p SPC" . counsel-projectile))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package flx)
   #+END_SRC

   #+begin_src emacs-lisp
     (use-package ivy-rich
       :after counsel
       :config
       (ivy-rich-mode 1)
       (setq ivy-format-function #'ivy-format-function-line))
   #+end_src

*** [[https://github.com/masasam/emacs-counsel-tramp][masasam/emacs-counsel-tramp: Tramp ivy interface for ssh and docker and ‎vagrant]]
    #+BEGIN_SRC emacs-lisp
      (use-package counsel-tramp
	:hook
	(counsel-tramp-pre-command-hook . (lambda ()
					    (projectile-mode 0)
					    (editorconfig-mode 0)))
	(counsel-tramp-quit-hook . (lambda ()
				     (projectile-mode 1)
				     (editorconfig-mode 1))))
    #+END_SRC
*** [[https://github.com/raxod502/prescient.el][raxod502/prescient.el: ☄️ Simple but effective sorting and filtering for Emacs.]]
    #+BEGIN_SRC emacs-lisp
    (use-package ivy-prescient
      :init
      (ivy-prescient-mode))
    #+END_SRC
*** TODO [[http://pragmaticemacs.com/emacs/save-window-layouts-with-ivy-view/][Save window layouts with ivy-view | Pragmatic Emacs]]
*** TODO [[https://github.com/emacs-taskrunner/emacs-taskrunner/blob/master/taskrunner.el][emacs-taskrunner/taskrunner.el]]
** TRAMP
   #+BEGIN_QUOTE
   TRAMP stands for “Transparent Remote (file) Access, Multiple
   Protocol”.  This package provides remote file editing, similar to
   Ange FTP.
   #+END_QUOTE
*** Add handling for TOTP prompt
    #+begin_src emacs-lisp
      (use-package tramp
        :custom
        (tramp-password-prompt-regexp "^.*\\([pP]assword\\|[pP]assphrase\\|Verification code\\).*:? *"))
    #+end_src

** Functions
   By me or collected from awesome people.
*** colorize ansi file
    #+begin_src emacs-lisp
      (defun slumos/ansi-colorize-dwim ()
        "Colorize the region using ansi-color-apply-on-region"
        (interactive "*")
        (if (use-region-p)
            (ansi-color-apply-on-region (region-beginning) (region-end))
          (ansi-color-apply-on-region (point-min) (point-max))))
    #+end_src
*** insert a random password
    #+BEGIN_SRC emacs-lisp
      (defun slumos/insert-random-password ()
	"Generate a random password and insert it at point"
	(interactive)
	(insert
	 (s-chomp
	  (shell-command-to-string "pwgen 32"))))
    #+END_SRC
*** insert-date/time-stamp
    #+BEGIN_SRC emacs-lisp
      (defun slumos/insert-datetime-stamp (&optional with-time)
	"Insert current date (with prefix current time) in ISO8601"
	(interactive "*P")
	(insert (if with-time
		    (format-time-string "%FT%T")
		  (format-time-string "%F"))))
    #+END_SRC
*** show-file-name
#+BEGIN_SRC emacs-lisp
(defun show-file-name ()
  "Show the full path file name in the minibuffer and copy it to the kill ring."
  (interactive)
  (message (buffer-file-name))
  (kill-new (file-truename buffer-file-name))
)
#+END_SRC
*** rename-file-and-buffer
    Another /omg, why wasn't this in Emacs 18/ moment.

    From the really-great http://emacsredux.com/blog/2013/05/04/rename-file-and-buffer/

#+BEGIN_SRC emacs-lisp
  (defun rename-file-and-buffer ()
    "Rename the current buffer and file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (message "Buffer is not visiting a file!")
        (let ((new-name (read-file-name "New name: " filename)))
          (cond
           ((vc-backend filename) (vc-rename-file filename new-name))
           (t
            (rename-file filename new-name t)
            (set-visited-file-name new-name t t)))))))
#+END_SRC

*** compile-notify

#+BEGIN_SRC emacs-lisp
  (defun slumos/compile-notify (buf status)
    (if (fboundp #'tn-notify) (tn-notify status "Emacs" "Compilation"))
    (message "compile-notify: %s %s" buf status))
  (add-to-list 'compilation-finish-functions #'slumos/compile-notify)
#+END_SRC

— slumos

*** window-toggle-split-direction

https://www.emacswiki.org/emacs/ToggleWindowSplit

#+BEGIN_SRC emacs-lisp
  (defun window-toggle-split-direction ()
    "Switch window split from horizontally to vertically, or vice versa.

  i.e. change right window to bottom, or change bottom window to right."
    (interactive)
    (require 'windmove)
    (let ((done))
      (dolist (dirs '((right . down) (down . right)))
        (unless done
          (let* ((win (selected-window))
                 (nextdir (car dirs))
                 (neighbour-dir (cdr dirs))
                 (next-win (windmove-find-other-window nextdir win))
                 (neighbour1 (windmove-find-other-window neighbour-dir win))
                 (neighbour2 (if next-win (with-selected-window next-win
                                            (windmove-find-other-window neighbour-dir next-win)))))
            ;;(message "win: %s\nnext-win: %s\nneighbour1: %s\nneighbour2:%s" win next-win neighbour1 neighbour2)
            (setq done (and (eq neighbour1 neighbour2)
                            (not (eq (minibuffer-window) next-win))))
            (if done
                (let* ((other-buf (window-buffer next-win)))
                  (delete-window next-win)
                  (if (eq nextdir 'right)
                      (split-window-vertically)
                    (split-window-horizontally))
                  (set-window-buffer (windmove-find-other-window neighbour-dir) other-buf))))))))
#+END_SRC

— [[https://www.emacswiki.org/emacs/BaManzi][BaManzi]]
** browse-at-remote
   #+BEGIN_SRC emacs-lisp
   (use-package browse-at-remote)
   #+END_SRC
** [[https://github.com/storvik/emacs-lastpass][storvik/emacs-lastpass: Emacs LastPass command wrapper.]]
   #+BEGIN_SRC emacs-lisp
        (use-package lastpass
          :config
          (setq lastpass-user user-mail-address)
          (setq lastpass-multifactor-use-passcode nil)
          (lastpass-auth-source-enable)
          :hook
          (lastpass-logged-in-hook . #'lastpass-auth-source-enable))

   #+END_SRC
** Edit the web with +Atom+ Emacs
   #+BEGIN_SRC emacs-lisp
   (use-package atomic-chrome
     :init
     (atomic-chrome-start-server))
   #+END_SRC
** Edit S3 files directly
   [[https://github.com/mattusifer/s3ed][mattusifer/s3ed: An interface to s3 from emacs]]
   #+begin_src emacs-lisp
   (use-package s3ed)
   #+end_src
** COMMENT AWSCLI Completion
   #+begin_src emacs-lisp
     (use-package awscli-capf
       :commands (awscli-capf-add)
       :hook (org-mode . awscli-capf-add))
   #+end_src
** TRYING Folding for YAML: [[https://gitlab.com/emacs-stuff/indent-tools/][indent-tools]]

   Obviously this does a lot more but folding YAML is why I'm looking
   at it.
   #+BEGIN_SRC emacs-lisp
     (use-package indent-tools
       :bind ("C-c >" . indent-tools-hydra/body))
   #+END_SRC
** [[https://github.com/politza/pdf-tools][PDF-Tools: Emacs support library for PDF files.]]
   #+begin_src emacs-lisp
     (leaf pdf-tools
       :package t
       :config
       (pdf-tools-install)
       :bind
       'pdf-view-mode-map
       ("\\" . hydra-pdf-tools/body)
       ("<s-spc>" .  pdf-view-scroll-down-or-next-page)
       ("g"  . pdf-view-first-page)
       ("G"  . pdf-view-last-page)
       ("l"  . image-forward-hscroll)
       ("h"  . image-backward-hscroll)
       ("j"  . pdf-view-next-page)
       ("k"  . pdf-view-previous-page)
       ("e"  . pdf-view-goto-page)
       ("u"  . pdf-view-revert-buffer)
       ("al" . pdf-annot-list-annotations)
       ("ad" . pdf-annot-delete)
       ("aa" . pdf-annot-attachment-dired)
       ("am" . pdf-annot-add-markup-annotation)
       ("at" . pdf-annot-add-text-annotation)
       ("y"  . pdf-view-kill-ring-save)
       ("i"  . pdf-misc-display-metadata)
       ("s"  . pdf-occur)
       ("b"  . pdf-view-set-slice-from-bounding-box)
       ("r"  . pdf-view-reset-slice)
       :hydra
       (hydra-pdf-tools
	(:color blue :hint nil)
	"
									   ╭───────────┐
	    Move  History   Scale/Fit     Annotations  Search/Link    Do   │ PDF Tools │
	╭──────────────────────────────────────────────────────────────────┴───────────╯
	      ^^_g_^^      _B_    ^↧^    _+_    ^ ^     [_al_] list    [_s_] search    [_u_] revert buffer
	      ^^^↑^^^      ^↑^    _H_    ^↑^  ↦ _W_ ↤   [_am_] markup  [_o_] outline   [_i_] info
	      ^^_p_^^      ^ ^    ^↥^    _0_    ^ ^     [_at_] text    [_F_] link      [_d_] dark mode
	      ^^^↑^^^      ^↓^  ╭─^─^─┐  ^↓^  ╭─^ ^─┐   [_ad_] delete  [_f_] search link
	 _h_ ←pag_e_→ _l_  _N_  │ _P_ │  _-_    _b_     [_aa_] dired
	      ^^^↓^^^      ^ ^  ╰─^─^─╯  ^ ^  ╰─^ ^─╯   [_y_]  yank
	      ^^_n_^^      ^ ^  _r_eset slice box
	      ^^^↓^^^
	      ^^_G_^^
	--------------------------------------------------------------------------------
	     "
	("\\" hydra-master/body "back")
	("<ESC>" nil "quit")
	("al" pdf-annot-list-annotations)
	("ad" pdf-annot-delete)
	("aa" pdf-annot-attachment-dired)
	("am" pdf-annot-add-markup-annotation)
	("at" pdf-annot-add-text-annotation)
	("y"  pdf-view-kill-ring-save)
	("+" pdf-view-enlarge :color red)
	("-" pdf-view-shrink :color red)
	("0" pdf-view-scale-reset)
	("H" pdf-view-fit-height-to-window)
	("W" pdf-view-fit-width-to-window)
	("P" pdf-view-fit-page-to-window)
	("n" pdf-view-next-page-command :color red)
	("p" pdf-view-previous-page-command :color red)
	("d" pdf-view-dark-minor-mode)
	("b" pdf-view-set-slice-from-bounding-box)
	("r" pdf-view-reset-slice)
	("g" pdf-view-first-page)
	("G" pdf-view-last-page)
	("e" pdf-view-goto-page)
	("o" pdf-outline)
	("s" pdf-occur)
	("i" pdf-misc-display-metadata)
	("u" pdf-view-revert-buffer)
	("F" pdf-links-action-perfom)
	("f" pdf-links-isearch-link)
	("B" pdf-history-backward :color red)
	("N" pdf-history-forward :color red)
	("l" image-forward-hscroll :color red)
	("h" image-backward-hscroll :color red)))
   #+end_src
** smerge hydra from [[https://github.com/alphapapa/unpackaged.el#smerge-mode][alphapapa/unpackaged.el: A collection of useful Emacs Lisp code that isn't substantial enough to be packaged]]
   #+begin_src emacs-lisp
     (use-package smerge-mode
       :after hydra
       :config
       (defhydra unpackaged/smerge-hydra
         (:color pink :hint nil :post (smerge-auto-leave))
         "
     ^Move^       ^Keep^               ^Diff^                 ^Other^
     ^^-----------^^-------------------^^---------------------^^-------
     _n_ext       _b_ase               _<_: upper/base        _C_ombine
     _p_rev       _u_pper              _=_: upper/lower       _r_esolve
     ^^           _l_ower              _>_: base/lower        _k_ill current
     ^^           _a_ll                _R_efine
     ^^           _RET_: current       _E_diff
     "
         ("n" smerge-next)
         ("p" smerge-prev)
         ("b" smerge-keep-base)
         ("u" smerge-keep-upper)
         ("l" smerge-keep-lower)
         ("a" smerge-keep-all)
         ("RET" smerge-keep-current)
         ("\C-m" smerge-keep-current)
         ("<" smerge-diff-base-upper)
         ("=" smerge-diff-upper-lower)
         (">" smerge-diff-base-lower)
         ("R" smerge-refine)
         ("E" smerge-ediff)
         ("C" smerge-combine-with-next)
         ("r" smerge-resolve)
         ("k" smerge-kill-current)
         ("ZZ" (lambda ()
                 (interactive)
                 (save-buffer)
                 (bury-buffer))
          "Save and bury buffer" :color blue)
         ("q" nil "cancel" :color blue))
       :hook (magit-diff-visit-file . (lambda ()
                                        (when smerge-mode
                                          (unpackaged/smerge-hydra/body)))))
   #+end_src
** [[https://github.com/pashky/restclient.el][pashky/restclient.el: HTTP REST client tool for emacs]]
   [[https://www.youtube.com/watch?v=fTvQTMOGJaw][(26) Emacs Rocks! Episode 15: restclient-mode - YouTube]]
   #+BEGIN_SRC emacs-lisp
     (use-package restclient)
     (use-package ob-restclient
       :config
       (org-babel-do-load-languages
        'org-babel-load-languages
        '((restclient . t)
          (python . t))))
   #+END_SRC
** [[https://github.com/mihaiolteanu/lastfm.el][mihaiolteanu/lastfm.el: Last.fm API for Emacs Lisp]]
   #+begin_src emacs-lisp
     (leaf lastfm)
   #+end_src
** [[https://github.com/mihaiolteanu/vuiet][mihaiolteanu/vuiet: The music player and explorer for Emacs]]
   #+begin_src emacs-lisp

   #+end_src
** Spelling
   #+begin_src emacs-lisp
     (dolist (hook '(text-mode))
       (add-hook hook (lambda () (flyspell-mode 1))))
     (dolist (hook '(prog-mode))
       (add-hook hook (lambda () (flyspell-prog-mode))))
   #+end_src

** TODO [[https://github.com/emacs-languagetool/flycheck-languagetool][flycheck-languagetool]]
* Magit
  [[https://magit.vc/][It's Magit! A Git Porcelain inside Emacs]]

  Magit—like Org—is a total killer app and probably one of the reasons
  Emacs had a revival in the recent(ish) years.

  Just like [[http://mh-e.sourceforge.net/][MH-E]] back in the day, it's not about avoiding the CLI,
  it's about heads-up display of the important stuff and driving the
  CLI with single keystrokes.

  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :bind
      ("\C-x g" . magit-status)
      :custom
      (magit-file-mode t)
      (magit-clone-default-directory "~/Projects/")
      (magit-repository-directories
       '(("~/Projects" . 1)
         ("~/Projects/iac" . 1)
         ("~/Projects/puppet" . 1)))
      (transient-default-level 5)
      (auto-revert-verbose t))
  #+END_SRC

  #+begin_src emacs-lisp
    ;; Security has pretty much killed this.
    ;; (use-package forge
    ;;   :after magit
    ;;   :custom
    ;;   (forge-topic-list-limit '(60 . 0)))
  #+end_src

  Based on [[https://gist.github.com/dotemacs/9a0433341e75e01461c9][this gist]]:
  #+begin_src emacs-lisp
    (defun slumos/parse-git-repo-url (url)
      "convert a git remote location as a HTTP URL"
      (if (string-match "^http" url)
          url
        (replace-regexp-in-string "\\(.*\\)@\\(.*\\):\\(.*\\)\\(\\.git?\\)"
                                  "https://\\2/\\3"
                                  url)))
    (defun slumos/magit-open-repo ()
      "open remote repo URL"
      (interactive)
      (let ((url (magit-get "remote" "origin" "url")))
        (progn
          (browse-url (slumos/parse-git-repo-url url))
          (message "opening repo %s" url))))

    (add-hook 'magit-mode-hook
              (lambda ()
                (local-set-key (kbd "o") #'slumos/magit-open-repo)))
  #+end_src

  Inspired by [[https://emacs.stackexchange.com/questions/30487/add-copy-to-kill-ring-current-branch-name-with-magit][Add (copy) to kill ring current branch name with Magit - Emacs Stack Exchange]]
  #+begin_src emacs-lisp
    (defun slumos/magit-copy-buffer-current-branch ()
      "Copy current branch name to clipboard"
      (interactive)
      (let ((branch (magit-get-current-branch)))
        (if branch
            (progn (kill-new branch)
                   (message "%s" branch))
          (user-error "There is not current branch"))))
  #+end_src

* Org [0/5]                                                             :org:
** Initialization
   #+BEGIN_SRC emacs-lisp :noweb yes :results value silent
     (use-package org
       :commands (org-agenda org-capture org-store-link)
       :bind
       <<org-binds>>
       :config
       <<org-config>>)
   #+END_SRC

** Binds
   :PROPERTIES:
   :header-args: :noweb-ref org-binds :tangle no
   :END:
   Pretty basic stuff here.
   #+BEGIN_SRC emacs-lisp
     (("C-c a" . org-agenda)
      ("C-c c" . org-capture)
      ("C-c l" . org-store-link)
      ("C-c g" . org-mac-grab-link))
   #+END_SRC
** Config
   :PROPERTIES:
   :header-args: :noweb-ref org-config :tangle no
   :END:

   #+begin_src emacs-lisp
   (custom-set-variables '(org-catch-invisible-edits 'error))
   #+end_src

   Regular ellipsis drives me insane because I tend to end regular
   lines that way all the time ... (see?)
   #+BEGIN_SRC emacs-lisp
     (custom-set-variables
      '(org-ellipsis " ⬎"))
   #+END_SRC

   My muscle memory is completely stuck on =M-< TAB=. This just
   enables what I'm pretty sure was a default in some distant past.

   #+BEGIN_SRC emacs-lisp
   (setq org-cycle-global-at-bob t)
   #+END_SRC

   These settings fix refile completion with [[*Counsel / Ivy / Swiper][Counsel]]:

   #+BEGIN_SRC emacs-lisp
     (setq org-refile-use-outline-path 'file
	   org-outline-path-complete-in-steps nil
	   org-refile-targets '((org-agenda-files :maxlevel . 2)))
   #+END_SRC

   That's why I also like to enable speed commands when point is at
   beginning-of-buffer. This means that immediately after opening an
   org file, you can jump to the first heading just by tapping =n=.

   #+BEGIN_SRC emacs-lisp
     (setq org-use-speed-commands
	   (lambda () (or (eq (point) 1)
			  (looking-at org-outline-regexp-bol))))
   #+END_SRC

   Set up some modules by default. I use =org-id= for capture targets,
   =org-mac-link= *all* the damn time, and =ob-shell= for
   some—ahem—"literate" DevOps. More like notebook DevOps in practice,
   but still awesome.

   #+BEGIN_SRC emacs-lisp
   (setq org-modules '(org-id org-mac-link org-protocol ob-shell))
   (org-load-modules-maybe t)
   #+END_SRC

   I don't use =hl-line-mode= often, but when I do, it's in buffers
   that are lists of things.

   #+BEGIN_SRC emacs-lisp
   (add-hook 'org-agenda-mode-hook #'hl-line-mode)
   #+END_SRC

   #+BEGIN_QUOTE
   After saving, also commit to a worktree work-in-progress ref.

   After saving the current file-visiting buffer this mode also
   commits the changes to the worktree work-in-progress ref for
   the current branch.
   #+END_QUOTE

   How awesome does that sound? To call back all your saves is just
   =M-x magit-wip-log-current=.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook (lambda ()
				(magit-wip-after-save-mode t)
				(magit-wip-after-apply-mode t)
				(magit-wip-before-change-mode t)))
   #+END_SRC

   [[https://github.com/enisozgen/idle-org-agenda][enisozgen/idle-org-agenda: A package that shows your agenda when Emacs is idle]]
   #+begin_src emacs-lisp
   (use-package idle-org-agenda
     :after org-agenda
     :config (idle-org-agenda-mode))
   #+end_src

   No love for zsh??
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-babel-shell-names "zsh")
     (org-babel-shell-initialize)
   #+END_SRC

   Decided to add a save timestamp to help me tell that whatever I'm
   editing is up to date with other copies.
   #+BEGIN_SRC emacs-lisp
     (add-hook 'before-save-hook 'time-stamp)
   #+END_SRC
** TODO Enable and play with [[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-sqlite.org.html][ob-sqlite]]
** Bullets
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :hook (org-mode . org-bullets-mode)
       :config (setq org-bullets-bullet-list '("‣")))
   #+END_SRC
** Prettify
   #+begin_src emacs-lisp
     (defun slumos/org-prettify ()
       (interactive)
       (setq prettify-symbols-alist
             '(("TODO" . "")
               ("DONE" . ""))))
   #+end_src

** Exporting
   #+BEGIN_SRC emacs-lisp
   ;(use-package ox-confluence :after org)
   (use-package ox-clip :after org)
   (use-package ox-gfm :after org)
   (use-package ox-jira :after org)
   (use-package ox-pandoc :after org)
   (use-package ox-slimhtml :after org)
   #+END_SRC
*** COMMENT My crazy numbered paragraphs idea
    #+begin_src emacs-lisp
      (defun numbered-paragraphs-headline (headline contents info)
        "Transcode HEADLINE as a plain numbered paragraph. CONTENTS is
      headline contents. INFO is plist used as a communication
      channel."
        (let* ((level (org-export-get-relative-level headline info))
               (num (org-export-get-headline-number)))
          (concat headline contents)))
    #+end_src
*** TODO Check out [[https://github.com/yejianye/toolbox/blob/bd08a355dbc6804aa507c29a60053837eaa2e99c/emacs/funcs.el#L49][toolbox/funcs.el at bd08a355dbc6804aa507c29a60053837eaa2e99c · yejianye/toolbox]]
** Agenda

   #+begin_src emacs-lisp
     (setq org-agenda-custom-commands
           '(("ca" "Daily Agenda View"
              ((org-ql-block '(and (path "DMP")
                                   (todo "BLOCKED" "START" "WORK"))
                             ((org-ql-block-header "Progress")))
               (org-ql-block '(and (path "DMP") (planning :from -1 :to 7))
                             ((org-ql-block-headher "Plan")))
               (agenda)))))
   #+end_src

** Additions
*** COMMENT [[https://github.com/Chobbes/org-chef][Chobbes/org-chef: A package for making a cookbook and managing recipes with org-mode.]]
    #+begin_src emacs-lisp
      (use-package org-chef)
    #+end_src

    #+begin_src emacs-lisp
      (add-to-list 'org-capture-templates
                   '(("c" "Cookbook" entry (file "~/Sync/OneDrive/ST/Notes/Cookbook.org")
                      "%(org-chef-get-recipe-from-url)"
                      :empty-lines 1)
                     ("m" "Manual Cookbook" entry (file "~/Sync/OneDrive/ST/Notes/Cookbook.org")
                      "* %^{Recipe title: }\n  :PROPERTIES:\n  :source-url:\n  :prep-time:\n  :cook-time:\n  :ready-in:\n  :END:\n** Ingredients\n   %?\n** Directions\n\n")))
    #+end_src

*** TODO [[https://github.com/alphapapa/org-sticky-header][alphapapa/org-sticky-header: Show off-screen Org heading at top of window]]
    #+begin_src emacs-lisp
      (use-package org-sticky-header)
    #+end_src

*** TODO [[https://github.com/Chobbes/org-chef][Chobbes/org-chef: A package for making a cookbook and managing recipes with org-mode.]]
*** TODO [[https://github.com/ahendriksen/ob-tmux][ahendriksen/ob-tmux: Ob-tmux is an Emacs library that allows org mode to evaluate code blocks in a tmux session.]]
    #+begin_src emacs-lisp
      (use-package ob-tmux
        :custom
        (org-babel-tmux-terminal "iterm")
      )
    #+end_src

*** [[https://github.com/magit/orgit][magit/orgit: Support for Org links to Magit buffers]]
    #+begin_src emacs-lisp
      (use-package orgit)
    #+end_src
*** [[https://github.com/akirak/ivy-omni-org][akirak/ivy-omni-org: An Ivy command which lets you visit Org buffers, files, bookmarks, and agenda commands]]
    #+begin_src emacs-lisp
      (leaf ivy-omni-org
        :after counsel
        :commands (ivy-omni-org)
        :bind ("C-c b" . ivy-omni-org)
        :custom
        (ivy-omni-org-file-sources . (slumos/ivy-omni-org-sources)))

      (defun slumos/ivy-omni-org-sources ()
        (-uniq (-concat
                (directory-files org-directory t "\\.org\\'")
                (directory-files org-directory t "\\.sync-conflict-[-[:digit:]]+\\.org\\'")
                (directory-files user-emacs-directory "\\.org\\'"))))
    #+end_src
*** [[https://github.com/alphapapa/org-ql][alphapapa/org-ql: An Org-mode query language, including search commands and saved views]]
    #+begin_src emacs-lisp
      (leaf org-ql
        :custom
        (org-ql-search-directories-files-regexp . "\\.org\\(_done\\)?\\'"))
    #+end_src

*** [[https://github.com/alphapapa/org-web-tools/blob/master/README.org][org-web-tools/README.org at master · alphapapa/org-web-tools · GitHub]]
    #+begin_src emacs-lisp
      (use-package org-web-tools)
    #+end_src

** My Personal Hacks
*** COMMENT -- (Replaced by awscli YASnippet) Add the properties I like when executing aws cli commands.
    #+BEGIN_SRC emacs-lisp
      (defun slumos/org-add-aws-sh-properties ()
        (interactive)
        (org-set-property "header-args" ":exports both :eval no-export :wrap src json :results raw"))
    #+END_SRC
*** COMMENT Post-process grabbed links

    Strip content-free stuff that gets tacked onto the title of every page.

    #+begin_src emacs-lisp
      (defun slumos/org-grab-link-after (s)
        (replace-regexp-in-string " | Salesforce$" "" s))

      (advice-add #'org-as-mac-chrome-get-frontmost-url :filter-return #'slumos/org-grab-link-after)
      (org-as-mac-chrome-get-frontmost-url)
    #+end_src

** Evaluation
*** Structure Templates
    #+begin_src emacs-lisp
      (add-to-list 'org-structure-template-alist
                   '("sj" . "src shell :results output :wrap src json"))
    #+end_src
*** Beautiful, gorgeous hack from [[https://emacs.stackexchange.com/questions/24247/org-mode-pipe-source-block-output-as-stdin-to-next-source-block/51734#51734][org babel - Org-mode: pipe source block output as stdin to next source block - Emacs Stack Exchange]]
    #+begin_src emacs-lisp
      (defun org-babel-execute:passthrough (body params) body)
      (defalias 'org-babel-execute:json 'org-babel-execute:passthrough)
      (add-to-list 'org-babel-load-languages '(passthrough . t))
    #+end_src
*** [[https://emacs.stackexchange.com/questions/13244/edebug-orgmode-source-code-blocks-with-input-variables][org mode - Edebug orgmode source code blocks with input variables - Emacs Stack Exchange]]
    #+begin_src emacs-lisp
      (defun org-src-debug ()
        "Put a call to this function at the beginning of the org source block to debug it."
        (save-excursion
          (let ((pt (let ((case-fold-search t)) (org-babel-where-is-src-block-head))))
            (unless pt (error "Not at source block"))
            (goto-char pt)
            (org-edit-src-code)
            (let ((parse-sexp-ignore-comments t))
              (goto-char (point-min))
              (forward-sexp 2)
              (edebug-defun)))))
    #+end_src
*** TRYING [[https://github.com/diadochos/org-babel-eval-in-repl][diadochos/org-babel-eval-in-repl: Send and eval org-mode babel code blocks in various REPLs (therefore it's async)]]
    #+begin_src emacs-lisp
      (use-package org-babel-eval-in-repl)
    #+end_src
**** COMMENT testing
     #+begin_src sh :results output raw drawer replace
     date
     #+end_src

     #+RESULTS:
     :results:
     Thu May 28 10:09:39 PDT 2020
     :end:

*** TODO [[https://github.com/jackkamm/ob-session-async][jackkamm/ob-session-async: Asynchronous org-mode session evaluation]]
*** TRYING [[https://github.com/astahlman/ob-async][astahlman/ob-async: Asynchronous src_block execution for org-babel]]
    #+BEGIN_SRC emacs-lisp
    (use-package ob-async)
    #+END_SRC
** TODO [[https://github.com/Kungsgeten/org-brain#setup-and-requirements][Kungsgeten/org-brain: Org-mode wiki + concept-mapping]]          :long:
** TODO [[https://www.nongnu.org/org-edna-el/][Org Edna]]
   #+begin_src emacs-lisp
     (use-package org-edna
       :after org
       :config (org-edna-load))
   #+end_src

** TODO Blogging with Hugo
   - [[https://archive.fo/ajEiq][An Emacs Blogging Workflow | Modern Emacs]]
** TODO calfw calfw-org-agenda
* Projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :config
      (projectile-mode 1))
  #+END_SRC
* Language Modes
** Misc
*** [[https://github.com/abo-abo/lispy][abo-abo/lispy: Short and sweet LISP editing]]
    #+begin_src emacs-lisp
    (leaf lispy
       :hook
       ((emacs-lisp-mode-hook
       fennel-mode-hook) . lispy-mode))
    #+end_src
**** hydra
     [[https://sachachua.com/dotemacs/#hydra-lispy][Thanks again Sacha!]]

     #+NAME: lispy-bindings-ref
     | key | function                      | column   |
     |-----+-------------------------------+----------|
     | <   | lispy-barf                    |          |
     | A   | lispy-beginning-of-defun      |          |
     | j   | lispy-down                    |          |
     | Z   | lispy-edebug-stop             |          |
     | B   | lispy-ediff-regions           |          |
     | G   | lispy-goto-local              |          |
     | h   | lispy-left                    |          |
     | N   | lispy-narrow                  |          |
     | y   | lispy-occur                   |          |
     | o   | lispy-other-mode              |          |
     | J   | lispy-outline-next            |          |
     | K   | lispy-outline-prev            |          |
     | P   | lispy-paste                   |          |
     | l   | lispy-right                   |          |
     | I   | lispy-shifttab                |          |
     | >   | lispy-slurp                   |          |
     | SPC | lispy-space                   |          |
     | xB  | lispy-store-region-and-buffer |          |
     | u   | lispy-undo                    |          |
     | k   | lispy-up                      |          |
     | v   | lispy-view                    |          |
     | V   | lispy-visit                   |          |
     | W   | lispy-widen                   |          |
     | D   | pop-tag-mark                  |          |
     | x   | see                           |          |
     | L   | unbound                       |          |
     | U   | unbound                       |          |
     | X   | unbound                       |          |
     | Y   | unbound                       |          |
     | H   | lispy-ace-symbol-replace      | Edit     |
     | c   | lispy-clone                   | Edit     |
     | C   | lispy-convolute               | Edit     |
     | n   | lispy-new-copy                | Edit     |
     | O   | lispy-oneline                 | Edit     |
     | r   | lispy-raise                   | Edit     |
     | R   | lispy-raise-some              | Edit     |
     | \   | lispy-splice                  | Edit     |
     | S   | lispy-stringify               | Edit     |
     | i   | lispy-tab                     | Edit     |
     | xj  | lispy-debug-step-in           | Eval     |
     | xe  | lispy-edebug                  | Eval     |
     | xT  | lispy-ert                     | Eval     |
     | e   | lispy-eval                    | Eval     |
     | E   | lispy-eval-and-insert         | Eval     |
     | xr  | lispy-eval-and-replace        | Eval     |
     | p   | lispy-eval-other-window       | Eval     |
     | q   | lispy-ace-paren               | Move     |
     | z   | lispy-knight                  | Move     |
     | s   | lispy-move-down               | Move     |
     | w   | lispy-move-up                 | Move     |
     | t   | lispy-teleport                | Move     |
     | Q   | lispy-ace-char                | Nav      |
     | -   | lispy-ace-subword             | Nav      |
     | a   | lispy-ace-symbol              | Nav      |
     | b   | lispy-back                    | Nav      |
     | d   | lispy-different               | Nav      |
     | f   | lispy-flow                    | Nav      |
     | F   | lispy-follow                  | Nav      |
     | g   | lispy-goto                    | Nav      |
     | xb  | lispy-bind-variable           | Refactor |
     | xf  | lispy-flatten                 | Refactor |
     | xc  | lispy-to-cond                 | Refactor |
     | xd  | lispy-to-defun                | Refactor |
     | xi  | lispy-to-ifs                  | Refactor |
     | xl  | lispy-to-lambda               | Refactor |
     | xu  | lispy-unbind-variable         | Refactor |
     | M   | lispy-multiline               | Other    |
     | xh  | lispy-describe                | Other    |
     | m   | lispy-mark-list               | Other    |

     #+BEGIN_SRC emacs-lisp :var bindings=lispy-bindings-ref :colnames yes :results silent :exports code
       (eval
        (append
         '(defhydra my/lispy-cheat-sheet (:hint nil :foreign-keys run)
            ("<f14>" nil "Exit" :exit t))
         (cl-loop for x in bindings
                  unless (string= "" (elt x 2))
                  collect
                  (list (car x)
                        (intern (elt x 1))
                        (when (string-match "lispy-\\(?:eval-\\)?\\(.+\\)"
                                            (elt x 1))
                          (match-string 1 (elt x 1)))
                        :column
                        (elt x 2)))))
       (with-eval-after-load "lispy"
         (define-key lispy-mode-map (kbd "s-l") 'my/lispy-cheat-sheet/body))
     #+END_SRC

** Dash
   #+begin_src emacs-lisp
     (use-package counsel-dash
       :hook (elpy-mode . (lambda () (setq-local counsel-dash-docsets "Python_3")))
       :custom
       (helm-dash-browser-func 'eww))
   #+end_src

** TODO [[https://github.com/doublep/eldev][doublep/eldev: Elisp Development Tool]]
** Dockerfile
   (use-package dockerfile-mode)
** [[https://fennel-lang.org/][Fennel]]
   Seeing if I can configure Hammerspoon with Fennel
   #+begin_src emacs-lisp
     (use-package fennel-mode
       :mode "\\.fnl\\'"
       :hook
       (fennel-mode . lispy-mode)
       (emacs-lisp-mode . lispy-mode))
   #+end_src

** flycheck
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck-mode
       :ensure flycheck
       :hook (puppet-mode ruby-mode json-mode python-mode))
   #+END_SRC
*** TODO [[https://github.com/baron42bba/.emacs.d/blob/master/bba.org#flycheck][Flycheck puppet-link from this example]]
** Go
   #+begin_src emacs-lisp
     (use-package go-mode
       :bind
       (:map go-mode-map
	     ("M-." . godef-jump)))
   #+end_src

** Groovy
   #+BEGIN_SRC emacs-lisp
     (use-package groovy-mode
       :mode "\\.groovy\\'"
       :custom
       (groovy-indent-offset 2))
   #+END_SRC
** Java
   #+begin_src emacs-lisp
     (exec-path-from-shell-copy-env "JAVA_HOME")
   #+end_src

   #+begin_src emacs-lisp
     (leaf company
       :after java-mode
       :hook java-mode-hook
       :custom
       ((company-backends . '(company-lsp))))
   #+end_src

   #+begin_src emacs-lisp
     (leaf lsp-mode
       :commands lsp)
   #+end_src

   #+begin_src emacs-lisp
     (leaf company-lsp
       :commands company-lsp
       :config
       (add-to-list 'company-backends 'company-lsp))
   #+end_src

   #+begin_src emacs-lisp
     (leaf lsp-ui
       :hook (lsp-mode-hook . lsp-ui-mode)
       :custom
       ((lsp-auto-guess-root . t)
        (lsp-enable-completion-at-point . t)
        (lsp-log-io . t)
        (lsp-log-max . 2000)
        (lsp-ui-doc-enable . t)))
   #+end_src

   #+begin_src emacs-lisp
     (use-package lsp-java
       :hook ((java-mode-hook . lsp)))
   #+end_src

   #+begin_src emacs-lisp
     (use-package dap-mode
       :hook ((java-mode-hook . dap-mode)
              (dap-stopped . (lambda (arg) call-interactively #'dap-hydra)))
       :config
       (dap-mode 1)
       (dap-ui-mode 1))
   #+end_src

   #+begin_src emacs-lisp :tangle no
     (leaf dap-java
       :package (dap-mode))
   #+end_src

** Javascript
   #+BEGIN_SRC emacs-lisp
     (use-package js2-mode :mode "\\.js\'")
   #+END_SRC

   Putting JSON here too...meh.
   #+BEGIN_SRC emacs-lisp
     (use-package json-mode
       :mode "\\.json\\(\\.erb\\)?\'"
       :config
       (add-hook 'json-mode-hook #'flycheck-mode))
   #+END_SRC
** jq mode
   #+begin_src emacs-lisp
     (use-package jq-mode)
   #+end_src
** Lua
   I only really use Lua for [[https://github.com/sdegutis/mjolnir][Mjolnir]], but maybe someday
   [[http://www.hammerspoon.org/][Hammerspoon]]. And I've played with [[https://nodemcu.com/][NodeMCU]] devices a bit...
   #+BEGIN_SRC emacs-lisp
   (use-package lua-mode
     :mode "\\(\\.lua\\|\\.rockspec\\)\\'")
   #+END_SRC
** Markdown
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :commands (markdown-mode gfm-mode)
       :mode (("README\\.md\\'" . gfm-mode)
	      ("\\.md\\'" . markdown-mode)
	      ("\\.markdown\\'" . markdown-mode))
       :init
       (setq markdown-command "cmark-gfm"))
       ;; :config
       ;; stolen from http://stackoverflow.com/a/26297700
       ;; makes markdown tables saner via orgtbl-mode
       ;; (require 'org-table)
       ;; (defun cleanup-org-tables ()
       ;;   (save-excursion
       ;;     (goto-char (point-min))
       ;;     (while (search-forward "-+-" nil t) (replace-match "-|-"))))
       ;; (add-hook 'markdown-mode-hook #'orgtbl-mode)
       ;; (add-hook 'markdown-mode-hook
       ;; 	    (lambda()
       ;; 	      (add-hook 'after-save-hook #'cleanup-org-tables  nil 'make-it-local))))
   #+END_SRC
** MinecraftForge
*** TODO [[https://github.com/qwattash/forge-mode][qwattash/forge-mode: Emacs minor mode for minecraft forge development]]

** Puppet
   #+BEGIN_SRC emacs-lisp
     (use-package puppet-mode
       :mode "\\.pp\\'"
       :config
       (unbind-key "$" puppet-mode-map)
       (setq-local align-region-separate 'group)
       (add-to-list 'puppet-mode-align-rules
		    '(puppet-assignment-literal
		      (regexp . "\\(\\s-*\\)=\\s-*[^# \t\n]")
		      (repeat . t)
		      (modes . '(puppet-mode)))))
   #+END_SRC
** Python
   #+BEGIN_SRC emacs-lisp
     (use-package python
       :mode ("\\.py\\'" . python-mode)
       :interpreter ("python" . python-mode))
   #+END_SRC

   #+begin_src emacs-lisp
     (use-package elpy)
   #+end_src

   IPython / Jupyter Notebook client

   #+BEGIN_SRC emacs-lisp
     (use-package ein
       :commands (ein:notebooklist-login
                  ein:notebooklist-open)
       :config
       (org-babel-do-load-languages 'org-babel-load-languages '((ein . t))))
   #+END_SRC

   Language Server Protocol
   #+begin_src emacs-lisp
     (use-package lsp-python-ms
       :hook
       (python-mode . (lambda () (require 'lsp-python-ms))))
   #+end_src
*** [[https://github.com/abo-abo/lpy][abo-abo/lpy: Minimal Python IDE for GNU Emacs]]
    #+begin_src emacs-lisp
      (use-package lpy)
    #+end_src

** Ruby
   #+BEGIN_SRC emacs-lisp
     (use-package ruby-mode
       :mode "\\(\\.rb\\|\\.rake\\|Gemfile\\||Puppetfile\\)\\'")

     (use-package inf-ruby
       :no-require t)

     (use-package rspec-mode
       :config
       (inf-ruby-switch-setup))

     (use-package ruby-hash-syntax
       :bind
       (:map ruby-mode-map
	     ("C-c #" . ruby-toggle-hash-syntax)))

     (use-package seeing-is-believing
       :bind (("<s-return>" . seeing-is-believing)))

     (use-package chruby)
   #+END_SRC

   #+begin_src emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((ruby . t)))
   #+end_src

   #+BEGIN_SRC emacs-lisp
     ;; https://raw.githubusercontent.com/jimweirich/emacs-setup-esk/master/ruby-align.el
     (require 'align)

     (add-to-list 'align-rules-list
		  '(ruby-comma-delimiter
		    (regexp . ",\\(\\s-*\\)[^# \t\n]")
		    (repeat . t)
		    (modes  . '(ruby-mode))))

     (add-to-list 'align-rules-list
		  '(ruby-hash-literal
		    (regexp . "\\(\\s-*\\)=>\\s-*[^# \t\n]")
		    (group 2 3)
		    (repeat . t)
		    (modes  . '(ruby-mode))))

     (add-to-list 'align-rules-list
		  '(ruby-hash-literal2
		    (regexp . "[a-z0-9]:\\(\\s-*\\)[^# \t\n]")
		    (repeat . t)
		    (modes  . '(ruby-mode))))

     (add-to-list 'align-rules-list
		  '(ruby-assignment-literal
		    (regexp . "\\(\\s-*\\)=\\s-*[^# \t\n]")
		    (repeat . t)
		    (modes  . '(ruby-mode))))

     (add-to-list 'align-rules-list
		  '(ruby-xmpfilter-mark
		    (regexp . "\\(\\s-*\\)# => [^#\t\n]")
		    (repeat . nil)
		    (modes  . '(ruby-mode))))
   #+END_SRC

** Rust
   #+begin_src emacs-lisp
   (use-package rustic)
   #+end_src

   #+begin_src emacs-lisp
   (use-package flycheck-rust)
   #+end_src

** Terraform (HCL)
   #+BEGIN_SRC emacs-lisp
     (use-package terraform-mode
       :hook 
       (terraform-mode . terraform-format-on-save-mode)
       (terraform-mode . flycheck-mode))
   #+END_SRC
** Web (HTML, etc)
   #+BEGIN_SRC emacs-lisp
     (use-package web-mode
       :mode "\\.j2$"
       :config (setq web-mode-content-types-alist '(("json" . "spinnaker/.*\\.j2\\'"))))
   #+END_SRC
** TOML
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package toml-mode
       :mode "Pipfile\\'")
   #+END_SRC
** YAML
   #+BEGIN_SRC emacs-lisp
     (use-package yaml-imenu)
     (use-package yaml-mode
       :mode "\\(.yaml\\|.yml\\)$"
       :config (add-hook 'yaml-mode-hook #'flycheck-mode)
       :hook (yaml-imenu-enable))
   #+END_SRC

* Context-specific
** Work/Life Balance?
   #+BEGIN_SRC emacs-lisp
     (let* ((local-config-name (pcase (system-name)
                                 ("steven.lan" "personal.org")
                                 (rx "salesforce.com" "work.org")))
            (local-config (expand-file-name local-config-name user-emacs-directory)))
       (message "work/life loading %s on %s" local-config (system-name))
       (if (file-exists-p local-config)
           (org-babel-load-file local-config)))
   #+END_SRC
* Notes
** TODO COMMENT [[https://lists.gnu.org/archive/html/emacs-orgmode/2014-04/msg00874.html][[O] Cool trick on how to eval bash/zsh babel blocks in emacs]]
   #+begin_src emacs-lisp
   (setq explicit-shell-file-name "/usr/local/bin/zsh")
   #+end_src


   #+begin_src emacs-lisp
     (defadvice org-babel-execute:sh (around sacha activate)
       (if (assoc-default :term (ad-get-arg 1) nil)
         (let ((buffer (make-term "babel" (or explicit-shell-file-name (getenv "ESHELL") (getenv "SHELL"))))
           (with-current-buffer buffer
             (insert (org-babel-expand-body:generic
                  body params (org-babel-variable-assignments:sh params)))
             (term-send-input))
     (pop-to-buffer buffer))
         ad-do-it))
   #+end_src

** TODO rcirc [[https://github.com/stevensurgnier/.emacs.d/blob/master/user/init/init-rcirc.el][.emacs.d/init-rcirc.el at master · stevensurgnier/.emacs.d]]
** TODO [[https://github.com/kaushalmodi/.emacs.d/commit/6beb2156b0d6181b0881cc714de1780129bb038f][Use rg (ripgrep) for projectile file caching · kaushalmodi/.emacs.d@6beb215]]
** TODO Check out [[https://nhoffman.github.io/.emacs.d/][init.el for Noah Hoffman]]
** TODO Colorize ob-shell ANSI output in org buffer?
** Getting customized vars to copy to use-package blocks
   #+begin_src emacs-lisp :results value table drawer replace :tangle no
     (let ((found nil))
           (mapatoms (lambda (sym)
                       (let ((val (get sym 'customized-value))
                             (comment (get sym 'customized-variable-comment)))
                         (if (car val) (push (list sym val comment) found)))))
           found)
   #+end_src

   #+RESULTS:
   :results:
   | magit-file-mode               | (t)                                                                | Customized with use-package magit     |
   | transient-default-level       | (5)                                                                | Customized with use-package magit     |
   | magit-repository-directories  | ('((~/Projects . 1) (~/Projects/iac . 1) (~/Projects/puppet . 1))) | Customized with use-package magit     |
   | magit-clone-default-directory | (~/Projects/)                                                      | Customized with use-package magit     |
   | doom-modeline-icon            | (t)                                                                | Use all-the-icons                     |
   | auto-revert-verbose           | (t)                                                                | Customized with use-package magit     |
   | forge-topic-list-limit        | ('(60 . 0))                                                        | Customized with use-package magit     |
   | yas-snippet-dirs              | ('(/Users/slumos/.config/emacs/snippets))                          | Customized with use-package yasnippet |
   :end:
